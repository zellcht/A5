
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer preYY_create_buffer
#define yy_delete_buffer preYY_delete_buffer
#define yy_flex_debug preYY_flex_debug
#define yy_init_buffer preYY_init_buffer
#define yy_flush_buffer preYY_flush_buffer
#define yy_load_buffer_state preYY_load_buffer_state
#define yy_switch_to_buffer preYY_switch_to_buffer
#define yyin preYYin
#define yyleng preYYleng
#define yylex preYYlex
#define yylineno preYYlineno
#define yyout preYYout
#define yyrestart preYYrestart
#define yytext preYYtext
#define yywrap preYYwrap
#define yyalloc preYYalloc
#define yyrealloc preYYrealloc
#define yyfree preYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE preYYrestart(preYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 262144
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t preYYleng;

extern FILE *preYYin, *preYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up preYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up preYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via preYYrestart()), so that the user can continue scanning by
	 * just pointing preYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when preYYtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t preYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow preYYwrap()'s to do buffer switches
 * instead of setting up a fresh preYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void preYYrestart (FILE *input_file  );
void preYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE preYY_create_buffer (FILE *file,int size  );
void preYY_delete_buffer (YY_BUFFER_STATE b  );
void preYY_flush_buffer (YY_BUFFER_STATE b  );
void preYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void preYYpop_buffer_state (void );

static void preYYensure_buffer_stack (void );
static void preYY_load_buffer_state (void );
static void preYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER preYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE preYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE preYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE preYY_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *preYYalloc (yy_size_t  );
void *preYYrealloc (void *,yy_size_t  );
void preYYfree (void *  );

#define yy_new_buffer preYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        preYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(preYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        preYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(preYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define preYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *preYYin = (FILE *) 0, *preYYout = (FILE *) 0;

typedef int yy_state_type;

extern int preYYlineno;

int preYYlineno = 1;

extern char *preYYtext;
#define yytext_ptr preYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up preYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	preYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 168
#define YY_END_OF_BUFFER 169
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1244] =
    {   0,
      150,  150,  169,  167,  168,    1,  167,  168,  166,  168,
        3,  167,  168,  167,  168,  167,  168,    2,  167,  168,
        6,  167,  168,    1,    6,  167,  168,    6,  167,  168,
        6,  166,  168,    3,    6,  167,  168,    5,  167,  168,
        6,  167,  168,    6,  167,  168,    6,  167,  168,    2,
        6,  167,  168,   53,  167,  168,    1,   53,  167,  168,
       49,  166,  168,    3,   53,  167,  168,   53,  167,  168,
       53,  167,  168,   50,   53,  167,  168,   50,   53,  167,
      168,   50,   53,  167,  168,   50,   53,  167,  168,   50,
       53,  167,  168,   50,   53,  167,  168,    2,   53,  167,

      168,   77,  167,  168,    1,   77,  167,  168,   75,  166,
      168,    3,   77,  167,  168,   77,  167,  168,   77,  167,
      168,   76,   77,  167,  168,   76,   77,  167,  168,   76,
       77,  167,  168,    2,   77,  167,  168,   78,   81,  167,
      168,    1,   78,   81,  167,  168,   86,  166,  168,    3,
       78,   81,  167,  168,   80,   81,  167,  168,   81,  167,
      168,   81,  167,  168,   78,   81,  167,  168,    2,   78,
       81,  167,  168,   87,   90,  167,  168,    1,   87,   90,
      167,  168,    3,   87,   90,  167,  168,   89,   90,  167,
      168,   87,   90,  167,  168,   87,   90,  167,  168,   90,

      167,  168,    2,   87,   90,  167,  168,   23,  167,  168,
        1,   23,  167,  168,   24,  166,  168,    3,   23,  167,
      168,   16,   23,  167,  168,   23,  167,  168,   23,  167,
      168,   23,  167,  168,   21,   23,  167,  168,16404,   23,
      167,  168,   21,   23,  167,  168,16404,   11,   23,  167,
      168,   12,   23,  167,  168,    2,   23,  167,  168,   17,
      167,  168,    1,   17,  167,  168,   19,  167,  168,   17,
      167,  168,   17,  167,  168,  167,  168,    2,   17,  167,
      168,  167,  168,    1,  167,  168,    3,  167,  168,  167,
      168,  167,  168,    2,  167,  168,   92,  167,  168,   96,

      167,  168,    1,   96,  167,  168,   94,  166,  168,    3,
       96,  167,  168,   96,  167,  168,   96,  167,  168,   96,
      167,  168,    2,   96,  167,  168, 8292,  167,  168,16481,
    16483,16484,  167,  168,  103,  167,  168,  104,  167,  168,
      102,  167,  168,  167,  168,  106,  167,  168,  167,  168,
      162,  167,  168,    1,  162,  167,  168,  150,  162,  167,
      168,  149,  166,  168,    3,  162,  167,  168,  153,  162,
      167,  168,  145,  162,  167,  168,  154,  162,  167,  168,
      162,  167,  168,  162,  167,  168,  152,  162,  167,  168,
      146,  162,  167,  168,  162,  167,  168,    2,  162,  167,

      168,   70,  167,  168,    1,   70,  167,  168,   69,  166,
      168,    3,   70,  167,  168,   70,  167,  168,   70,  167,
      168,    2,   70,  167,  168,   68,   70,  167,  168,    1,
       68,   70,  167,  168,   68,   70,  167,  168,   68,   69,
      166,  168,    3,   68,   70,  167,  168,   67,   70,  167,
      168,   68,   70,  167,  168,   68,   70,  167,  168,    2,
       68,   70,  167,  168,  122,  124,  167,  168,    1,  124,
      167,  168,  123,  166,  168,    3,  122,  124,  167,  168,
      124,  167,  168,  124,  167,  168,  122,  124,  167,  168,
      124,  167,  168,    2,  122,  124,  167,  168,  125,  147,

      167,  168,    1,  125,  147,  167,  168,  127,  166,  168,
        3,  125,  147,  167,  168,  147,  167,  168,  125,  147,
      167,  168,  125,  147,  167,  168,  146,  147,  167,  168,
        2,  125,  147,  167,  168,  124,  167,  168,  124,  167,
      168,  124,  167,  168,  135,  139,  140,  167,  168,    1,
      135,  140,  167,  168,  136,  166,  168,    3,  135,  139,
      140,  167,  168,  139,  140,  167,  168,  135,  139,  140,
      167,  168,  140,  167,  168,    2,  135,  139,  140,  167,
      168,  132,  134,  167,  168,    1,  134,  167,  168,  133,
      166,  168,    3,  132,  134,  167,  168,  134,  167,  168,

      132,  134,  167,  168,  132,  134,  167,  168,    2,  132,
      134,  167,  168,  143,  144,  167,  168,    1,  144,  167,
      168,    3,  143,  144,  167,  168,  143,  144,  167,  168,
      143,  144,  167,  168,    2,  143,  144,  167,  168,   59,
      167,  168,    1,   59,  167,  168,   60,  166,  168,    3,
       59,  167,  168,   59,  167,  168,   59,  167,  168,   58,
       59,  167,  168,   59,  167,  168,   58,   59,  167,  168,
        2,   59,  167,  168,   66,  167,  168,    1,   66,  167,
      168,   64,  166,  168,    3,   66,  167,  168,   66,  167,
      168,   66,  167,  168,   62,   66,  167,  168,   66,  167,

      168,    2,   66,  167,  168,   65,   66,  167,  168,   63,
       66,  167,  168,  160,  167,  168,    1,  160,  167,  168,
        3,  160,  167,  168,  157,  160,  167,  168,  160,  167,
      168,  160,  167,  168,  160,  167,  168,    2,  160,  167,
      168,  161,  167,  168,    1,  161,  167,  168,    3,  161,
      167,  168,  159,  161,  167,  168,  161,  167,  168,  161,
      167,  168,  161,  167,  168,    2,  161,  167,  168,   54,
      167,  168,   52,  167,  168,    1,   52,  167,  168,    3,
       52,  167,  168,   52,  167,  168,   52,  167,  168,   52,
      167,  168,    2,   52,  167,  168,   31,  167,  168,    1,

       31,  167,  168,   29,  166,  168,    3,   31,  167,  168,
       28,   31,  167,  168,   31,  167,  168,   25,   31,  167,
      168,   26,   31,  167,  168,   31,  167,  168,   31,  167,
      168,   30,   31,  167,  168,    2,   31,  167,  168,   35,
      167,  168,    1,   35,  167,  168,    3,   35,  167,  168,
       32,   35,  167,  168,   35,  167,  168,   35,  167,  168,
       35,  167,  168,    2,   35,  167,  168,  118,  167,  168,
        1,  118,  167,  168,    3,  118,  167,  168,  118,  167,
      168,  118,  167,  168,  116,  118,  167,  168,    2,  118,
      167,  168,  164,  165,    6,    6,    5,    6,   50,   50,

       50,   50,   50,   50,   50,   50,   50,   85,  164,   83,
      165,   76,   76,   76,   76,   78,   78,   87,   84,   87,
      164,   82,   87,  165,   87,   88, 8212,   21,16404,   22,
       21,16404,   17,   17,  164,   17,  165,   17,   18,   93,
      164,  165,   91,   92,   94,  164,  165,   95, 8292, 8291,
     8289, 8292,16481,16483,16484,  104,  103,  104,  102,  106,
      106,  101,  150,  151,  107,  164,  108,  165,  146,  148,
       68,   68,   67,  122,  109,  111,  164,  110,  165,  122,
      125,  126,  125,  165,  125,  121,  121,  164,  135,  139,
      135,  139,  137,  139,  164,  138,  139,  165,  135,  139,

      132,  129,  131,  164,  130,  132,  165,  132,  143,  141,
      143,  164,  142,  143,  165,  143,   58,   55,   58,   62,
       61,   63,  156,  164,  155,  165,  158,   54,   51,   33,
      164,   33,  165,   34,  116,  164,  165,    4,16391,   50,
       50,   50,   50,   50,   43,   50,   50,   50,   50,   50,
       85,   85,  164,   83,   83,  165,   76,   76,   76,   71,
       76,   76,   79,    4,   78,   84,   87,   84,   84,   87,
      164,   82,   87,   82,   82,   87,  165,    4,   87,   15,
       15,   21,16404,   17,  164,   17,  165,    4,   17,  164,
      165,    4,    4,   93,  164,  165,    4,  105,  151,  107,

      107,  164,  108,  108,  165,  110,  165,    4,  122,  125,
      165,    4,  125,  120,  139,  164,  139,  165,    4,  135,
      139,    4,  139,  128,  132,  165,    4,  132,  143,  164,
      143,  165,    4,  143,   58,  155,  165,   27,  163,16391,
        9, 8199,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   85,  163,   76,   72,   76,   76,   76,   79,
       84,   87,  163,   14,   13,   14,   21,16404,   17,  163,
      163,  163,   98,  106,  110,  112,  139,  163,  143,  163,
       58,   27, 8199,    9,   50,   50,   44,   47,   45,   45,
       50,   50,   50,   50,   50,   50,   50,   73,   76,   74,

       76,   76,   13,   21,16404,  114,   58,    8,    9,   50,
       50,   48,   40,   39,   50,   50,   50,   46,   21,16404,
      113,  115,  117,   58,    9,   38,   42,   41,16420,   37,
       10,   58,    9, 8228,   57,   56,    9, 8228,  119,    9,
        9,    9,    9
    } ;

static yyconst flex_int16_t yy_accept[1162] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    4,    6,    9,
       11,   14,   16,   18,   21,   24,   28,   31,   34,   38,
       41,   44,   47,   50,   54,   57,   61,   64,   68,   71,
       74,   78,   82,   86,   90,   94,   98,  102,  105,  109,

      112,  116,  119,  122,  126,  130,  134,  138,  142,  147,
      150,  155,  159,  162,  165,  169,  174,  178,  183,  188,
      192,  196,  200,  203,  208,  211,  215,  218,  222,  226,
      229,  232,  235,  240,  243,  248,  252,  256,  260,  263,
      267,  270,  273,  276,  278,  282,  284,  287,  290,  292,
      294,  297,  300,  303,  307,  310,  314,  317,  320,  323,
      327,  333,  335,  338,  341,  344,  346,  349,  351,  354,
      358,  362,  365,  369,  373,  377,  381,  384,  387,  391,
      395,  398,  402,  405,  409,  412,  416,  419,  422,  426,
      430,  435,  439,  443,  448,  452,  456,  460,  465,  469,

      473,  476,  481,  484,  487,  491,  494,  499,  503,  508,
      511,  516,  519,  523,  527,  531,  536,  539,  542,  545,
      550,  555,  558,  564,  568,  573,  576,  582,  586,  590,
      593,  598,  601,  605,  609,  614,  618,  622,  627,  631,
      635,  640,  643,  647,  650,  654,  657,  660,  664,  667,
      671,  675,  678,  682,  685,  689,  692,  695,  699,  702,
      706,  710,  714,  717,  721,  725,  729,  732,  735,  738,
      742,  745,  749,  753,  757,  760,  763,  766,  770,  773,
      776,  780,  784,  787,  790,  793,  797,  800,  804,  807,
      811,  815,  818,  822,  826,  829,  832,  836,  840,  843,

      847,  851,  855,  858,  861,  864,  868,  871,  875,  879,
      882,  885,  889,  893,  894,  895,  895,  896,  897,  898,
      899,  899,  899,  899,  900,  901,  902,  903,  904,  905,
      906,  907,  908,  910,  912,  913,  914,  915,  916,  917,
      917,  917,  918,  919,  922,  925,  926,  927,  927,  927,
      927,  928,  930,  931,  931,  933,  934,  936,  938,  939,
      940,  940,  941,  942,  943,  943,  943,  944,  945,  945,
      946,  947,  948,  948,  949,  949,  950,  951,  952,  956,
      956,  956,  957,  958,  959,  960,  960,  961,  961,  962,
      963,  964,  964,  965,  967,  969,  970,  971,  971,  972,

      973,  974,  975,  976,  978,  980,  981,  981,  981,  981,
      981,  981,  981,  981,  981,  981,  981,  982,  983,  985,
      986,  987,  989,  989,  989,  991,  992,  993,  996,  999,
     1001, 1001, 1002, 1003, 1005, 1008, 1009, 1010, 1013, 1016,
     1017, 1018, 1019, 1019, 1020, 1021, 1022, 1023, 1025, 1027,
     1028, 1029, 1030, 1030, 1030, 1030, 1032, 1034, 1035, 1036,
     1037, 1038, 1039, 1039, 1039, 1040, 1041, 1042, 1043, 1044,
     1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055,
     1057, 1058, 1059, 1060, 1061, 1062, 1063, 1063, 1064, 1064,
     1064, 1066, 1068, 1069, 1072, 1074, 1075, 1078, 1080, 1081,

     1081, 1082, 1082, 1082, 1084, 1086, 1088, 1090, 1091, 1092,
     1093, 1095, 1096, 1097, 1098, 1098, 1098, 1099, 1099, 1100,
     1101, 1103, 1104, 1106, 1108, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1112, 1114, 1114, 1115, 1117, 1119,
     1122, 1124, 1124, 1124, 1125, 1127, 1129, 1131, 1133, 1135,
     1136, 1138, 1138, 1139, 1139, 1139, 1140, 1140, 1141, 1141,
     1142, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150,
     1151, 1152, 1153, 1155, 1156, 1158, 1159, 1160, 1160, 1161,
     1161, 1164, 1165, 1167, 1167, 1167, 1169, 1171, 1172, 1173,

     1174, 1175, 1176, 1176, 1176, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1179, 1181, 1182, 1182, 1183, 1183, 1183,
     1183, 1183, 1183, 1184, 1184, 1185, 1185, 1186, 1187, 1189,
     1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199,
     1199, 1200, 1202, 1203, 1203, 1203, 1204, 1204, 1204, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1207,
     1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207,
     1207, 1207, 1207, 1207, 1207, 1208, 1208, 1208, 1208, 1208,
     1208, 1209, 1209, 1210, 1210, 1211, 1212, 1212, 1212, 1213,

     1214, 1215, 1216, 1217, 1218, 1219, 1219, 1219, 1221, 1222,
     1222, 1222, 1222, 1222, 1222, 1222, 1223, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1225, 1225, 1225, 1225, 1226, 1226,
     1227, 1227, 1228, 1229, 1230, 1231, 1231, 1231, 1231, 1231,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1233, 1233, 1233, 1233, 1234, 1234, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1236, 1237, 1237,

     1237, 1237, 1238, 1238, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241,
     1241, 1241, 1241, 1241, 1241, 1241, 1241, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,

     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,

     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,

     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    3,    4,
        1,    1,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    6,    7,    8,    9,    1,    1,   10,   11,
       12,   13,    1,   14,   15,   16,   17,   18,   19,   18,
       18,   18,   18,   18,   18,   20,   20,   21,    1,   22,
       23,   24,   25,   26,   27,   27,   28,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       29,   30,   31,    1,   27,    1,   32,   33,   34,   35,

       36,   37,   38,   39,   40,   38,   41,   42,   43,   44,
       45,   46,   38,   47,   48,   49,   50,   51,   38,   52,
       53,   38,   54,    1,   55,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[57] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    1,    1,    8,
        9,    6,   10,    1,   11,   12,   13,   14,   14,   14,
        1,   15,    6,    6,    1,   16,   17,   17,    1,   18,
        1,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1272] =
    {   0,
        0,    4,    9,   64,  120,    0,  176,    0,   26,   37,
      231,  235,  291,    0,  346,  350,  357,  383,  439,    0,
       53,  494,  524,    0,  577,    0,  633,    0,   59,  498,
      688,  692,  697,  702,  757,  812,  868,    0,  923,  978,
      716,  730,  763,  787,  793,  803, 1034,    0, 1090,    0,
     1135,    0,  930,  937,  941,  959, 1162,    0, 1214, 1218,
     1273, 1328, 1225, 1262, 1384,    0, 2708, 5500, 5500, 5500,
     5500,    2, 2680, 5500, 5500, 5500,   71, 5500, 5500, 5500,
        3, 2668,   77, 5500, 5500, 5500, 5500, 5500,    5, 2667,
        0, 2638, 2634,    4,   57, 2612, 5500, 5500, 5500, 5500,

     5500,   10, 2629,    0,    8, 2616, 5500,    0,    0, 5500,
        0, 5500, 2617,   32, 2616,    0,    0,    0,    0, 5500,
       58, 2604,    0,    0, 5500, 5500, 5500, 5500, 5500, 2597,
       60, 2601,  103,   33,  725, 5500, 5500, 5500,    0,    0,
     5500,   73, 2594,    0,    0,    0,   78,  227,  240,  234,
      238,   29, 2609, 2603, 5500, 2594,   99,  242,  106, 2593,
      362,    0, 2586, 2574, 2569, 2555,  247, 2565, 5500, 5500,
      110, 5500, 5500, 5500, 2560, 5500,  253, 2541, 5500,    0,
      239, 5500, 5500, 5500, 5500, 5500,  255, 2530, 5500, 5500,
     5500,  246, 5500, 5500, 5500,  256, 2517, 5500,    0, 5500,

     5500,    0, 2520,  258, 2511, 1415,    0,    0,    0, 5500,
        0, 2517,  261, 2507,    0,    0, 2514,  263,  245,  366,
        0, 5500,  367,  266,  376,   83,  377,    0, 5500, 5500,
        0, 2508,  271, 2494,    0,    0, 5500,    0,  272, 2487,
        0, 5500, 5500, 5500, 5500,  273, 2485,    0,  391, 2473,
     5500, 5500, 5500, 5500, 5500,  343, 2478,    0, 2494, 5500,
     5500,    0, 5500, 5500, 5500, 5500,  386, 2472,    0, 5500,
     5500, 5500, 5500, 5500,  392, 2470,    0, 5500,    0, 5500,
     5500, 5500,  397, 2469,  393, 5500, 5500, 5500, 5500, 5500,
     5500, 2451, 5500, 5500,  398, 2454, 5500, 5500, 5500, 5500,

     5500, 5500,  399, 2453,    0, 5500, 5500, 5500, 5500,  404,
     2451,    0, 5500, 2462, 2449,    0, 5500,  501, 5500,  494,
      415,  408,  507,    0, 2433, 2426,  382, 2424,  705, 2411,
     2422, 2419, 2440, 2431,    0,  383, 2408,  800,    0, 2431,
      406, 1462,    0,  523,  525, 1481, 5500, 2430,  417,  534,
     5500,  720, 5500, 2433,  970,    0, 2416, 2406, 1500, 5500,
      365, 5500,  730,  524, 1519,  426, 5500,  505, 2418, 5500,
      345,  387, 1540, 5500, 2406,  747, 5500, 5500,  760, 2405,
      374, 2404, 2400, 2383, 2368, 2348,  504, 2341,  530, 5500,
      425, 2348, 2347,  534,  709,    0, 5500, 2336, 5500,  541,

     5500,    0, 5500,  421, 2308, 1559, 1550, 2274, 2261, 2256,
     2249, 2264, 2259, 2241, 2252, 2232,    0, 5500, 2257, 1597,
     5500, 2259, 2224,  784,  693,    0,    0, 2253, 2248, 1620,
     2218,    0,  695, 2244, 2234, 1639,    0, 2222, 2212, 1658,
        0, 5500, 2224, 2186,    0, 5500,    0, 2209, 2203, 5500,
        0, 5500, 2212, 2197,  720, 2193, 2187, 5500,    0, 2182,
     5500, 5500,  767, 2186, 1242, 2154, 2150, 2152, 2151, 2138,
     5500, 2135, 2131, 2120, 2118, 2116,    0, 2134,    0,    0,
     2112, 2112, 2103, 5500, 2105, 2105, 2128, 5500, 2123,  812,
        0,  745,    0,  816,  766,    0,  794,    0, 5500, 2122,

     2119,  822,  847,  995, 2107,    0,    0,  838,  778,  802,
     5500,  777, 2119, 2117,  860,  823, 5500, 2103, 2101, 5500,
     2085, 5500, 5500, 2081,    0, 2051, 2049,  948, 2036, 2052,
     2050, 2028, 2038, 2029,  656, 2019, 2032, 2022, 2015, 2018,
     2024, 2004, 2005,    0,    0, 2007, 5500, 2022,    0,  767,
        0, 1985,  853, 5500,    0,    0, 2003,    0,    0, 1979,
     5500, 2007, 5500, 2006,  991, 5500, 1995, 1290, 1255, 1268,
     1302, 5500, 1967, 1957,  927, 1682, 1960, 1959, 1957, 1939,
     1933, 1943,    0, 1010,  796, 1938, 1935, 1960, 5500, 1004,
      922, 5500, 5500, 1007, 1145, 1310,    0,  961, 1959, 5500,

     5500, 1945, 1925, 1910, 5500, 1913, 1901, 1898, 1903, 1890,
     1894, 1892, 1891, 1024, 1884, 1872, 1868, 1847, 1846, 1854,
     1837, 1308,    0,    0, 1837, 1869, 5500, 1014,  966, 1443,
     1478,  844,  984, 1556, 1575, 1612, 1839, 1837, 5500, 5500,
      947, 1833, 1738, 1009, 1827, 1809, 1822, 1848, 5500, 1151,
     1811,    0, 1149, 1835, 1830, 5500, 1829, 1154, 1323, 1791,
     1221, 1783, 1787, 1773, 1772, 1782, 1767, 1233, 1248, 1761,
     1760, 1626, 1633, 1628, 1639, 1623, 1615, 1608, 1599, 1615,
     1604, 1585, 1592, 1584, 1582, 1603, 1601, 1792, 1795,  863,
     5500, 1620, 1798, 1805, 1569, 1601, 1214, 1558, 5500, 1150,

     5500, 1230, 1279, 1558, 1587, 1549, 1358, 1817, 1361, 1528,
     1516, 1523, 1522, 1526, 1510, 1367, 5500, 1370, 1505, 1504,
     1502, 1498, 1493, 1484, 1486, 1483, 1465, 1466, 1458, 1451,
     1457, 1442, 1446, 1445, 1826, 1829, 1832, 1839, 1851, 1473,
     1297, 1246, 5500, 1309, 5500, 1314, 1497, 1858, 1443, 5500,
     1426, 1424, 1423, 1419, 1410, 1410, 1409, 1401, 1398, 1330,
     1305, 1312, 1295, 1310, 1295, 1300, 1279, 1274, 1277, 1259,
     1338, 1863, 1873, 1885, 1892, 1895,    0, 1516, 1904, 1290,
     1226, 1217, 1203, 1187, 1194, 1175,    0, 1168, 1151, 1149,
     1121, 1112, 1107,  986,  986,  967, 1365, 5500, 1898, 1917,

     1920, 1927, 1930,    0, 1534, 1950, 1940,  954,  963,  951,
     5500,  939,  946,  927,  923,  889,  877,  818, 1961, 1964,
     1974, 1984, 1987, 1595, 1995, 2006,  774,  779,  713,  692,
      659,  503,  464, 2009, 2019, 2022, 2029, 2032, 1635, 2041,
     2051,  379,  328,  234, 2054, 2066, 2076, 2085, 2088, 1654,
     2096, 2107,  202, 2110, 2113, 2123, 2132, 2142, 2151, 2165,
     2154, 2170, 2176, 2189, 2198, 2180, 2207, 2210, 2222, 2228,
     2233, 2238, 2242, 2251, 2245, 2256, 2266, 2275, 2278, 2290,
     2281, 2299, 2304, 2309, 2313, 2323, 2318, 2328, 2338, 2333,
     2343, 2348, 2357, 2362, 2371, 2365, 2380, 2390, 2376, 2385,

     2401, 2395, 2410, 2413, 2423, 2428, 2431, 2442, 2447, 2457,
     2466, 2469, 2479, 2484, 2488, 2497, 2502, 2510, 2519, 2513,
     2524, 2536, 2541, 2549, 2554, 2545, 2559, 2571, 2576, 2580,
     2589, 2583, 2598, 2607, 2601, 2612, 2617, 2628, 2631, 2641,
     2635, 2646, 2655, 2660, 2664, 2669, 2674, 2680, 2683, 2693,
     2696, 2699, 2708, 2713, 2722, 2716, 2727, 2737, 2731, 2746,
     2756, 2751, 2761, 2770, 2775, 2779, 2789, 2783, 2798, 2808,
     2794, 2803, 2823, 2813, 2828, 2842, 2817, 2847, 2852, 2837,
     2861, 2871, 2865, 2876, 2881, 2890, 2894, 2897, 2906, 2909,
     2919, 2912, 2928, 2938, 2924, 2943, 2952, 2933, 2964, 2977,

     2967, 2986, 2991, 2996, 3000, 3005, 3010, 3014, 3019, 3024,
     3029, 3032, 3043, 3049, 3058, 3052, 3063, 3072, 3067, 3077,
     3087, 3096, 3099, 3104, 3113, 3119, 3124, 3129, 3133, 3142,
     3151, 3157, 3166, 3160, 3171, 3181, 3176, 3186, 3195, 3190,
     3204, 3214, 3207, 3223, 3234, 3219, 3243, 3248, 3228, 3253,
     3267, 3262, 3272, 3282, 3276, 3287, 3292, 3301, 3304, 3307,
     3319, 3322, 3334, 3339,   76, 3345, 3354, 3359, 3364, 3371,
     3376, 3380, 3391, 3398, 3407, 3412, 3417, 3423, 3428, 3432,
     3435, 3438,    5, 3443, 3446, 3450, 3453, 3459, 3464, 3469,
     3475, 3480, 3490, 3498, 3505, 3511, 3516, 3521, 3527, 3532,

     3535, 3538, 3542, 3545, 3550, 3553, 3557, 3563, 3568, 3573,
     3579, 3590, 3597, 3605, 3609, 3615, 3620, 3625, 3631, 3634,
     3637, 3642, 3645, 3649, 3652, 3657, 3661, 3667, 3672, 3677,
     3689, 3697, 3704, 3709, 3713, 3719, 3724, 3729, 3732, 3735,
     3741, 3744, 3749, 3752, 3756, 3761, 3765, 3771, 3776, 3787,
     3796, 3804, 3808, 3813, 3817, 3823, 3828, 3831, 3834, 5500,
     3888, 3906, 3924, 3942, 3960, 3978, 3996, 4014, 4032, 4050,
     4068, 4086, 4104, 4122, 4140, 4158, 4176, 4194, 4212,  840,
      942, 4230, 4248, 4266, 4283, 4301, 4317, 4334, 4351, 4369,
     4385, 4402, 4417, 4433, 1248, 4450, 4468, 4485, 4503, 4520,

     4537, 4554, 4572, 1274, 1363, 1364, 4590, 1365, 4608, 4626,
     4634, 4646, 4661, 1439, 4679, 4697, 1446, 4715, 4733, 4750,
     4768, 4785, 4803, 4821, 4837, 4854, 4871, 4887, 4904, 4919,
     4935, 1461, 4952, 4970, 4987, 5005, 5022, 5039, 5056, 5074,
     1499, 1539, 1558, 1574, 5092, 5109, 5117, 5134, 5152, 1638,
     5170, 5188, 1662, 5206, 5223, 5241, 5259, 5277, 5295, 5313,
     5328, 5345, 5362, 5380, 5397, 5414, 5432, 5449, 5464, 1797,
     5481
    } ;

static yyconst flex_int16_t yy_def[1272] =
    {   0,
     1161, 1161, 1161, 1162, 1160,    5, 1160,    7, 1163, 1163,
     1164, 1164, 1160,   13, 1165, 1165, 1166, 1166, 1160,   19,
     1167, 1167,   19,   23, 1160,   25, 1160,   27, 1168, 1169,
     1161, 1161, 1161, 1161, 1170, 1170, 1160,   37, 1170, 1170,
     1171, 1171, 1172, 1172, 1173, 1173, 1160,   47, 1160,   49,
       49,   51, 1174, 1174, 1175, 1175,   23,   57, 1176, 1176,
     1177, 1177, 1178, 1178, 1160,   65, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1179, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1180, 1180, 1180, 1180, 1180, 1180, 1160, 1160, 1160, 1160,

     1160, 1160, 1160, 1181, 1181, 1181, 1160, 1182, 1182, 1160,
     1182, 1160, 1183, 1160, 1182, 1182, 1184, 1184, 1184, 1160,
     1184, 1184, 1185, 1184, 1160, 1160, 1160, 1160, 1160, 1186,
     1160, 1160, 1187, 1160, 1187, 1160, 1160, 1160, 1188, 1188,
     1160, 1188, 1188, 1189, 1188, 1190, 1190, 1190, 1190, 1190,
     1190, 1191, 1192, 1192, 1160, 1192, 1192, 1192, 1160, 1192,
     1193, 1160, 1160, 1160, 1160, 1160, 1194, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1195,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1196, 1160, 1160, 1160, 1160, 1160, 1160, 1197, 1160,

     1160, 1197, 1160, 1160, 1197, 1160, 1197, 1198, 1198, 1160,
     1198, 1160, 1198, 1198, 1195, 1198, 1160, 1160, 1160, 1199,
     1200, 1160, 1199, 1201, 1199, 1160, 1199, 1202, 1160, 1160,
     1202, 1160, 1202, 1202, 1202, 1203, 1160, 1203, 1203, 1203,
     1203, 1160, 1160, 1160, 1160, 1160, 1160, 1204, 1160, 1204,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1205, 1160, 1160,
     1160, 1206, 1160, 1160, 1160, 1160, 1160, 1160, 1207, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1207, 1160, 1208, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1209, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,

     1160, 1160, 1160, 1160, 1210, 1160, 1160, 1160, 1160, 1160,
     1160, 1211, 1160, 1160, 1160, 1212, 1160, 1179, 1160, 1160,
     1160, 1213, 1160, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1215, 1216, 1217, 1217, 1217, 1217, 1218, 1219,
     1220, 1218, 1221, 1222, 1223, 1221, 1160, 1160, 1224, 1160,
     1160, 1225, 1160, 1160, 1225, 1226, 1226, 1226, 1226, 1160,
     1227, 1160, 1227, 1227, 1227, 1160, 1160, 1228, 1229, 1160,
     1229, 1229, 1229, 1160, 1160, 1160, 1160, 1160, 1230, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1231, 1160,
     1160, 1160, 1160, 1160, 1160, 1232, 1160, 1160, 1160, 1233,

     1160, 1234, 1160, 1160, 1160, 1234, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1235, 1160, 1235, 1235,
     1160, 1160, 1160, 1160, 1236, 1237, 1238, 1238, 1238, 1236,
     1160, 1239, 1160, 1160, 1239, 1239, 1240, 1240, 1240, 1240,
     1241, 1160, 1160, 1241, 1242, 1160, 1243, 1160, 1160, 1160,
     1244, 1160, 1160, 1245, 1246, 1160, 1160, 1160, 1247, 1160,
     1160, 1160, 1248, 1249, 1160, 1250, 1250, 1250, 1250, 1250,
     1160, 1250, 1250, 1250, 1250, 1250, 1251, 1251, 1252, 1252,
     1253, 1253, 1253, 1160, 1253, 1253, 1254, 1160, 1160, 1160,
     1255, 1256, 1257, 1256, 1258, 1259, 1258, 1260, 1160, 1160,

     1160, 1160, 1160, 1261, 1262, 1262, 1262, 1263, 1263, 1263,
     1160, 1264, 1264, 1264, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1234, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1235, 1235, 1160, 1160, 1238, 1238, 1236,
     1238, 1160, 1160, 1160, 1239, 1239, 1240, 1240, 1240, 1241,
     1160, 1265, 1160, 1160, 1160, 1160, 1249, 1266, 1160, 1160,
     1160, 1160, 1250, 1250, 1250, 1160, 1250, 1250, 1250, 1250,
     1250, 1250, 1251, 1253, 1253, 1253, 1253, 1267, 1160, 1160,
     1256, 1160, 1160, 1160, 1160, 1261, 1262, 1263, 1264, 1160,

     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1238, 1240, 1241, 1268, 1160, 1160, 1266, 1266,
     1266, 1160, 1266, 1160, 1160, 1160, 1250, 1250, 1160, 1160,
     1160, 1250, 1160, 1250, 1250, 1250, 1250, 1250, 1160, 1160,
     1253, 1253, 1253, 1160, 1160, 1160, 1160, 1160, 1261, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1241, 1160, 1160, 1266, 1266, 1160,
     1160, 1160, 1160, 1160, 1250, 1250, 1160, 1160, 1160, 1160,

     1160, 1250, 1250, 1250, 1160, 1160, 1160, 1261, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1241, 1266, 1266, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1269, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1241, 1266, 1266, 1160, 1160, 1160, 1270, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1271, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1266, 1266,

     1160, 1160, 1160, 1270, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1266, 1266,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1266, 1266, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1266, 1266, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1266, 1266, 1160, 1160, 1160, 1160, 1160,
     1160, 1266, 1266, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,

     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,

     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,

     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,    0,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,

     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160
    } ;

static yyconst flex_int16_t yy_nxt[5557] =
    {   0,
     1160,   69,  381,   70,   71,   69,  362,   70,   71, 1160,
       69,  382,   70,   71,  314,  314,   72,  314,  315,  315,
       72,  315,  333,  362,   73,   72,  334,  109,   73,  110,
      111,  366,  112,   73, 1160,  113,  353,  354,  109,  367,
      110,  111,  114,  112,  333,  327,  113,  328,  334,  336,
      115,  337, 1160,  114,  154,   74,  155,  156,  750,   74,
      184,  115,  185,  186,   74,   76,   77,   78,   79,  157,
      344,   80,  314,  318,  345,  187,  315,  158,  319,  321,
       81,  116,  159,  188,  362,  357,  351,  322,   82,  358,
       83,   83,  116,  329,  323,  323,  323,  320,  320,  330,

      331,  362,  370,  323,  323,  350,  350,  350,  160,  374,
      375,  371,  391,  351,  189,  372,  431,  392,  410,   84,
       85,   86,   85,   87,   88,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   89,   85,   85,   85,
       85,   85,   85,   85,   90,   85,   91,   91,   85,   85,
       85,   91,   91,   92,   93,   94,   91,   91,   91,   95,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   96,
       91,   91,   91,   85,   85,   97,   98,   99,   98,  100,
      101,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,  102,   98,   98,   98,   98,   98,   98,   98,

      103,   98,  104,  104,   98,   98,   98,  104,  104,  104,
      104,  105,  104,  104,  104,  106,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,   98,
       98,  107,  118,  362,   70,  119,  118,  120,   70,  119,
      362,  120,  397,  398,  362,  370,  362,  121,  400,  387,
      362,  121,  363,  401,  547,  122,  364,  362,  365,  122,
      123,  362,  388,  362,  123,  394,  373,  333,  333,  395,
      404,  334,  334,  314,  405,  422,  547,  419,  428,  315,
      423,  424,  429,  434,  438,  314,  124,  435,  439,  315,
      124,  125,  126,  125,  127,  128,  125,  129,  125,  125,

      130,  125,  125,  125,  125,  125,  125,  131,  125,  125,
      125,  125,  125,  125,  125,  132,  125,  133,  133,  125,
      134,  125,  133,  133,  133,  133,  135,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  136,  137,  138,  140,  370,   70,
       71,  140,  141,   70,   71,  314,  141,  512,  147,  315,
       70,  148,  142,   68,  376,  377,  142,  426,  426,  853,
      143,  362,  378,  149,  143,  144,  381,  426,  426,  144,
       68,  150,  427,  427,  147,  382,   70,  148,  362,   68,
      370,  380,  427,  427,  442,  443,  452,  453,  448,  149,

      430,  145,  449,  513,  314,  145,   68,  150,  315,  314,
      314,  456,  151,  315,  315,  457,  314,  321,  464,  465,
      315,  468,  481,  490,  490,  322,  501,  391,  366,  469,
      482,  547,  392,  460,  502,  502,  367,  403,  151,   68,
       69,   68,   70,   71,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   72,   68,   68,   68,   68,
       68,   68,   68,   73,   68,  152,  152,   68,   68,   68,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,   68,   68,   74,  154,  321,  155,  156,  191,

      192,  193,  194,  318,  322,  195,  387,  366,  319,  321,
      157,  323,  323,  323,  196,  367,  547,  322,  158,  388,
      323,  323,  197,  159,  323,  323,  323,  320,  320,  493,
      362,  496,  387,  323,  323,  494,  503,  503,  503,  520,
      509,  497,  844,  400,  351,  388,  521,  362,  401,  160,
      161,  161,  493,  198,  496,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,   68,   69,  162,
       70,   71,   68,   68,   68,   68,   68,  163,  164,   68,
      165,   68,  166,   72,   68,   68,   68,   68,   68,   68,

       68,   73,   68,  167,  167,   68,  168,   68,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
       68,   68,   74,  169,  170,  171,  172,  173,  169,  174,
      175,  169,  176,  169,  169,  169,  169,  169,  169,  177,
      169,  169,  169,  169,  169,  169,  169,  178,  179,  180,
      180,  169,  181,  169,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  169,  169,  182,   69,
      612,   70,   71,   69,  426,   70,   71,  553,   69,  613,

       70,   71,  554,   69,   72,   70,   71,  471,   72,  427,
      471,  547,   73,   72,  522,  471,   73,  221,   72,  222,
      223,   73,  350,  350,  350,  523,   73,  350,  350,  350,
      351,  221,  224,  222,  223,  351,  362,  565,  565,  472,
      225,  226,  508,   74,  547,  226,  224,   74,  473,  376,
      377,  493,   74,  362,  225,  226,  843,   74,  200,  226,
      201,  202,  376,  377,  229,  515,  230,  231,  426,  203,
      378,  227,  496,  204,  493,  232,  355,  464,  465,  233,
      370,  205,  206,  427,  362,  227,  206,  234,  229,  380,
      230,  231,  547,  599,  237,  496,  222,  238,  650,  232,

      496,  362,  484,  233,  237,  484,  222,  238,  362,  239,
      484,  234,  207,  200,  547,  201,  202,  240,  235,  239,
      842,  589,  493,  496,  203,  362,  661,  240,  204,  590,
      590,  593,  591,  378,  485,  651,  205,  206,  547,  594,
      594,  206,  235,  486,  362,  493,  690,  691,  241,  595,
      595,  595,  380,  324,  598,  553,  324,  351,  241,  833,
      554,  362,  600,  600,  600,  690,  691,  207,  208,  209,
      208,  210,  211,  208,  208,  208,  208,  208,  208,  208,
      212,  208,  208,  208,  213,  208,  208,  208,  208,  208,
      208,  208,  214,  208,  215,  215,  208,  208,  208,  215,

      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  208,  208,  216,  200,  832,  201,  202,  493,  639,
      831,  264,  639,   70,  265,  217,  266,  639,  264,  218,
       70,  265,  272,  266,   70,  273,  267,  205,  219,  697,
      274,  493,  219,  267,  268,  335,  605,  275,  335,  269,
      272,  268,   70,  273,  830,  276,  269,  362,  274, 1160,
      277,  829,  350,  350,  350,  275,  605,  632,  207,  200,
      351,  201,  202,  276,  362,  270,  698, 1160,  277,  828,
      217,  614,  270,  661,  218,  632,  278,  350,  350,  350,

      627,  605,  205,  219,  827,  351,  661,  219,  628,  628,
      818,  700,  649,  488,  278,  649,  656,  817,  504,  701,
      649,  655,  655,  563,  657,  657,  669,  669,  669,  816,
      596,  687,  687,  207,  242,  243,  242,  244,  245,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      246,  242,  242,  242,  242,  242,  242,  242,  247,  242,
      248,  248,  242,  249,  242,  248,  248,  248,  250,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  242,  242,  251,
      252,  253,  252,  254,  255,  252,  252,  252,  252,  252,

      252,  252,  252,  252,  252,  252,  256,  252,  252,  252,
      252,  252,  252,  252,  257,  252,  258,  258,  252,  259,
      252,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  252,  252,  260,  261,  658,  658,  658,
      815,  484,  700,  650,  484,  351,  707,  707,  707,  484,
      701,  262,  262,  814,  351,  813,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  279,  279,
      706,  614,  812,  279,  279,  279,  279,  279,  279,  279,

      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  281,  697,   87,  282,  281,
      614,   87,  282,  709,  709,  709,  300,  661,   70,  301,
      283,  302,  742,  810,  283,  716,  717,  718,  284,  661,
      743,  303,  284,  285,  569,  570,  571,  285,  742,  304,
      669,  669,  669,  698,  305,  661,  743,  634,  635,  636,
      809,  396,  572,  300,  396,   70,  301,  808,  302,  286,
      636,  636,  636,  286,  288,  572,  289,  290,  303,  291,
      306,  744,  292,  293,  294,  745,  304,  441,  572,  295,
      441,  305,  630,  570,  631,  572,  807,  296,  297,  639,

      745,  632,  639,  796,  636,  636,  636,  639,  572,  795,
      633,  744,  350,  350,  350,  745,  649,  306,  794,  649,
      351,  572,  572,  793,  649,  350,  350,  350,  298,  288,
      745,  289,  290,  351,  291,  792,  791,  292,  293,  294,
      797,  677,  678,  633,  295,  547,  679,  614,  798,  680,
      681,  790,  296,  297,  682,  572,  659,  614,  683,  684,
      747,  747,  747,  709,  709,  709,  708,  797,  351,  716,
      717,  718,  718,  717,  718,  798,  445,  447,  451,  445,
      447,  451,  614,  298,  307,  308,  307,   70,  309,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,

      310,  307,  307,  307,  307,  307,  307,  307,  311,  307,
      312,  312,  307,  307,  307,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  307,  307,  313,
      407,  789,  788,  787,  407,  688,  635,  689,  408,  409,
      410,  786,  324,  411,  632,  324,  412,  413,  785,  335,
      784,  414,  335,  633,  783,  415,  416,  491,  782,  781,
      780,  462,  491,  491,  396,  740,  491,  396,  462,  771,
      689,  636,  689,  491,  491,  491,  498,  770,  769,  632,
      498,  498,  498,  768,  767,  498,  633,  498,  633,  778,

      778,  778,  498,  498,  498,  507,  766,  351,  765,  507,
      507,  507,  441,  547,  507,  441,  507,  764,  805,  805,
      805,  507,  507,  507,  510,  362,  351,  763,  510,  510,
      510,  633,  762,  510,  761,  510,  824,  824,  824,  760,
      510,  510,  511,  370,  351,  514,  759,  758,  757,  514,
      514,  514,  445,  756,  514,  445,  514,  755,  692,  693,
      694,  514,  514,  514,  525,  754,  753,  752,  525,  525,
      525,  447,  751,  525,  447,  462,  572,  694,  694,  694,
      525,  525,  525,  526,  527,  746,  528,  451,  529,  705,
      451,  530,  531,  703,  741,  572,  532,  839,  839,  839,

      533,  534,  545,  740,  326,  351,  545,  545,  545,  572,
      563,  545,  563,  545,  694,  694,  694,  734,  545,  545,
      545,  426,  737,  738,  739,  550,  733,  732,  572,  550,
      550,  550,  572,  731,  550,  730,  551,  850,  850,  850,
      572,  550,  550,  550,  556,  351,  729,  728,  556,  556,
      556,  324,  727,  556,  324,  556,  859,  859,  859,  726,
      556,  556,  556,  559,  351,  572,  725,  559,  559,  559,
      724,  723,  559,  572,  559,  335,  722,  721,  335,  559,
      559,  559,  640,  640,  641,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  324,

      324,  324,  640,  640,  640,  640,  640,  640,  324,  324,
      640,  640,  640,  324,  324,  324,  324,  324,  324,  324,
      324,  642,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  640,  640,  640,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  324,  324,  324,  699,  699,
      699,  699,  699,  699,  324,  324,  699,  699,  699,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  699,  699,  699,  735,  693,  736,  736,  694,  736,

      739,  739,  739,  632,  720,  719,  632,  739,  739,  739,
      804,  715,  633,  804,  714,  633,  713,  712,  572,  748,
      748,  748,  711,  749,  710,  572,  661,  351,  772,  738,
      773,  773,  739,  773,  774,  775,  776,  632,  656,  488,
      632,  776,  776,  776,  488,  633,  633,  584,  633,  633,
      705,  572,  572,  776,  776,  776,  704,  703,  572,  572,
      779,  779,  779,  702,  749,  799,  775,  800,  351,  575,
      750,  572,  696,  695,  632,  800,  776,  800,  563,  633,
      685,  676,  633,  633,  632,  572,  675,  801,  802,  803,
      674,  673,  572,  633,  803,  803,  803,  803,  803,  803,

      819,  802,  820,  672,  572,  572,  806,  806,  806,  632,
      749,  750,  572,  671,  351,  572,  633,  670,  633,  820,
      803,  820,  821,  822,  823,  668,  633,  614,  632,  823,
      823,  823,  823,  823,  823,  667,  666,  633,  572,  665,
      572,  664,  826,  826,  826,  572,  749,  572,  572,  663,
      572,  633,  825,  825,  825,  662,  749,  750,  661,  660,
      351,  602,  370,  834,  822,  835,  835,  823,  835,  488,
      633,  653,  632,  572,  652,  632,  836,  837,  838,  648,
      572,  633,  647,  572,  633,  646,  838,  838,  838,  838,
      838,  838,  645,  750,  572,  644,  643,  840,  840,  840,

      638,  749,  637,  750,  572,  351,  568,  572,  841,  841,
      841,  845,  837,  846,  633,  563,  563,  633,  625,  624,
      632,  846,  838,  846,  847,  848,  849,  572,  613,  633,
      632,  849,  849,  849,  849,  849,  849,  572,  623,  633,
      572,  622,  572,  851,  851,  851,  621,  749,  750,  572,
      620,  351,  572,  852,  852,  852,  854,  848,  855,  750,
      619,  618,  633,  617,  616,  632,  615,  614,  855,  849,
      855,  611,  633,  610,  633,  572,  609,  632,  856,  857,
      858,  608,  572,  607,  606,  572,  633,  858,  858,  858,
      858,  858,  858,  604,  750,  603,  572,  602,  860,  860,

      860,  566,  749,  519,  750,  572,  351,  633,  572,  861,
      861,  861,  862,  857,  863,  863,  858,  863,  601,  633,
      370,  632,  370,  597,  632,  856,  857,  858,  592,  572,
      633,  592,  488,  633,  858,  858,  858,  488,  572,  485,
      587,  572,  586,  572,  858,  858,  858,  585,  584,  750,
      583,  582,  572,  864,  864,  864,  866,  866,  866,  581,
      750,  351,  572,  633,  580,  579,  633,  865,  865,  865,
      578,  749,  862,  857,  863,  351,  572,  577,  863,  858,
      863,  632,  869,  869,  869,  572,  576,  632,  575,  574,
      633,  867,  867,  867,  573,  572,  633,  568,  566,  351,

      868,  868,  868,  461,  749,  460,  563,  750,  351,  870,
      870,  870,  871,  871,  871,  452,  749,  351,  750,  561,
      351,  460,  560,  633,  872,  872,  872,  442,  558,  633,
      873,  873,  873,  750,  557,  874,  874,  874,  351,  749,
      875,  875,  875,  351,  876,  876,  876,  878,  878,  878,
      555,  750,  351,  877,  877,  877,  460,  749,  879,  879,
      879,  351,  552,  750,  549,  548,  351,  546,  880,  880,
      880,  460,  749,  544,  543,  750,  351,  881,  881,  881,
      882,  882,  882,  884,  884,  884,  750,  542,  351,  541,
      540,  750,  883,  883,  883,  539,  749,  538,  750,  537,

      351,  885,  885,  885,  750,  536,  886,  886,  886,  351,
      749,  887,  887,  887,  351,  888,  888,  888,  535,  750,
      890,  890,  890,  351,  524,  889,  889,  889,  750,  749,
      891,  891,  891,  351,  750,  893,  893,  893,  351,  397,
      892,  892,  892,  750,  749,  894,  894,  894,  351,  519,
      895,  895,  895,  351,  749,  393,  518,  750,  351,  896,
      896,  896,  750,  517,  897,  897,  897,  899,  899,  899,
      385,  750,  351,  898,  898,  898,  750,  749,  902,  902,
      902,  351,  900,  900,  900,  384,  750,  903,  903,  903,
      351,  750,  901,  901,  901,  351,  749,  905,  905,  905,

      351,  750,  383,  904,  904,  904,  384,  749,  516,  374,
      750,  351,  906,  906,  906,  907,  907,  907,  750,  749,
      351,  370,  506,  351,  750,  908,  908,  908,  505,  750,
      909,  909,  909,  910,  910,  910,  353,  749,  351,  499,
      488,  351,  483,  750,  911,  911,  911,  480,  750,  912,
      912,  912,  478,  476,  750,  475,  474,  351,  470,  913,
      913,  913,  467,  749,  466,  461,  750,  351,  914,  914,
      914,  915,  915,  915,  460,  316,  750,  316,  316,  351,
      455,  916,  916,  916,  750,  749,  917,  917,  917,  351,
      918,  918,  918,  316,  316,  750,  316,  446,  351,  919,

      919,  919,  316,  749,  920,  920,  920,  351,  444,  316,
      750,  440,  921,  921,  921,  923,  923,  923,  436,  750,
      351,  922,  922,  922,  433,  749,  924,  924,  924,  351,
      421,  420,  750,  418,  351,  406,  403,  750,  925,  925,
      925,  316,  749,  926,  926,  926,  351,  929,  929,  929,
      750,  927,  927,  927,  316,  750,  928,  928,  928,  351,
      749,  930,  930,  930,  351,  316,  750,  393,  390,  351,
      386,  385,  750,  931,  931,  931,  384,  749,  932,  932,
      932,  351,  933,  933,  933,  935,  935,  935,  383,  750,
      351,  934,  934,  934,  750,  749,  370,  370,  750,  351,

      936,  936,  936,  938,  938,  938,  370,  750,  351,  937,
      937,  937,  370,  749,  939,  939,  939,  351,  359,  940,
      940,  940,  351,  749,  750,  316,  349,  351,  346,  750,
      941,  941,  941,  942,  942,  942,  750,  944,  944,  944,
      342,  351,  750,  943,  943,  943,  341,  749,  945,  945,
      945,  351,  338,  316,  750,  332,  351,  946,  946,  946,
      750,  749,  947,  947,  947,  351,  948,  948,  948,  326,
      750,  949,  949,  949,  351,  749,  950,  950,  950,  351,
      325,  750,  951,  951,  951,  952,  952,  952,  750,  749,
      351,  316,  316,  351,  750,  953,  953,  953,  954,  954,

      954,  955,  955,  955,  316,  749,  351, 1160,  750,  351,
      956,  956,  956,  750, 1160,  957,  957,  957,  959,  959,
      959, 1160,  750,  351,  958,  958,  958,  750,  749,  960,
      960,  960,  351,  962,  962,  962,  750,  351, 1160,  961,
      961,  961, 1160,  749, 1160, 1160,  750,  351,  963,  963,
      963, 1160,  750,  965,  965,  965,  351, 1160,  964,  964,
      964,  750,  749,  966,  966,  966,  351, 1160, 1160,  750,
     1160,  351,  967,  967,  967,  750,  749,  968,  968,  968,
      351,  969,  969,  969,  750,  971,  971,  971, 1160,  351,
      750,  970,  970,  970, 1160,  749,  974,  974,  974,  351,

      972,  972,  972, 1160,  750,  975,  975,  975,  351,  750,
      973,  973,  973,  351,  749,  977,  977,  977,  351,  980,
      980,  980, 1160,  750, 1160,  976,  976,  976,  750,  749,
      978,  978,  978,  351, 1160, 1160,  750, 1160,  351,  983,
      983,  983,  750, 1160,  979,  979,  979,  750,  749,  981,
      981,  981,  351, 1160,  982,  982,  982,  351,  749, 1160,
     1160,  750,  351,  984,  984,  984,  750,  986,  986,  986,
      750,  351, 1160,  985,  985,  985,  750,  749,  987,  987,
      987,  351, 1160,  988,  988,  988,  351,  749, 1160, 1160,
      750,  351,  989,  989,  989,  750,  990,  990,  990,  991,

      991,  991, 1160,  749,  351,  750, 1160,  351,  992,  992,
      992,  993,  993,  993,  995,  995,  995, 1160,  750,  351,
     1160,  994,  994,  994,  750,  749,  998,  998,  998,  351,
      996,  996,  996, 1160,  750, 1001, 1001, 1001,  351, 1160,
      997,  997,  997,  750,  749,  999,  999,  999,  351, 1160,
      750, 1160, 1160,  351, 1000, 1000, 1000, 1160,  749,  750,
     1160, 1160,  351, 1160, 1160,  750, 1002, 1002, 1002, 1004,
     1004, 1004,  750, 1160,  351, 1160, 1160,  750, 1160, 1003,
     1003, 1003, 1160,  749, 1160, 1160,  750,  351, 1005, 1005,
     1005,  750, 1160, 1006, 1006, 1006,  351,  749, 1007, 1007,

     1007,  351, 1008, 1008, 1008,  750, 1160, 1009, 1009, 1009,
      351,  749, 1010, 1010, 1010,  351, 1011, 1011, 1011, 1160,
      750, 1012, 1012, 1012,  351,  749, 1013, 1013, 1013,  351,
      750, 1014, 1014, 1014, 1015, 1015, 1015, 1160,  749,  351,
     1160, 1160,  351, 1160,  750, 1016, 1016, 1016, 1160,  750,
     1160, 1017, 1017, 1017, 1019, 1019, 1019, 1160,  750,  351,
     1018, 1018, 1018,  750,  749, 1020, 1020, 1020,  351, 1022,
     1022, 1022,  750,  351, 1021, 1021, 1021,  750,  749, 1023,
     1023, 1023,  351, 1160, 1160,  750, 1160,  351, 1160, 1024,
     1024, 1024, 1160,  749, 1160, 1160,  750,  351, 1025, 1025,

     1025, 1026, 1026, 1026, 1160,  750, 1027, 1027, 1027,  351,
      749,  750, 1160, 1160,  351, 1028, 1028, 1028, 1160, 1160,
      750, 1029, 1029, 1029, 1160,  750, 1030, 1030, 1030,  351,
      749, 1031, 1031, 1031,  351, 1032, 1032, 1032, 1160, 1160,
      750, 1160, 1160,  351, 1033, 1033, 1033, 1160,  749,  750,
     1160, 1160,  351, 1034, 1034, 1034, 1160,  750, 1160, 1035,
     1035, 1035, 1037, 1037, 1037, 1160,  750,  351, 1036, 1036,
     1036, 1160,  749, 1038, 1038, 1038,  351,  750, 1040, 1040,
     1040,  351,  750, 1039, 1039, 1039, 1160,  749, 1041, 1041,
     1041,  351, 1043, 1043, 1043,  750,  351, 1042, 1042, 1042,

     1160,  749, 1160, 1160,  750,  351, 1044, 1044, 1044, 1046,
     1046, 1046, 1160,  750,  351, 1160, 1045, 1045, 1045,  750,
      749, 1049, 1049, 1049,  351, 1047, 1047, 1047, 1160,  750,
     1052, 1052, 1052,  351,  750, 1160, 1048, 1048, 1048, 1160,
      749, 1160, 1160,  750,  351, 1050, 1050, 1050,  750, 1160,
     1051, 1051, 1051,  351,  749, 1053, 1053, 1053,  351, 1160,
      750, 1160, 1160,  351, 1055, 1055, 1055,  750, 1160, 1054,
     1054, 1054,  750,  749, 1056, 1056, 1056,  351, 1058, 1058,
     1058,  750,  351, 1160, 1057, 1057, 1057,  750,  749, 1059,
     1059, 1059,  351, 1160, 1060, 1060, 1060,  351,  749, 1160,

     1160,  750,  351, 1061, 1061, 1061, 1062, 1062, 1062, 1063,
     1063, 1063, 1160,  749,  351,  750, 1160,  351, 1160, 1160,
      750, 1064, 1064, 1064, 1065, 1065, 1065, 1160, 1160,  750,
     1160, 1160,  351, 1160, 1160,  750, 1066, 1066, 1066, 1160,
      749, 1067, 1067, 1067,  351,  750, 1160, 1068, 1068, 1068,
     1160,  749, 1160, 1160,  750,  351, 1069, 1069, 1069, 1160,
      750, 1070, 1070, 1070, 1160,  749, 1071, 1071, 1071,  351,
     1160, 1160,  750, 1072, 1072, 1072, 1160,  749, 1073, 1073,
     1073,  351, 1074, 1074, 1074, 1160,  749,  750, 1160, 1160,
      351, 1160,  750, 1075, 1075, 1075, 1160, 1160,  750, 1160,

     1076, 1076, 1076, 1160,  749, 1160, 1160,  750,  351, 1077,
     1077, 1077,  750, 1160, 1078, 1078, 1078,  750,  749, 1079,
     1079, 1079,  351, 1160,  750, 1080, 1080, 1080, 1160,  750,
     1081, 1081, 1081,  750, 1082, 1082, 1082, 1083, 1083, 1083,
     1084, 1084, 1084, 1160,  750, 1085, 1085, 1085, 1086, 1086,
     1086,  750, 1087, 1087, 1087, 1088, 1088, 1088, 1160, 1160,
      750, 1089, 1089, 1089, 1160,  750, 1090, 1090, 1090, 1160,
      750, 1091, 1091, 1091, 1160, 1160,  750, 1092, 1092, 1092,
     1160,  750, 1093, 1093, 1093,  750, 1160, 1160,  750, 1160,
     1160,  750, 1094, 1094, 1094, 1160,  750, 1160, 1160,  750,

     1095, 1095, 1095,  750, 1160, 1160,  750, 1096, 1096, 1096,
     1160, 1160,  750, 1097, 1097, 1097, 1160,  750, 1098, 1098,
     1098, 1160,  750, 1099, 1099, 1099, 1160, 1160,  750, 1100,
     1100, 1100, 1160,  750, 1101, 1101, 1101, 1102, 1102, 1102,
     1103, 1103, 1103,  750, 1104, 1104, 1104, 1105, 1105, 1105,
     1160,  750, 1106, 1106, 1106, 1107, 1107, 1107,  750, 1108,
     1108, 1108, 1160, 1160,  750, 1109, 1109, 1109, 1160,  750,
     1110, 1110, 1110, 1160,  750, 1111, 1111, 1111, 1160, 1160,
      750, 1112, 1112, 1112, 1160,  750, 1160, 1160,  750, 1160,
     1160,  750, 1113, 1113, 1113,  750, 1160, 1160,  750, 1114,

     1114, 1114, 1160,  750, 1160, 1160,  750, 1115, 1115, 1115,
      750, 1116, 1116, 1116, 1160, 1160,  750, 1117, 1117, 1117,
     1160,  750, 1118, 1118, 1118, 1160,  750, 1119, 1119, 1119,
     1160, 1160,  750, 1120, 1120, 1120, 1121, 1121, 1121, 1122,
     1122, 1122, 1160,  750, 1123, 1123, 1123, 1124, 1124, 1124,
      750, 1125, 1125, 1125, 1126, 1126, 1126, 1160,  750, 1127,
     1127, 1127,  750, 1128, 1128, 1128, 1160, 1160,  750, 1129,
     1129, 1129, 1160,  750, 1130, 1130, 1130, 1160,  750, 1131,
     1131, 1131, 1160, 1160,  750, 1160, 1160,  750, 1160, 1160,
      750, 1132, 1132, 1132, 1160,  750, 1160, 1160,  750, 1133,

     1133, 1133,  750, 1160, 1160,  750, 1134, 1134, 1134, 1160,
      750, 1135, 1135, 1135,  750, 1136, 1136, 1136, 1160, 1160,
      750, 1137, 1137, 1137, 1160,  750, 1138, 1138, 1138, 1160,
      750, 1139, 1139, 1139, 1140, 1140, 1140, 1141, 1141, 1141,
     1160, 1160,  750, 1142, 1142, 1142, 1143, 1143, 1143, 1160,
      750, 1144, 1144, 1144, 1145, 1145, 1145,  750, 1146, 1146,
     1146, 1160,  750, 1147, 1147, 1147,  750, 1148, 1148, 1148,
     1160, 1160,  750, 1149, 1149, 1149, 1160,  750, 1150, 1150,
     1150, 1160,  750, 1160, 1160,  750, 1160, 1160,  750, 1151,
     1151, 1151, 1160, 1160,  750, 1160, 1160,  750, 1152, 1152,

     1152, 1160,  750, 1160, 1160,  750, 1153, 1153, 1153,  750,
     1154, 1154, 1154, 1160,  750, 1155, 1155, 1155,  750, 1156,
     1156, 1156, 1160, 1160,  750, 1157, 1157, 1157, 1160,  750,
     1158, 1158, 1158, 1159, 1159, 1159, 1083, 1083, 1083, 1160,
      750, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,  750,
     1160, 1160, 1160, 1160, 1160, 1160, 1160,  750, 1160, 1160,
     1160,  750, 1160, 1160, 1160, 1160,  750, 1160, 1160, 1160,
      750, 1160, 1160, 1160, 1160, 1160,  750, 1160, 1160, 1160,
     1160,  750, 1160, 1160,  750, 1160, 1160,  750,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,

       68,   68,   68,   68,   68,   68,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  153,  153,  153,  153,

      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,

      228,  228,  228,  228,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  299,  299,  299,  299,  299,  299,

      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      339,  339,  339, 1160,  339,  339, 1160, 1160,  339,  339,
      339,  339, 1160,  339,  339,  339,  339,  339,  340,  340,
      340, 1160,  340,  340,  340, 1160,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  343,  343,  343, 1160,
      343,  343, 1160,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  347,  347,  347, 1160,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,

      347,  348,  348,  348, 1160,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  352,
      352,  352, 1160, 1160, 1160,  352, 1160, 1160, 1160, 1160,
      352, 1160, 1160,  352,  356,  356,  356, 1160, 1160,  356,
     1160,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  360,  360,  360, 1160,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  361,
      361,  361, 1160,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  368, 1160, 1160,
     1160, 1160, 1160,  368, 1160, 1160, 1160, 1160,  368, 1160,

     1160,  368,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  379,
      379, 1160, 1160, 1160, 1160,  379, 1160, 1160, 1160, 1160,
      379, 1160, 1160,  379,  379,  389, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160,  389, 1160,  389, 1160, 1160,  389,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  402, 1160,
      402, 1160,  402,  402,  402,  402,  402, 1160,  402,  402,
     1160,  402,  402, 1160,  402,  417,  417,  417, 1160,  417,
      417,  417,  417,  417, 1160,  417,  417,  417,  417,  417,

      417, 1160,  417,  425,  425,  425, 1160,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425, 1160,  425,
      426,  426,  426, 1160,  426,  426,  426,  426,  426,  426,
      426,  426, 1160,  426,  426, 1160,  426,  427, 1160,  427,
     1160,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427, 1160,  427,  432, 1160,  432, 1160,  432,  432,
      432,  432,  432, 1160,  432,  432,  432,  432,  432,  432,
      432,  432,  437, 1160,  437, 1160,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      450,  450,  450, 1160,  450,  450,  450,  450,  450,  450,

      450,  450,  450,  450,  450,  450,  450,  450,  454,  454,
      454, 1160,  454,  454,  454, 1160,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  458,  458,  458, 1160,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  459,  459, 1160,  459, 1160, 1160,
      459,  462, 1160,  462,  462, 1160,  462, 1160,  462, 1160,
      462,  463,  463,  463, 1160,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  477,
      477,  477, 1160,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  479,  479,  479,

     1160,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  339,  339,  339, 1160,  339,
      339, 1160, 1160,  339,  339,  339,  339, 1160,  339,  339,
      339,  339,  339,  487,  487,  487, 1160,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      489,  489,  489, 1160,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  343,  343,
      343, 1160,  343,  343, 1160,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  492,  492,  492, 1160,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,

      492,  492,  492,  495,  495,  495, 1160,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  500,  500,  500, 1160,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  352,
      352,  352, 1160, 1160, 1160,  352, 1160, 1160, 1160, 1160,
      352, 1160, 1160,  352,  356,  356,  356, 1160, 1160,  356,
     1160,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  361,  361,  361, 1160,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  368,
     1160, 1160, 1160, 1160, 1160,  368, 1160, 1160, 1160, 1160,

      368, 1160, 1160,  368,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  379,  379, 1160, 1160, 1160, 1160,  379, 1160, 1160,
     1160, 1160,  379, 1160, 1160,  379,  379,  389, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160,  389, 1160,  389, 1160,
     1160,  389,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      402, 1160,  402, 1160,  402,  402,  402,  402,  402, 1160,
      402,  402, 1160,  402,  402, 1160,  402,  417,  417,  417,
     1160,  417,  417,  417,  417,  417, 1160,  417,  417,  417,

      417,  417,  417, 1160,  417,  425,  425,  425, 1160,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
     1160,  425,  426,  426,  426, 1160,  426,  426,  426,  426,
      426,  426,  426,  426, 1160,  426,  426, 1160,  426,  427,
     1160,  427, 1160,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427, 1160,  427,  432, 1160,  432, 1160,
      432,  432,  432,  432,  432, 1160,  432,  432,  432,  432,
      432,  432,  432,  432,  437, 1160,  437, 1160,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  562,  562,  562, 1160,  562,  562,  562,  562,

      562,  562,  562,  562,  562,  562,  562,  562,  562,  564,
      564,  564, 1160,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  459,  459, 1160,
      459, 1160, 1160,  459,  463,  463,  463, 1160,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  567,  567,  567, 1160,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      477,  477,  477, 1160,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  479,  479,
      479, 1160,  479,  479,  479,  479,  479,  479,  479,  479,

      479,  479,  479,  479,  479,  479,  588,  588,  588, 1160,
      588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      588,  588,  588,  339,  339,  339, 1160,  339,  339, 1160,
     1160,  339,  339,  339,  339, 1160,  339,  339,  339,  339,
      339,  492,  492,  492, 1160,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  493,
      493,  493, 1160,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  495,  495,  495,
     1160,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  496,  496,  496, 1160,  496,

      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  343,  343,  343, 1160,  343,  343, 1160,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      352,  352,  352, 1160, 1160, 1160,  352, 1160, 1160, 1160,
     1160,  352, 1160, 1160,  352,  356,  356,  356, 1160, 1160,
      356, 1160,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  361,  361,  361, 1160,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  626,  626,  626,

     1160,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  654,  654,  654, 1160,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  686,
      686,  686, 1160,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  777, 1160, 1160, 1160,
      777, 1160, 1160, 1160, 1160, 1160, 1160, 1160,  777, 1160,
      777,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811, 1160,  811,  811, 1160,  811,   67,

     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160
    } ;

static yyconst flex_int16_t yy_chk[5557] =
    {   0,
        0,    1,  162,    1,    1,    2,  146,    2,    2,    0,
        3,  162,    3,    3,   72,   81,    1,   89,   72,   81,
        2,   89,  102,  146,    1,    3,  102,    9,    2,    9,
        9,  152,    9,    3,    0,    9,  134,  134,   10,  152,
       10,   10,    9,   10,  114,   94,   10,   94,  114,  105,
        9,  105,    0,   10,   21,    1,   21,   21, 1083,    2,
       29,   10,   29,   29,    3,    4,    4,    4,    4,   21,
      121,    4,  131,   77,  121,   29,  131,   21,   77,   83,
        4,    9,   21,   29,  147,  142, 1065,   83,    4,  142,
        4,    4,   10,   95,   83,   83,   83,   77,   77,   95,

       95,  147,  157,   83,   83,  133,  133,  133,   21,  159,
      159,  157,  171,  133,   29,  157,  226,  171,  226,    4,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,   11,  148,   11,   11,   12,   11,   12,   12,
      150,   12,  181,  181,  151,  158,  149,   11,  192,  167,
      148,   12,  149,  192,  853,   11,  149,  150,  150,   12,
       11,  151,  167,  149,   12,  177,  158,  187,  196,  177,
      204,  187,  196,  213,  204,  218,  844,  213,  224,  218,
      219,  219,  224,  233,  239,  246,   11,  233,  239,  246,
       12,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   15,  371,   15,
       15,   16,   15,   16,   16,  256,   16,  371,   17,  256,
       17,   17,   15,   17,  161,  161,   16,  220,  223,  843,
       15,  361,  161,   17,   16,   15,  381,  225,  227,   16,
       17,   17,  220,  223,   18,  381,   18,   18,  361,   18,
      372,  161,  225,  227,  249,  249,  285,  285,  267,   18,

      225,   15,  267,  372,  275,   16,   18,   18,  275,  283,
      295,  303,   17,  283,  295,  303,  310,  321,  322,  322,
      310,  327,  336,  341,  341,  321,  349,  391,  366,  327,
      336,  842,  391,  404,  349,  349,  366,  404,   18,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   22,  320,   22,   22,   30,

       30,   30,   30,  318,  320,   30,  387,  368,  318,  323,
       22,  320,  320,  320,   30,  368,  833,  323,   22,  387,
      320,  320,   30,   22,  323,  323,  323,  318,  318,  344,
      364,  345,  389,  323,  323,  344,  350,  350,  350,  394,
      364,  345,  832,  400,  350,  389,  394,  364,  400,   22,
       23,   23,  344,   30,  345,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   31,
      535,   31,   31,   32,  425,   32,   32,  433,   33,  535,

       33,   33,  433,   34,   31,   34,   34,  329,   32,  425,
      329,  831,   31,   33,  395,  329,   32,   41,   34,   41,
       41,   33,  352,  352,  352,  395,   34,  135,  135,  135,
      352,   42,   41,   42,   42,  135,  363,  455,  455,  329,
       41,   41,  363,   31,  830,   41,   42,   32,  329,  376,
      376,  492,   33,  363,   42,   42,  829,   34,   35,   42,
       35,   35,  379,  379,   43,  376,   43,   43,  550,   35,
      379,   41,  495,   35,  492,   43,  135,  463,  463,   43,
      512,   35,   35,  550,  509,   42,   35,   43,   44,  379,
       44,   44,  424,  512,   45,  495,   45,   45,  585,   44,

      497,  509,  338,   44,   46,  338,   46,   46,  510,   45,
      338,   44,   35,   36,  424,   36,   36,   45,   43,   46,
      828,  490,  494,  497,   36,  510,  827,   46,   36,  490,
      490,  502,  494,  516,  338,  585,   36,   36,  424,  502,
      502,   36,   44,  338,  508,  494,  632,  632,   45,  503,
      503,  503,  516, 1180,  508,  553, 1180,  503,   46,  818,
      553,  508,  515,  515,  515,  690,  690,   36,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   39,  817,   39,   39,  591,  575,
      816,   53,  575,   53,   53,   39,   53,  575,   54,   39,
       54,   54,   55,   54,   55,   55,   53,   39,   39,  641,
       55,  591,   39,   54,   53, 1181,  528,   55, 1181,   53,
       56,   54,   56,   56,  815,   55,   54,  598,   56,  629,
       55,  814,  355,  355,  355,   56,  528,  629,   39,   40,
      355,   40,   40,   56,  598,   53,  641,  633,   56,  813,
       40,  812,   54,  810,   40,  633,   55,  504,  504,  504,

      565,  528,   40,   40,  809,  504,  808,   40,  565,  565,
      796,  644,  584,  590,   56,  584,  594,  795,  355,  644,
      584,  590,  590,  628,  594,  594,  614,  614,  614,  794,
      504,  628,  628,   40,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,

       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   51,  595,  595,  595,
      793,  653,  700,  650,  653,  595,  658,  658,  658,  653,
      700,   51,   51,  792,  658,  791,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   57,   57,
      650,  790,  789,   57,   57,   57,   57,   57,   57,   57,

       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   59,  697,   59,   59,   60,
      788,   60,   60,  661,  661,  661,   63,  786,   63,   63,
       59,   63,  702,  785,   60,  668,  668,  668,   59,  784,
      702,   63,   60,   59,  465,  465,  465,   60,  742,   63,
      669,  669,  669,  697,   63,  783,  742,  569,  569,  569,
      782, 1195,  465,   64, 1195,   64,   64,  781,   64,   59,
      570,  570,  570,   60,   61,  569,   61,   61,   64,   61,
       63,  703,   61,   61,   61,  703,   64, 1204,  570,   61,
     1204,   64,  568,  568,  568,  465,  780,   61,   61,  741,

      703,  568,  741,  770,  571,  571,  571,  741,  569,  769,
      568,  744,  596,  596,  596,  744,  746,   64,  768,  746,
      596,  570,  571,  767,  746,  659,  659,  659,   61,   62,
      744,   62,   62,  659,   62,  766,  765,   62,   62,   62,
      771,  622,  622,  568,   62,  764,  622,  763,  771,  622,
      622,  762,   62,   62,  622,  571,  596,  761,  622,  622,
      707,  707,  707,  709,  709,  709,  659,  797,  707,  716,
      716,  716,  718,  718,  718,  797, 1205, 1206, 1208, 1205,
     1206, 1208,  760,   62,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
      206,  759,  758,  757,  206,  630,  630,  630,  206,  206,
      206,  756, 1214,  206,  630, 1214,  206,  206,  755, 1217,
      754,  206, 1217,  630,  753,  206,  206,  342,  752,  751,
      749,  342,  342,  342, 1232,  740,  342, 1232,  342,  734,
      631,  631,  631,  342,  342,  342,  346,  733,  732,  631,
      346,  346,  346,  731,  730,  346,  630,  346,  631,  747,

      747,  747,  346,  346,  346,  359,  729,  747,  728,  359,
      359,  359, 1241,  727,  359, 1241,  359,  726,  778,  778,
      778,  359,  359,  359,  365,  365,  778,  725,  365,  365,
      365,  631,  724,  365,  723,  365,  805,  805,  805,  722,
      365,  365,  365,  373,  805,  373,  721,  720,  719,  373,
      373,  373, 1242,  715,  373, 1242,  373,  714,  634,  634,
      634,  373,  373,  373,  406,  713,  712,  711,  406,  406,
      406, 1243,  710,  406, 1243,  406,  634,  635,  635,  635,
      406,  406,  406,  407,  407,  706,  407, 1244,  407,  705,
     1244,  407,  407,  704,  698,  635,  407,  824,  824,  824,

      407,  407,  420,  696,  695,  824,  420,  420,  420,  634,
      687,  420,  686,  420,  636,  636,  636,  685,  420,  420,
      420,  430,  692,  692,  692,  430,  684,  683,  635,  430,
      430,  430,  636,  682,  430,  681,  430,  839,  839,  839,
      692,  430,  430,  430,  436,  839,  680,  679,  436,  436,
      436, 1250,  678,  436, 1250,  436,  850,  850,  850,  677,
      436,  436,  436,  440,  850,  636,  676,  440,  440,  440,
      675,  674,  440,  692,  440, 1253,  673,  672, 1253,  440,
      440,  440,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,

      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  688,  688,  688,  689,  689,  689,

      693,  693,  693,  688,  671,  670,  689,  694,  694,  694,
     1270,  667,  688, 1270,  666,  689,  665,  664,  693,  708,
      708,  708,  663,  708,  662,  694,  660,  708,  735,  735,
      735,  736,  736,  736,  737,  737,  737,  735,  657,  655,
      736,  738,  738,  738,  654,  688,  735,  651,  689,  736,
      648,  693,  737,  739,  739,  739,  647,  646,  694,  738,
      748,  748,  748,  645,  748,  772,  772,  772,  748,  642,
      708,  739,  638,  637,  772,  773,  773,  773,  626,  735,
      625,  621,  736,  772,  773,  737,  620,  774,  774,  774,
      619,  618,  738,  773,  775,  775,  775,  776,  776,  776,

      799,  799,  799,  617,  739,  774,  779,  779,  779,  799,
      779,  748,  775,  616,  779,  776,  772,  615,  799,  800,
      800,  800,  801,  801,  801,  613,  773,  612,  800,  802,
      802,  802,  803,  803,  803,  611,  610,  800,  774,  609,
      801,  608,  807,  807,  807,  775,  807,  802,  776,  607,
      803,  799,  806,  806,  806,  606,  806,  779,  604,  603,
      806,  602,  599,  819,  819,  819,  820,  820,  820,  588,
      800,  587,  819,  801,  586,  820,  821,  821,  821,  582,
      802,  819,  581,  803,  820,  580,  822,  822,  822,  823,
      823,  823,  579,  807,  821,  578,  577,  825,  825,  825,

      574,  825,  573,  806,  822,  825,  567,  823,  826,  826,
      826,  834,  834,  834,  819,  564,  562,  820,  560,  557,
      834,  835,  835,  835,  836,  836,  836,  821,  552,  834,
      835,  837,  837,  837,  838,  838,  838,  822,  548,  835,
      823,  546,  836,  840,  840,  840,  543,  840,  825,  837,
      542,  840,  838,  841,  841,  841,  845,  845,  845,  826,
      541,  540,  834,  539,  538,  845,  537,  536,  846,  846,
      846,  534,  835,  533,  845,  836,  532,  846,  847,  847,
      847,  531,  837,  530,  529,  838,  846,  848,  848,  848,
      849,  849,  849,  527,  840,  526,  847,  524,  851,  851,

      851,  521,  851,  519,  841,  848,  851,  845,  849,  852,
      852,  852,  854,  854,  854,  855,  855,  855,  518,  846,
      514,  854,  513,  505,  855,  856,  856,  856,  501,  847,
      854,  500,  489,  855,  857,  857,  857,  487,  848,  486,
      485,  849,  483,  856,  858,  858,  858,  482,  481,  851,
      478,  476,  857,  859,  859,  859,  861,  861,  861,  475,
      852,  859,  858,  854,  474,  473,  855,  860,  860,  860,
      472,  860,  862,  862,  862,  860,  856,  470,  863,  863,
      863,  862,  866,  866,  866,  857,  469,  863,  468,  467,
      862,  864,  864,  864,  466,  858,  863,  464,  460,  864,

      865,  865,  865,  457,  865,  456,  454,  861,  865,  867,
      867,  867,  868,  868,  868,  453,  868,  867,  860,  449,
      868,  448,  444,  862,  869,  869,  869,  443,  439,  863,
      870,  870,  870,  866,  438,  871,  871,  871,  870,  871,
      872,  872,  872,  871,  873,  873,  873,  875,  875,  875,
      435,  865,  873,  874,  874,  874,  434,  874,  876,  876,
      876,  874,  431,  868,  429,  428,  876,  423,  877,  877,
      877,  422,  877,  419,  416,  869,  877,  878,  878,  878,
      879,  879,  879,  881,  881,  881,  871,  415,  879,  414,
      413,  872,  880,  880,  880,  412,  880,  411,  875,  410,

      880,  882,  882,  882,  874,  409,  883,  883,  883,  882,
      883,  884,  884,  884,  883,  885,  885,  885,  408,  877,
      887,  887,  887,  885,  405,  886,  886,  886,  878,  886,
      888,  888,  888,  886,  881,  890,  890,  890,  888,  398,
      889,  889,  889,  880,  889,  891,  891,  891,  889,  393,
      892,  892,  892,  891,  892,  392,  388,  883,  892,  893,
      893,  893,  884,  386,  894,  894,  894,  896,  896,  896,
      385,  887,  894,  895,  895,  895,  886,  895,  899,  899,
      899,  895,  897,  897,  897,  384,  890,  900,  900,  900,
      897,  889,  898,  898,  898,  900,  898,  902,  902,  902,

      898,  892,  383,  901,  901,  901,  382,  901,  380,  375,
      893,  901,  903,  903,  903,  904,  904,  904,  896,  904,
      903,  369,  358,  904,  895,  905,  905,  905,  357,  899,
      906,  906,  906,  907,  907,  907,  354,  907,  906,  348,
      340,  907,  337,  898,  908,  908,  908,  334,  902,  909,
      909,  909,  333,  332,  901,  331,  330,  909,  328,  910,
      910,  910,  326,  910,  325,  315,  904,  910,  911,  911,
      911,  912,  912,  912,  314,  311,  905,  304,  296,  912,
      292,  913,  913,  913,  907,  913,  914,  914,  914,  913,
      915,  915,  915,  284,  276,  908,  268,  259,  915,  916,

      916,  916,  257,  916,  917,  917,  917,  916,  250,  247,
      910,  240,  918,  918,  918,  920,  920,  920,  234,  911,
      918,  919,  919,  919,  232,  919,  921,  921,  921,  919,
      217,  214,  913,  212,  921,  205,  203,  914,  922,  922,
      922,  197,  922,  923,  923,  923,  922,  926,  926,  926,
      916,  924,  924,  924,  188,  917,  925,  925,  925,  924,
      925,  927,  927,  927,  925,  178,  920,  175,  168,  927,
      166,  165,  919,  928,  928,  928,  164,  928,  929,  929,
      929,  928,  930,  930,  930,  932,  932,  932,  163,  922,
      930,  931,  931,  931,  923,  931,  160,  156,  926,  931,

      933,  933,  933,  935,  935,  935,  154,  925,  933,  934,
      934,  934,  153,  934,  936,  936,  936,  934,  143,  937,
      937,  937,  936,  937,  928,  132,  130,  937,  122,  929,
      938,  938,  938,  939,  939,  939,  932,  941,  941,  941,
      115,  939,  931,  940,  940,  940,  113,  940,  942,  942,
      942,  940,  106,  103,  935,   96,  942,  943,  943,  943,
      934,  943,  944,  944,  944,  943,  945,  945,  945,   93,
      937,  946,  946,  946,  945,  946,  947,  947,  947,  946,
       92,  938,  948,  948,  948,  949,  949,  949,  941,  949,
      948,   90,   82,  949,  940,  950,  950,  950,  951,  951,

      951,  952,  952,  952,   73,  952,  951,   67,  943,  952,
      953,  953,  953,  944,    0,  954,  954,  954,  956,  956,
      956,    0,  946,  954,  955,  955,  955,  947,  955,  957,
      957,  957,  955,  959,  959,  959,  949,  957,    0,  958,
      958,  958,    0,  958,    0,    0,  950,  958,  960,  960,
      960,    0,  952,  962,  962,  962,  960,    0,  961,  961,
      961,  953,  961,  963,  963,  963,  961,    0,    0,  956,
        0,  963,  964,  964,  964,  955,  964,  965,  965,  965,
      964,  966,  966,  966,  959,  968,  968,  968,    0,  966,
      958,  967,  967,  967,    0,  967,  971,  971,  971,  967,

      969,  969,  969,    0,  962,  972,  972,  972,  969,  961,
      970,  970,  970,  972,  970,  974,  974,  974,  970,  977,
      977,  977,    0,  964,    0,  973,  973,  973,  965,  973,
      975,  975,  975,  973,    0,    0,  968,    0,  975,  980,
      980,  980,  967,    0,  976,  976,  976,  971,  976,  978,
      978,  978,  976,    0,  979,  979,  979,  978,  979,    0,
        0,  970,  979,  981,  981,  981,  974,  983,  983,  983,
      977,  981,    0,  982,  982,  982,  973,  982,  984,  984,
      984,  982,    0,  985,  985,  985,  984,  985,    0,    0,
      980,  985,  986,  986,  986,  976,  987,  987,  987,  988,

      988,  988,    0,  988,  987,  979,    0,  988,  989,  989,
      989,  990,  990,  990,  992,  992,  992,    0,  983,  990,
        0,  991,  991,  991,  982,  991,  995,  995,  995,  991,
      993,  993,  993,    0,  985,  998,  998,  998,  993,    0,
      994,  994,  994,  986,  994,  996,  996,  996,  994,    0,
      988,    0,    0,  996,  997,  997,  997,    0,  997,  989,
        0,    0,  997,    0,    0,  992,  999,  999,  999, 1001,
     1001, 1001,  991,    0,  999,    0,    0,  995,    0, 1000,
     1000, 1000,    0, 1000,    0,    0,  998, 1000, 1002, 1002,
     1002,  994,    0, 1003, 1003, 1003, 1002, 1003, 1004, 1004,

     1004, 1003, 1005, 1005, 1005,  997,    0, 1006, 1006, 1006,
     1005, 1006, 1007, 1007, 1007, 1006, 1008, 1008, 1008,    0,
     1001, 1009, 1009, 1009, 1008, 1009, 1010, 1010, 1010, 1009,
     1000, 1011, 1011, 1011, 1012, 1012, 1012,    0, 1012, 1011,
        0,    0, 1012,    0, 1003, 1013, 1013, 1013,    0, 1004,
        0, 1014, 1014, 1014, 1016, 1016, 1016,    0, 1006, 1014,
     1015, 1015, 1015, 1007, 1015, 1017, 1017, 1017, 1015, 1019,
     1019, 1019, 1009, 1017, 1018, 1018, 1018, 1010, 1018, 1020,
     1020, 1020, 1018,    0,    0, 1012,    0, 1020,    0, 1021,
     1021, 1021,    0, 1021,    0,    0, 1013, 1021, 1022, 1022,

     1022, 1023, 1023, 1023,    0, 1016, 1024, 1024, 1024, 1023,
     1024, 1015,    0,    0, 1024, 1025, 1025, 1025,    0,    0,
     1019, 1026, 1026, 1026,    0, 1018, 1027, 1027, 1027, 1026,
     1027, 1028, 1028, 1028, 1027, 1029, 1029, 1029,    0,    0,
     1021,    0,    0, 1029, 1030, 1030, 1030,    0, 1030, 1022,
        0,    0, 1030, 1031, 1031, 1031,    0, 1024,    0, 1032,
     1032, 1032, 1034, 1034, 1034,    0, 1025, 1032, 1033, 1033,
     1033,    0, 1033, 1035, 1035, 1035, 1033, 1027, 1037, 1037,
     1037, 1035, 1028, 1036, 1036, 1036,    0, 1036, 1038, 1038,
     1038, 1036, 1040, 1040, 1040, 1030, 1038, 1039, 1039, 1039,

        0, 1039,    0,    0, 1031, 1039, 1041, 1041, 1041, 1043,
     1043, 1043,    0, 1034, 1041,    0, 1042, 1042, 1042, 1033,
     1042, 1046, 1046, 1046, 1042, 1044, 1044, 1044,    0, 1037,
     1049, 1049, 1049, 1044, 1036,    0, 1045, 1045, 1045,    0,
     1045,    0,    0, 1040, 1045, 1047, 1047, 1047, 1039,    0,
     1048, 1048, 1048, 1047, 1048, 1050, 1050, 1050, 1048,    0,
     1043,    0,    0, 1050, 1052, 1052, 1052, 1042,    0, 1051,
     1051, 1051, 1046, 1051, 1053, 1053, 1053, 1051, 1055, 1055,
     1055, 1049, 1053,    0, 1054, 1054, 1054, 1045, 1054, 1056,
     1056, 1056, 1054,    0, 1057, 1057, 1057, 1056, 1057,    0,

        0, 1048, 1057, 1058, 1058, 1058, 1059, 1059, 1059, 1060,
     1060, 1060,    0, 1060, 1059, 1052,    0, 1060,    0,    0,
     1051, 1061, 1061, 1061, 1062, 1062, 1062,    0,    0, 1055,
        0,    0, 1062,    0,    0, 1054, 1063, 1063, 1063,    0,
     1063, 1064, 1064, 1064, 1063, 1057,    0, 1066, 1066, 1066,
        0, 1066,    0,    0, 1058, 1066, 1067, 1067, 1067,    0,
     1060, 1068, 1068, 1068,    0, 1068, 1069, 1069, 1069, 1068,
        0,    0, 1061, 1070, 1070, 1070,    0, 1070, 1071, 1071,
     1071, 1070, 1072, 1072, 1072,    0, 1072, 1063,    0,    0,
     1072,    0, 1064, 1073, 1073, 1073,    0,    0, 1066,    0,

     1074, 1074, 1074,    0, 1074,    0,    0, 1067, 1074, 1075,
     1075, 1075, 1068,    0, 1076, 1076, 1076, 1069, 1076, 1077,
     1077, 1077, 1076,    0, 1070, 1078, 1078, 1078,    0, 1071,
     1079, 1079, 1079, 1072, 1080, 1080, 1080, 1081, 1081, 1081,
     1082, 1082, 1082,    0, 1073, 1084, 1084, 1084, 1085, 1085,
     1085, 1074, 1086, 1086, 1086, 1087, 1087, 1087,    0,    0,
     1075, 1088, 1088, 1088,    0, 1076, 1089, 1089, 1089,    0,
     1077, 1090, 1090, 1090,    0,    0, 1078, 1091, 1091, 1091,
        0, 1079, 1092, 1092, 1092, 1080,    0,    0, 1081,    0,
        0, 1082, 1093, 1093, 1093,    0, 1084,    0,    0, 1085,

     1094, 1094, 1094, 1086,    0,    0, 1087, 1095, 1095, 1095,
        0,    0, 1088, 1096, 1096, 1096,    0, 1089, 1097, 1097,
     1097,    0, 1090, 1098, 1098, 1098,    0,    0, 1091, 1099,
     1099, 1099,    0, 1092, 1100, 1100, 1100, 1101, 1101, 1101,
     1102, 1102, 1102, 1093, 1103, 1103, 1103, 1104, 1104, 1104,
        0, 1094, 1105, 1105, 1105, 1106, 1106, 1106, 1095, 1107,
     1107, 1107,    0,    0, 1096, 1108, 1108, 1108,    0, 1097,
     1109, 1109, 1109,    0, 1098, 1110, 1110, 1110,    0,    0,
     1099, 1111, 1111, 1111,    0, 1100,    0,    0, 1101,    0,
        0, 1102, 1112, 1112, 1112, 1103,    0,    0, 1104, 1113,

     1113, 1113,    0, 1105,    0,    0, 1106, 1114, 1114, 1114,
     1107, 1115, 1115, 1115,    0,    0, 1108, 1116, 1116, 1116,
        0, 1109, 1117, 1117, 1117,    0, 1110, 1118, 1118, 1118,
        0,    0, 1111, 1119, 1119, 1119, 1120, 1120, 1120, 1121,
     1121, 1121,    0, 1112, 1122, 1122, 1122, 1123, 1123, 1123,
     1113, 1124, 1124, 1124, 1125, 1125, 1125,    0, 1114, 1126,
     1126, 1126, 1115, 1127, 1127, 1127,    0,    0, 1116, 1128,
     1128, 1128,    0, 1117, 1129, 1129, 1129,    0, 1118, 1130,
     1130, 1130,    0,    0, 1119,    0,    0, 1120,    0,    0,
     1121, 1131, 1131, 1131,    0, 1122,    0,    0, 1123, 1132,

     1132, 1132, 1124,    0,    0, 1125, 1133, 1133, 1133,    0,
     1126, 1134, 1134, 1134, 1127, 1135, 1135, 1135,    0,    0,
     1128, 1136, 1136, 1136,    0, 1129, 1137, 1137, 1137,    0,
     1130, 1138, 1138, 1138, 1139, 1139, 1139, 1140, 1140, 1140,
        0,    0, 1131, 1141, 1141, 1141, 1142, 1142, 1142,    0,
     1132, 1143, 1143, 1143, 1144, 1144, 1144, 1133, 1145, 1145,
     1145,    0, 1134, 1146, 1146, 1146, 1135, 1147, 1147, 1147,
        0,    0, 1136, 1148, 1148, 1148,    0, 1137, 1149, 1149,
     1149,    0, 1138,    0,    0, 1139,    0,    0, 1140, 1150,
     1150, 1150,    0,    0, 1141,    0,    0, 1142, 1151, 1151,

     1151,    0, 1143,    0,    0, 1144, 1152, 1152, 1152, 1145,
     1153, 1153, 1153,    0, 1146, 1154, 1154, 1154, 1147, 1155,
     1155, 1155,    0,    0, 1148, 1156, 1156, 1156,    0, 1149,
     1157, 1157, 1157, 1158, 1158, 1158, 1159, 1159, 1159,    0,
     1150,    0,    0,    0,    0,    0,    0,    0,    0, 1151,
        0,    0,    0,    0,    0,    0,    0, 1152,    0,    0,
        0, 1153,    0,    0,    0,    0, 1154,    0,    0,    0,
     1155,    0,    0,    0,    0,    0, 1156,    0,    0,    0,
        0, 1157,    0,    0, 1158,    0,    0, 1159, 1161, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,

     1161, 1161, 1161, 1161, 1161, 1161, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1166, 1166,
     1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1166, 1166, 1166, 1166, 1166, 1167, 1167, 1167, 1167,

     1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167,
     1167, 1167, 1167, 1167, 1168, 1168, 1168, 1168, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
     1168, 1168, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,

     1172, 1172, 1172, 1172, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1178, 1178, 1178, 1178, 1178, 1178,

     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1182, 1182, 1182,    0, 1182, 1182,    0,    0, 1182, 1182,
     1182, 1182,    0, 1182, 1182, 1182, 1182, 1182, 1183, 1183,
     1183,    0, 1183, 1183, 1183,    0, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1184, 1184, 1184,    0,
     1184, 1184,    0, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1185, 1185, 1185,    0, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,

     1185, 1186, 1186, 1186,    0, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1187,
     1187, 1187,    0,    0,    0, 1187,    0,    0,    0,    0,
     1187,    0,    0, 1187, 1188, 1188, 1188,    0,    0, 1188,
        0, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1189, 1189, 1189,    0, 1189, 1189, 1189, 1189, 1189,
     1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1190,
     1190, 1190,    0, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1191,    0,    0,
        0,    0,    0, 1191,    0,    0,    0,    0, 1191,    0,

        0, 1191, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1193,
     1193,    0,    0,    0,    0, 1193,    0,    0,    0,    0,
     1193,    0,    0, 1193, 1193, 1194,    0,    0,    0,    0,
        0,    0,    0,    0, 1194,    0, 1194,    0,    0, 1194,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1197,    0,
     1197,    0, 1197, 1197, 1197, 1197, 1197,    0, 1197, 1197,
        0, 1197, 1197,    0, 1197, 1198, 1198, 1198,    0, 1198,
     1198, 1198, 1198, 1198,    0, 1198, 1198, 1198, 1198, 1198,

     1198,    0, 1198, 1199, 1199, 1199,    0, 1199, 1199, 1199,
     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,    0, 1199,
     1200, 1200, 1200,    0, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200,    0, 1200, 1200,    0, 1200, 1201,    0, 1201,
        0, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201,    0, 1201, 1202,    0, 1202,    0, 1202, 1202,
     1202, 1202, 1202,    0, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1203,    0, 1203,    0, 1203, 1203, 1203, 1203,
     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
     1207, 1207, 1207,    0, 1207, 1207, 1207, 1207, 1207, 1207,

     1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1209, 1209,
     1209,    0, 1209, 1209, 1209,    0, 1209, 1209, 1209, 1209,
     1209, 1209, 1209, 1209, 1209, 1209, 1210, 1210, 1210,    0,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1211, 1211,    0, 1211,    0,    0,
     1211, 1212,    0, 1212, 1212,    0, 1212,    0, 1212,    0,
     1212, 1213, 1213, 1213,    0, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1215,
     1215, 1215,    0, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1216, 1216, 1216,

        0, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1218, 1218, 1218,    0, 1218,
     1218,    0,    0, 1218, 1218, 1218, 1218,    0, 1218, 1218,
     1218, 1218, 1218, 1219, 1219, 1219,    0, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1220, 1220, 1220,    0, 1220, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1221, 1221,
     1221,    0, 1221, 1221,    0, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1221, 1221, 1222, 1222, 1222,    0, 1222,
     1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222,

     1222, 1222, 1222, 1223, 1223, 1223,    0, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1224, 1224, 1224,    0, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1225,
     1225, 1225,    0,    0,    0, 1225,    0,    0,    0,    0,
     1225,    0,    0, 1225, 1226, 1226, 1226,    0,    0, 1226,
        0, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1227, 1227, 1227,    0, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1228,
        0,    0,    0,    0,    0, 1228,    0,    0,    0,    0,

     1228,    0,    0, 1228, 1229, 1229, 1229, 1229, 1229, 1229,
     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
     1229, 1230, 1230,    0,    0,    0,    0, 1230,    0,    0,
        0,    0, 1230,    0,    0, 1230, 1230, 1231,    0,    0,
        0,    0,    0,    0,    0,    0, 1231,    0, 1231,    0,
        0, 1231, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233,
     1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233,
     1234,    0, 1234,    0, 1234, 1234, 1234, 1234, 1234,    0,
     1234, 1234,    0, 1234, 1234,    0, 1234, 1235, 1235, 1235,
        0, 1235, 1235, 1235, 1235, 1235,    0, 1235, 1235, 1235,

     1235, 1235, 1235,    0, 1235, 1236, 1236, 1236,    0, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
        0, 1236, 1237, 1237, 1237,    0, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237,    0, 1237, 1237,    0, 1237, 1238,
        0, 1238,    0, 1238, 1238, 1238, 1238, 1238, 1238, 1238,
     1238, 1238, 1238, 1238,    0, 1238, 1239,    0, 1239,    0,
     1239, 1239, 1239, 1239, 1239,    0, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1240,    0, 1240,    0, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1245, 1245, 1245,    0, 1245, 1245, 1245, 1245,

     1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1246,
     1246, 1246,    0, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1247, 1247,    0,
     1247,    0,    0, 1247, 1248, 1248, 1248,    0, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1249, 1249, 1249,    0, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1251, 1251, 1251,    0, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1252, 1252,
     1252,    0, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,

     1252, 1252, 1252, 1252, 1252, 1252, 1254, 1254, 1254,    0,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1255, 1255, 1255,    0, 1255, 1255,    0,
        0, 1255, 1255, 1255, 1255,    0, 1255, 1255, 1255, 1255,
     1255, 1256, 1256, 1256,    0, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1257,
     1257, 1257,    0, 1257, 1257, 1257, 1257, 1257, 1257, 1257,
     1257, 1257, 1257, 1257, 1257, 1257, 1257, 1258, 1258, 1258,
        0, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1259, 1259, 1259,    0, 1259,

     1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259,
     1259, 1259, 1259, 1260, 1260, 1260,    0, 1260, 1260,    0,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1261, 1261, 1261,    0,    0,    0, 1261,    0,    0,    0,
        0, 1261,    0,    0, 1261, 1262, 1262, 1262,    0,    0,
     1262,    0, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1263, 1263, 1263,    0, 1263, 1263, 1263, 1263,
     1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1265, 1265, 1265,

        0, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1267, 1267, 1267,    0, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1268,
     1268, 1268,    0, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1269,    0,    0,    0,
     1269,    0,    0,    0,    0,    0,    0,    0, 1269,    0,
     1269, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271,    0, 1271, 1271,    0, 1271, 1160,

     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160
    } ;

extern int preYY_flex_debug;
int preYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *preYYtext;
#line 1 "pre.l"
/******************************************************************************
 *
 * 
 *
 * Copyright (C) 1997-2012 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 19 "pre.l"

/*
 *	includes
 */

#include <stdio.h>
#include <assert.h>
#include <ctype.h>
#include <errno.h>

#include "qtbc.h"
#include <qarray.h>
#include <qstack.h>
#include <qfile.h>
#include <qstrlist.h>
#include <qdict.h>
#include <qregexp.h>
#include <qfileinfo.h>
#include <qdir.h>
  
#include "pre.h"
#include "constexp.h"
#include "define.h"
#include "doxygen.h"
#include "message.h"
#include "util.h"
#include "defargs.h"
#include "debug.h"
#include "bufstr.h"
#include "portable.h"
#include "bufstr.h"
#include "arguments.h"
#include "entry.h"

#define YY_NEVER_INTERACTIVE 1
  

struct FileState
{
  FileState(int size) : fileBuf(size), 
                        oldFileBuf(0), oldFileBufPos(0) {}
  int lineNr;
  BufStr fileBuf;
  BufStr *oldFileBuf;
  int oldFileBufPos;
  YY_BUFFER_STATE bufState;
  QCString fileName;
};  

/** @brief Singleton that manages the defines available while 
 *  proprocessing files. 
 */
class DefineManager
{
  /** Local class used to hold the defines for a single file */
  class DefinesPerFile
  {
    public:
      /** Creates an empty container for defines */
      DefinesPerFile() : m_defines(257), m_includedFiles(17)
      {
        m_defines.setAutoDelete(TRUE);
      }
      /** Destroys the object */
      virtual ~DefinesPerFile()
      {
      }
      /** Adds a define in the context of a file. Will replace 
       *  an existing define with the same name (redefinition)
       *  @param def The Define object to add.
       */
      void addDefine(Define *def)
      {
	Define *d = m_defines.find(def->name);
	if (d!=0) // redefine
	{
	  m_defines.remove(d->name);
	}
	m_defines.insert(def->name,def);
      }
      /** Adds an include file for this file 
       *  @param fileName The name of the include file
       */
      void addInclude(const char *fileName)
      {
	m_includedFiles.insert(fileName,(void*)0x8);
      }
      void collectDefines(DefineDict *dict,QDict<void> &includeStack);
    private:
      DefineDict m_defines;
      QDict<void> m_includedFiles;
  };

  public:
    friend class DefinesPerFile;
    /** Returns a reference to the singleton */
    static DefineManager &instance()
    {
      if (theInstance==0) theInstance = new DefineManager;
      return *theInstance;
    }
    /** Deletes the singleton */
    static void deleteInstance()
    {
      delete theInstance;
      theInstance = 0;
    }
    /** Starts a context in which defines are collected. 
     *  Called at the start of a new file that is preprocessed.
     *  @param fileName the name of the file to process.
     */
    void startContext(const char *fileName)
    {
      //printf("DefineManager::startContext()\n");
      m_contextDefines.clear();
      if (fileName==0) return;
      DefinesPerFile *dpf = m_fileMap.find(fileName);
      if (dpf==0)
      {
	//printf("New file!\n");
	dpf = new DefinesPerFile;
	m_fileMap.insert(fileName,dpf);
      }
    }
    /** Ends the context started with startContext() freeing any
     *  defines collected within in this context.
     */
    void endContext()
    {
      //printf("DefineManager::endContext()\n");
      m_contextDefines.clear();
    }
    /** Add an included file to the current context.
     *  If the file has been pre-processed already, all defines are added
     *  to the context.
     *  @param fileName The name of the include file to add to the context.
     */
    void addFileToContext(const char *fileName)
    {
      if (fileName==0) return;
      //printf("DefineManager::addFileToContext(%s)\n",fileName);
      DefinesPerFile *dpf = m_fileMap.find(fileName);
      if (dpf==0)
      {
	//printf("New file!\n");
	dpf = new DefinesPerFile;
	m_fileMap.insert(fileName,dpf);
      }
      else
      {
	//printf("existing file!\n");
	QDict<void> includeStack(17);
	dpf->collectDefines(&m_contextDefines,includeStack);
      }
    }

    /** Add a define to the manager object.
     *  @param fileName The file in which the define was found
     *  @param def The Define object to add.
     */
    void addDefine(const char *fileName,Define *def)
    {
      if (fileName==0) return;
      //printf("DefineManager::addDefine(%s,%s)\n",fileName,def->name.data());
      Define *d = m_contextDefines.find(def->name);
      if (d!=0) // redefine
      {
	m_contextDefines.remove(d->name);
      }
      m_contextDefines.insert(def->name,def);

      DefinesPerFile *dpf = m_fileMap.find(fileName);
      if (dpf==0)
      {
	dpf = new DefinesPerFile;
      }
      dpf->addDefine(def);
    }

    /** Add an include relation to the manager object.
     *  @param fromFileName file name in which the include was found.
     *  @param toFileName file name that is included.
     */
    void addInclude(const char *fromFileName,const char *toFileName)
    {
      //printf("DefineManager::addInclude(%s,%s)\n",fromFileName,toFileName);
      if (fromFileName==0 || toFileName==0) return;
      DefinesPerFile *dpf = m_fileMap.find(fromFileName);
      if (dpf==0)
      {
	dpf = new DefinesPerFile;
      }
      dpf->addInclude(toFileName);
    }
    /** Returns a Define object given its name or 0 if the Define does
     *  not exist.
     */
    Define *isDefined(const char *name) const
    {
      return m_contextDefines.find(name);
    }
    /** Returns a reference to the defines found in the current context. */
    const DefineDict &defineContext() const
    {
      return m_contextDefines;
    }
  private:
    static DefineManager *theInstance;

    /** Helper function to collect all define for a given file */
    void collectDefinesForFile(const char *fileName,DefineDict *dict)
    {
      if (fileName==0) return;
      DefinesPerFile *dpf = m_fileMap.find(fileName);
      if (dpf)
      {
	QDict<void> includeStack(17);
	dpf->collectDefines(dict,includeStack);
      }
    }

    /** Helper function to return the DefinesPerFile object for a given file name. */
    DefinesPerFile *find(const char *fileName) const
    {
      if (fileName==0) return 0;
      return m_fileMap.find(fileName);
    }

    /** Creates a new DefineManager object */
    DefineManager() : m_fileMap(1009), m_contextDefines(1009)
    {
      m_fileMap.setAutoDelete(TRUE);
    }

    /** Destroys the object */
    virtual ~DefineManager() 
    {
    }

    QDict<DefinesPerFile> m_fileMap;
    DefineDict m_contextDefines;
};

/** Singleton instance */
DefineManager *DefineManager::theInstance = 0;

/** Collects all defines for a file and all files that the file includes.
 *  This function will recursively call itself for each file.
 *  @param dict The dictionary to fill with the defines. A redefine will
 *         replace a previous definition.
 *  @param includeStack The stack of includes, used to stop recursion in
 *         case there is a cyclic include dependency.
 */
void DefineManager::DefinesPerFile::collectDefines(
                     DefineDict *dict,QDict<void> &includeStack)
{
  //printf("DefinesPerFile::collectDefines #defines=%d\n",m_defines.count());
  {
    QDictIterator<void> di(m_includedFiles);
    for (di.toFirst();(di.current());++di)
    {
      QCString incFile = di.currentKey();
      DefinesPerFile *dpf = DefineManager::instance().find(incFile);
      if (dpf && includeStack.find(incFile)==0) 
      {
        //printf("  processing include %s\n",incFile.data());
	includeStack.insert(incFile,(void*)0x8);
	dpf->collectDefines(dict,includeStack);
      }
    }
  }
  {
    QDictIterator<Define> di(m_defines);
    Define *def;
    for (di.toFirst();(def=di.current());++di)
    {
      Define *d = dict->find(def->name);
      if (d!=0) // redefine
      {
	dict->remove(d->name);
      }
      dict->insert(def->name,def);
      //printf("  adding define %s\n",def->name.data());
    }
  }
}

/* -----------------------------------------------------------------
 *
 *	scanner's state
 */

static int                g_yyLineNr   = 1;
static QCString           g_yyFileName;
static FileDef           *g_yyFileDef;
static FileDef           *g_inputFileDef;
static int                g_ifcount    = 0;
static QStrList          *g_pathList = 0;  
static QStack<FileState>  g_includeStack;
static QDict<int>        *g_argDict;
static int                g_defArgs = -1;
static QCString           g_defName;
static QCString           g_defText;
static QCString           g_defLitText;
static QCString           g_defArgsStr;
static QCString           g_defExtraSpacing;
static bool               g_defVarArgs;
static int                g_level;
static int                g_lastCContext;
static int                g_lastCPPContext;
static QArray<int>        g_levelGuard;
static BufStr            *g_inputBuf;
static int                g_inputBufPos;
static BufStr            *g_outputBuf;
static int                g_roundCount;
static bool               g_quoteArg;
static DefineDict        *g_expandedDict;
static int                g_findDefArgContext;
static bool               g_expectGuard;
static QCString           g_guardName;
static QCString           g_lastGuardName;
static QCString           g_incName;
static QCString           g_guardExpr;
static int                g_curlyCount;
static bool               g_nospaces; // add extra spaces during macro expansion

static bool               g_macroExpansion; // from the configuration
static bool               g_expandOnlyPredef; // from the configuration
static int                g_commentCount;
static bool               g_insideComment;
static bool               g_isImported;
static QCString           g_blockName;
static int                g_condCtx;
static bool               g_skip;
static QStack<bool>       g_condStack;
static bool               g_insideCS; // C# has simpler preprocessor
static bool               g_isSource;

static bool               g_lexInit = FALSE;

//DefineDict* getGlobalDefineDict() 
//{
//  return g_globalDefineDict;
//}

static void setFileName(const char *name)
{
  bool ambig;
  QFileInfo fi(name);
  g_yyFileName=convertToQCString(fi.absFilePath());
  g_yyFileDef=findFileDef(Doxygen::inputNameDict,g_yyFileName,ambig);
  if (g_yyFileDef==0) // if this is not an input file check if it is an
                      // include file
  {
    g_yyFileDef=findFileDef(Doxygen::includeNameDict,g_yyFileName,ambig);
  }
  //printf("setFileName(%s) g_yyFileName=%s g_yyFileDef=%p\n",
  //    name,g_yyFileName.data(),g_yyFileDef);
  if (g_yyFileDef && g_yyFileDef->isReference()) g_yyFileDef=0;
  g_insideCS = getLanguageFromFileName(g_yyFileName)==SrcLangExt_CSharp;
  g_isSource = guessSection(g_yyFileName);
}

static void incrLevel()
{
  g_level++;
  g_levelGuard.resize(g_level);
  g_levelGuard[g_level-1]=FALSE;
  //printf("%s line %d: incrLevel %d\n",g_yyFileName.data(),g_yyLineNr,g_level);
}

static void decrLevel()
{
  //printf("%s line %d: decrLevel %d\n",g_yyFileName.data(),g_yyLineNr,g_level);
  if (g_level > 0)
  {
    g_level--;
    g_levelGuard.resize(g_level);
  }
  else
  {
    warn(g_yyFileName,g_yyLineNr,"warning: More #endif's than #if's found.\n");
  }
}

static bool otherCaseDone()
{
  if (g_level==0)
  {
    warn(g_yyFileName,g_yyLineNr,"warning: Found an #else without a preceding #if.\n");
    return TRUE;
  }
  else
  {
    return g_levelGuard[g_level-1];
  }
}

static void setCaseDone(bool value)
{
  g_levelGuard[g_level-1]=value;
}

#if 0
static bool macroIsAccessible(Define *def)
{
  //printf("macroIsAccessible(%s) input=%s def=%s\n",
  //    def->name.data(),g_inputFileDef?g_inputFileDef->name().data():"<none>",
  //    def->fileDef ? def->fileDef->name().data() : "<none>");
  if (def && def->isPredefined) // predefined macro -> globally accessible
  {
    //printf("%s: predefined macro %s\n",g_inputFileDef->name().data(),def->name.data());
    return TRUE;
  }
  if (def && def->fileDef==g_inputFileDef)
  {
    //printf("%s: macro %s defined in this file at line %d now at %d\n",
    //	g_inputFileDef->name().data(),def->name.data(),def->lineNr,g_yyLineNr);
    return def->lineNr<=g_yyLineNr;
  }
  if (g_inputFileDef && def && def->fileDef) // check if g_inputFileDef actually includes def->fileDef
  {
    QDict<FileDef> includedFiles(257);
    bool b = g_inputFileDef->includes(def->fileDef,&includedFiles);
    //printf("%s: Checking for accessibility of define '%s' (defined in %s): result=%d\n",
    //       g_inputFileDef->name().data(),def->name.data(),def->fileDef->name().data(),b);
    return b;
  }
  if (g_inputFileDef && def && !def->fileName.isEmpty())
  {
    bool b = g_inputFileDef->includesByName(def->fileName);
    //printf("%s: Checking for accessibility of define '%s' (defined in %s): result=%d\n",
    //       g_inputFileDef->name().data(),def->name.data(),def->fileName.data(),b);
    return b;
  }
  //printf("not accessible!\n");
  return FALSE;
}

static Define *isDefined(const char *name)
{
  Define *def=0;
  if (name)
  {
    def=g_globalDefineDict->find(name);
    if (def && def->undef) def=0;
    if (def && !macroIsAccessible(def)) def=0;
  }
  //printf("isDefined(%s)=%p\n",name,def);
  return def;
}
#endif


static QDict<void> g_allIncludes(10009);

static FileState *checkAndOpenFile(const QCString &fileName,bool &alreadyIncluded)
{
  alreadyIncluded = FALSE;
  FileState *fs = 0;
  //printf("checkAndOpenFile(%s)\n",fileName.data());
  QFileInfo fi(fileName);
  if (fi.exists() && fi.isFile())
  {
    static QStrList &exclPatterns = Config_getList("EXCLUDE_PATTERNS");
    if (patternMatch(fi,&exclPatterns)) return 0;

    QCString absName = convertToQCString(fi.absFilePath());

    // global guard
    if (g_curlyCount==0) // not #include inside { ... }
    {
      if (g_allIncludes.find(absName)!=0)
      {
        alreadyIncluded = TRUE;
        //printf("  already included 1\n");
        return 0; // already done
      }
      g_allIncludes.insert(absName,(void *)0x8);
    }
    // check include stack for absName

    QStack<FileState> tmpStack;
    g_includeStack.setAutoDelete(FALSE);
    while ((fs=g_includeStack.pop()))
    {
      if (fs->fileName==absName) alreadyIncluded=TRUE;
      tmpStack.push(fs);
    }
    while ((fs=tmpStack.pop()))
    {
      g_includeStack.push(fs);
    }
    g_includeStack.setAutoDelete(TRUE);

    if (alreadyIncluded)
    {
      //printf("  already included 2\n");
      return 0;
    }
    //printf("#include %s\n",absName.data());

    fs = new FileState(fi.size()+4096);
    alreadyIncluded = FALSE;
    if (!readInputFile(absName,fs->fileBuf))
    { // error
      //printf("  error reading\n");
      delete fs;
      fs=0;
    }
    else
    {
      fs->oldFileBuf    = g_inputBuf;
      fs->oldFileBufPos = g_inputBufPos;
    }
  }
  return fs;
}

static FileState *findFile(const char *fileName,bool localInclude,bool &alreadyIncluded)
{
  //printf("** findFile(%s,%d) g_yyFileName=%s\n",fileName,localInclude,g_yyFileName.data());
  if (localInclude && !g_yyFileName.isEmpty())
  {
    QFileInfo fi(g_yyFileName);
    if (fi.exists())
    {
      QCString absName = QCString(fi.dirPath(TRUE).data())+"/"+fileName;
      FileState *fs = checkAndOpenFile(absName,alreadyIncluded);
      if (fs)
      {
	setFileName(absName);
	g_yyLineNr=1;
	return fs;
      }
      else if (alreadyIncluded)
      {
	return 0;
      }
    }
  }
  if (g_pathList==0) 
  {
    return 0;
  }
  char *s=g_pathList->first();
  while (s)
  {
    QCString absName = (QCString)s+"/"+fileName;
    //printf("  Looking for %s in %s\n",fileName,s);
    FileState *fs = checkAndOpenFile(absName,alreadyIncluded);
    if (fs)
    {
      setFileName(absName);
      g_yyLineNr=1;
      //printf("  -> found it\n");
      return fs;
    }
    else if (alreadyIncluded)
    {
      return 0;
    }

    s=g_pathList->next();
  } 
  return 0;
}

static QCString extractTrailingComment(const char *s)
{
  if (s==0) return "";
  int i=strlen(s)-1;
  while (i>=0)
  {
    char c=s[i];
    switch (c)
    {
      case '/':
	{
	  i--;
	  if (i>=0 && s[i]=='*') // end of a comment block
	  {
	    i--;
	    while (i>0 && !(s[i-1]=='/' && s[i]=='*')) i--;
	    if (i==0) 
	    {
	      i++;
	    }
	    // only /*!< or /**< are treated as a comment for the macro name,
	    // otherwise the comment is treated as part of the macro definition
	    return ((s[i+1]=='*' || s[i+1]=='!') && s[i+2]=='<') ? &s[i-1] : ""; 
	  }
	  else
	  {
	    return "";
	  }
	} 
	break;
	// whitespace or line-continuation
      case ' ':
      case '\t': 
      case '\r':
      case '\n':
      case '\\':
	break;
      default:
	return "";
    }
    i--;
  }
  return "";
}

static int getNextChar(const QCString &expr,QCString *rest,uint &pos);
static int getCurrentChar(const QCString &expr,QCString *rest,uint pos);
static void unputChar(const QCString &expr,QCString *rest,uint &pos,char c);
static void expandExpression(QCString &expr,QCString *rest,int pos);

static QCString stringize(const QCString &s)
{
  QCString result;
  uint i=0;
  bool inString=FALSE;
  bool inChar=FALSE;
  char c,pc;
  while (i<s.length())
  {
    if (!inString && !inChar)
    {
      while (i<s.length() && !inString && !inChar)
      {
	c=s.at(i++);
	if (c=='"')
	{
	  result+="\\\"";
	  inString=TRUE;
	}
	else if (c=='\'')
	{
	  result+=c;
	  inChar=TRUE;
	}
	else
	{
	  result+=c;
	}
      }
    }
    else if (inChar)
    {
      while (i<s.length() && inChar)
      {
	c=s.at(i++);
	if (c=='\'')
	{
	  result+='\'';
	  inChar=FALSE;
	}
	else if (c=='\\')
	{
	  result+="\\\\";
	}
	else
	{
	  result+=c;
	}
      }
    }
    else
    {
      pc=0;
      while (i<s.length() && inString)
      {
	char c=s.at(i++);
	if (c=='"') 
	{
	  result+="\\\"";
	  inString= pc=='\\';
	}
	else if (c=='\\')
	  result+="\\\\";
	else
	  result+=c;
	pc=c;
      }
    }
  }
  //printf("stringize `%s'->`%s'\n",s.data(),result.data());
  return result;
}

/*! Execute all ## operators in expr. 
 * If the macro name before or after the operator contains a no-rescan 
 * marker (@-) then this is removed (before the concatenated macro name
 * may be expanded again.
 */
static void processConcatOperators(QCString &expr)
{
  //printf("processConcatOperators: in=`%s'\n",expr.data());
  QRegExp r("[ \\t\\n]*##[ \\t\\n]*"); 
  int l,n,i=0;
  if (expr.isEmpty()) return;
  while ((n=r.match(expr,i,&l))!=-1)
  {
    //printf("Match: `%s'\n",expr.data()+i);
    if (n+l+1<(int)expr.length() && expr.at(n+l)=='@' && expr.at(n+l+1)=='-')
    {
      // remove no-rescan marker after ID
      l+=2;
    }
    //printf("found `%s'\n",expr.mid(n,l).data());
    // remove the ## operator and the surrounding whitespace
    expr=expr.left(n)+expr.right(expr.length()-n-l);
    int k=n-1;
    while (k>=0 && isId(expr.at(k))) k--; 
    if (k>0 && expr.at(k)=='-' && expr.at(k-1)=='@')
    {
      // remove no-rescan marker before ID
      expr=expr.left(k-1)+expr.right(expr.length()-k-1);
      n-=2;
    }
    i=n;
  }
  //printf("processConcatOperators: out=`%s'\n",expr.data());
}

static void yyunput (int c,char *buf_ptr  );
static void returnCharToStream(char c)
{
  unput(c);
}

static inline void addTillEndOfString(const QCString &expr,QCString *rest,
                                       uint &pos,char term,QCString &arg)
{
  int cc;
  while ((cc=getNextChar(expr,rest,pos))!=EOF)
  {
    if (cc=='\\') arg+=(char)cc,cc=getNextChar(expr,rest,pos);
    else if (cc==term) return;
    arg+=(char)cc;
  }
}

/*! replaces the function macro \a def whose argument list starts at
 * \a pos in expression \a expr. 
 * Notice that this routine may scan beyond the \a expr string if needed.
 * In that case the characters will be read from the input file.
 * The replacement string will be returned in \a result and the 
 * length of the (unexpanded) argument list is stored in \a len.
 */ 
static bool replaceFunctionMacro(const QCString &expr,QCString *rest,int pos,int &len,const Define *def,QCString &result)
{
  //printf("replaceFunctionMacro(expr=%s,rest=%s,pos=%d,def=%s) level=%d\n",expr.data(),rest ? rest->data() : 0,pos,def->name.data(),g_level);
  uint j=pos;
  len=0;
  result.resize(0);
  int cc;
  while ((cc=getCurrentChar(expr,rest,j))!=EOF && isspace(cc)) 
  { 
    len++; 
    getNextChar(expr,rest,j); 
  }
  if (cc!='(') 
  { 
    unputChar(expr,rest,j,' '); 
    return FALSE; 
  }
  getNextChar(expr,rest,j); // eat the `(' character

  QDict<QCString> argTable;  // list of arguments
  argTable.setAutoDelete(TRUE);
  QCString arg;
  int argCount=0;
  bool done=FALSE;
  
  // PHASE 1: read the macro arguments
  if (def->nargs==0)
  {
    while ((cc=getNextChar(expr,rest,j))!=EOF)
    {
      char c = (char)cc;
      if (c==')') break;
    }
  }
  else
  {
    while (!done && (argCount<def->nargs || def->varArgs) && 
	((cc=getNextChar(expr,rest,j))!=EOF)
	  )
    {
      char c=(char)cc;
      if (c=='(') // argument is a function => search for matching )
      {
	int level=1;
	arg+=c;
	//char term='\0';
	while ((cc=getNextChar(expr,rest,j))!=EOF)
	{
	  char c=(char)cc;
	  //printf("processing %c: term=%c (%d)\n",c,term,term);
	  if (c=='\'' || c=='\"') // skip ('s and )'s inside strings
	  {
	    arg+=c;
	    addTillEndOfString(expr,rest,j,c,arg);
	  }
	  if (c==')')
	  {
	    level--;
	    arg+=c;
	    if (level==0) break;
	  }
	  else if (c=='(')
	  {
	    level++;
	    arg+=c;
	  }
	  else
	    arg+=c;
	}
      }
      else if (c==')' || c==',') // last or next argument found
      {
	if (c==',' && argCount==def->nargs-1 && def->varArgs)
	{
	  arg=arg.stripWhiteSpace();
	  arg+=',';
	}
	else
	{
	  QCString argKey;
	  argKey.sprintf("@%d",argCount++); // key name
	  arg=arg.stripWhiteSpace();
	  // add argument to the lookup table
	  argTable.insert(argKey, new QCString(arg));
	  arg.resize(0);
	  if (c==')') // end of the argument list
	  {
	    done=TRUE;
	  }
	}
      } 
      else if (c=='\"') // append literal strings
      {
	arg+=c; 
	bool found=FALSE;
	while (!found && (cc=getNextChar(expr,rest,j))!=EOF)
	{
	  found = cc=='"';
	  if (cc=='\\')
	  {
	    c=(char)cc;	  
	    arg+=c;
	    if ((cc=getNextChar(expr,rest,j))==EOF) break;
	  }
	  c=(char)cc;	  
	  arg+=c;
	}
      }
      else if (c=='\'') // append literal characters
      {
	arg+=c;
	bool found=FALSE;
	while (!found && (cc=getNextChar(expr,rest,j))!=EOF)
	{
	  found = cc=='\'';
	  if (cc=='\\')
	  {
	    c=(char)cc;	  
	    arg+=c;
	    if ((cc=getNextChar(expr,rest,j))==EOF) break;
	  }
	  c=(char)cc;
	  arg+=c;
	}
      }	    
      else // append other characters
      {
	arg+=c;
      }
    }
  }

  // PHASE 2: apply the macro function
  if (argCount==def->nargs || 
      (argCount>def->nargs && def->varArgs)) // matching parameters lists
  {
    uint k=0;
    // substitution of all formal arguments
    QCString resExpr;
    const QCString d=def->definition.stripWhiteSpace();
    //printf("Macro definition: %s\n",d.data());
    bool inString=FALSE;
    while (k<d.length())
    {
      if (d.at(k)=='@') // maybe a marker, otherwise an escaped @
      {
	if (d.at(k+1)=='@') // escaped @ => copy it (is unescaped later)
	{
	  k+=2;
	  resExpr+="@@"; // we unescape these later
	}
	else if (d.at(k+1)=='-') // no-rescan marker
	{
	  k+=2;
	  resExpr+="@-";
	}
	else // argument marker => read the argument number
	{
	  QCString key="@";
	  QCString *subst=0;
	  bool hash=FALSE;
	  int l=k-1;
	  // search for ## backward
	  if (l>=0 && d.at(l)=='"') l--;
	  while (l>=0 && d.at(l)==' ') l--;
	  if (l>0 && d.at(l)=='#' && d.at(l-1)=='#') hash=TRUE;
	  k++;
	  // scan the number
	  while (k<d.length() && d.at(k)>='0' && d.at(k)<='9') key+=d.at(k++);
	  if (!hash) 
	  {
	    // search for ## forward
	    l=k;
	    if (l<(int)d.length() && d.at(l)=='"') l++;
	    while (l<(int)d.length() && d.at(l)==' ') l++;
	    if (l<(int)d.length()-1 && d.at(l)=='#' && d.at(l+1)=='#') hash=TRUE;
	  }
	  //printf("request key %s result %s\n",key.data(),argTable[key]->data());
	  if (key.length()>1 && (subst=argTable[key])) 
	  {
	    QCString substArg=*subst;
	    //printf("substArg=`%s'\n",substArg.data());
	    // only if no ## operator is before or after the argument
	    // marker we do macro expansion.
	    if (!hash) expandExpression(substArg,0,0);
	    if (inString)
	    {
	      //printf("`%s'=stringize(`%s')\n",stringize(*subst).data(),subst->data());

	      // if the marker is inside a string (because a # was put 
	      // before the macro name) we must escape " and \ characters
	      resExpr+=stringize(substArg);
	    }
	    else
	    {
	      if (hash && substArg.isEmpty())
	      {
		resExpr+="@E"; // empty argument will be remove later on
	      }
	      else if (g_nospaces)
	      {
	        resExpr+=substArg;
	      }
	      else
	      {
	        resExpr+=" "+substArg+" ";
	      }
	    }
	  }
	}
      }
      else // no marker, just copy
      {
	if (!inString && d.at(k)=='\"') 
	{
	  inString=TRUE; // entering a literal string
	}
	else if (inString && d.at(k)=='\"' && (d.at(k-1)!='\\' || d.at(k-2)=='\\'))
	{
	  inString=FALSE; // leaving a literal string
	}
	resExpr+=d.at(k++);
      }
    }
    len=j-pos;
    result=resExpr;
    //printf("result after substitution `%s' expr=`%s'\n",
    //       result.data(),expr.mid(pos,len).data());
    return TRUE;
  }
  return FALSE;
}


/*! returns the next identifier in string \a expr by starting at position \a p.
 * The position of the identifier is returned (or -1 if nothing is found)
 * and \a l is its length. Any quoted strings are skipping during the search.
 */
static int getNextId(const QCString &expr,int p,int *l)
{
  int n;
  while (p<(int)expr.length())
  {
    char c=expr.at(p++);
    if (isdigit(c)) // skip number
    {
      while (p<(int)expr.length() && isId(expr.at(p))) p++;
    }
    else if (isalpha(c) || c=='_') // read id
    {
      n=p-1;
      while (p<(int)expr.length() && isId(expr.at(p))) p++;
      *l=p-n;
      return n; 
    }
    else if (c=='"') // skip string
    {
      char ppc=0,pc=c;
      if (p<(int)expr.length()) c=expr.at(p);
      while (p<(int)expr.length() && (c!='"' || (pc=='\\' && ppc!='\\'))) 
	// continue as long as no " is found, but ignoring \", but not \\"
      {
	ppc=pc;
	pc=c;
	c=expr.at(p);
	p++;
      }
      if (p<(int)expr.length()) ++p; // skip closing quote
    }
    else if (c=='/') // skip C Comment
    {
      //printf("Found C comment at p=%d\n",p);
      char pc=c;
      if (p<(int)expr.length()) 
      {
	c=expr.at(p);
        if (c=='*')  // Start of C comment
        { 
	  p++;
  	  while (p<(int)expr.length() && !(pc=='*' && c=='/'))
	  {
	    pc=c;
	    c=expr.at(p++);
	  }
        }
      }
      //printf("Found end of C comment at p=%d\n",p);
    }
  }
  return -1;
}

/*! preforms recursive macro expansion on the string \a expr
 *  starting at position \a pos.
 *  May read additional characters from the input while re-scanning!
 *  If \a expandAll is \c TRUE then all macros in the expression are
 *  expanded, otherwise only the first is expanded.
 */
static void expandExpression(QCString &expr,QCString *rest,int pos)
{
  //printf("expandExpression(%s,%s)\n",expr.data(),rest ? rest->data() : 0);
  QCString macroName;
  QCString expMacro;
  bool definedTest=FALSE;
  int i=pos,l,p,len;
  while ((p=getNextId(expr,i,&l))!=-1) // search for an macro name
  {
    bool replaced=FALSE;
    macroName=expr.mid(p,l);
    //printf("macroName=%s\n",macroName.data());
    if (p<2 || !(expr.at(p-2)=='@' && expr.at(p-1)=='-')) // no-rescan marker?
    {
      if (g_expandedDict->find(macroName)==0) // expand macro
      {
	Define *def=DefineManager::instance().isDefined(macroName);
	if (definedTest) // macro name was found after defined 
	{
	  if (def) expMacro = " 1 "; else expMacro = " 0 ";
	  replaced=TRUE;
	  len=l;
	  definedTest=FALSE;
	}
	else if (def && def->nargs==-1) // simple macro
	{
	  // substitute the definition of the macro
	  //printf("macro `%s'->`%s'\n",macroName.data(),def->definition.data());
	  if (g_nospaces)
	  {
	    expMacro=def->definition.stripWhiteSpace();
	  }
	  else
	  {
	    expMacro=" "+def->definition.stripWhiteSpace()+" ";
	  }
	  //expMacro=def->definition.stripWhiteSpace();
	  replaced=TRUE;
	  len=l;
	  //printf("simple macro expansion=`%s'->`%s'\n",macroName.data(),expMacro.data());
	}
	else if (def && def->nargs>=0) // function macro
	{
	  replaced=replaceFunctionMacro(expr,rest,p+l,len,def,expMacro);
	  len+=l;
	}
        else if (macroName=="defined")
        {
  	  //printf("found defined inside macro definition '%s'\n",expr.right(expr.length()-p).data());
	  definedTest=TRUE;
        }

	if (replaced) // expand the macro and rescan the expression
	{
	    
	  //printf("replacing `%s'->`%s'\n",expr.mid(p,len).data(),expMacro.data());
	  QCString resultExpr=expMacro;
	  QCString restExpr=expr.right(expr.length()-len-p);
	  processConcatOperators(resultExpr);
	  if (def && !def->nonRecursive)
	  {
	    g_expandedDict->insert(macroName,def);
	    expandExpression(resultExpr,&restExpr,0);
	    g_expandedDict->remove(macroName);
	  }
	  expr=expr.left(p)+resultExpr+restExpr;
	  i=p;
	  //printf("new expression: %s\n",expr.data());
	}
	else // move to the next macro name
	{
	  //printf("moving to the next macro old=%d new=%d\n",i,p+l);
	  i=p+l;
	}
      }
      else // move to the next macro name
      {
	expr=expr.left(p)+"@-"+expr.right(expr.length()-p);
	//printf("macro already expanded, moving to the next macro expr=%s\n",expr.data());
	i=p+l+2;
	//i=p+l;
      }
    }
    else // no re-scan marker found, skip the macro name
    {
      //printf("skipping marked macro\n");
      i=p+l;
    }
  }
}

/*! replaces all occurrences of @@@@ in \a s by @@
 *  and removes all occurrences of @@E.
 *  All identifiers found are replaced by 0L
 */
QCString removeIdsAndMarkers(const char *s)
{
  //printf("removeIdsAndMarkers(%s)\n",s);
  const char *p=s;
  char c;
  bool inNum=FALSE;
  QCString result;
  if (p)
  {
    while ((c=*p))
    {
      if (c=='@') // replace @@ with @ and remove @E
      {
	if (*(p+1)=='@')
	{
	  result+=c; 
	}
	else if (*(p+1)=='E')
	{
	  // skip
	}
	p+=2;
      }
      else if (isdigit(c)) // number
      {
	result+=c;
	p++;
        inNum=TRUE;	
      }
      else if (c=='d' && !inNum) // identifier starting with a `d'
      {
	if (strncmp(p,"defined ",8)==0 || strncmp(p,"defined(",8)==0) 
	           // defined keyword
	{
	  p+=7; // skip defined
	}
	else
	{
	  result+="0L";
	  p++;
	  while ((c=*p) && isId(c)) p++;
	}
      }
      else if ((isalpha(c) || c=='_') && !inNum) // replace identifier with 0L
      {
	result+="0L";
	p++;
	while ((c=*p) && isId(c)) p++;
	if (*p=='(') // undefined function macro
	{
	  p++;
	  int count=1;
	  while ((c=*p++))
	  {
	    if (c=='(') count++;
	    else if (c==')')
	    {
	      count--;
	      if (count==0) break;
	    }
	    else if (c=='/')
	    {
	      char pc=c;
	      c=*++p;
	      if (c=='*') // start of C comment
	      {
		while (*p && !(pc=='*' && c=='/')) // search end of comment
		{
		  pc=c;
		  c=*++p;
		}
		p++;
	      }
	    }
	  }
	}
      }
      else if (c=='/') // skip C comments
      {
	char pc=c;
	c=*++p;
	if (c=='*') // start of C comment
	{ 
	  while (*p && !(pc=='*' && c=='/')) // search end of comment
	  {
	    pc=c;
	    c=*++p;
	  }
	  p++;
	}
	else // oops, not comment but division
	{
	  result+=pc;
	  goto nextChar;
	}
      }
      else 
      {
nextChar:
	result+=c;
	char lc=tolower(c);
	if (!isId(lc) && lc!='.' /*&& lc!='-' && lc!='+'*/) inNum=FALSE;
	p++;
      }
    }
  }
  //printf("removeIdsAndMarkers(%s)=%s\n",s,result.data());
  return result;
}

/*! replaces all occurrences of @@ in \a s by @
 *  \par assumption: 
 *   \a s only contains pairs of @@'s
 */
QCString removeMarkers(const char *s)
{
  const char *p=s;
  char c;
  QCString result;
  if (p)
  {
    while ((c=*p))
    {
      switch(c)
      {
	case '@': // replace @@ with @
	  {
	    if (*(p+1)=='@')
	    {
	      result+=c; 
	    }
	    p+=2;
	  }
	  break;
	case '/': // skip C comments
	  {
	    result+=c;
	    char pc=c;
	    c=*++p;
	    if (c=='*') // start of C comment
	    { 
	      while (*p && !(pc=='*' && c=='/')) // search end of comment
	      {
		if (*p=='@' && *(p+1)=='@') 
		  result+=c,p++;
		else 
		  result+=c;
		pc=c;
		c=*++p;
	      }
	      if (*p) result+=c,p++;
	    }
	  }
	  break;
	case '"': // skip string literals
	  {
	    result+=c;
	    char pc=c;
	    c=*++p;
	    while (*p && (c!='"' || pc=='\\')) // no end quote
	    {
	      result+=c;
	      c=*++p;
	    }
	    if (*p) result+=c,p++; 
	  }
	  break;
	case '\'': // skip char literals
	  {
	    result+=c;
	    char pc=c;
	    c=*++p;
	    while (*p && (c!='\'' || pc=='\\')) // no end quote
	    {
	      result+=c;
	      c=*++p;
	    }
	    if (*p) result+=c,p++; 
	  }
	  break;
	default:
	  {
	    result+=c;
	    p++;
	  }
	  break;
      }
    }
  }
  //printf("RemoveMarkers(%s)=%s\n",s,result.data());
  return result;
}

/*! compute the value of the expression in string \a expr.
 *  If needed the function may read additional characters from the input.
 */

bool computeExpression(const QCString &expr)
{
  QCString e=expr;
  expandExpression(e,0,0);
  //printf("after expansion `%s'\n",e.data());
  e = removeIdsAndMarkers(e);
  if (e.isEmpty()) return FALSE;
  //printf("parsing `%s'\n",e.data());
  return parseCppExpression(g_yyFileName,g_yyLineNr,e);
}

/*! expands the macro definition in \a name
 *  If needed the function may read additional characters from the input
 */

QCString expandMacro(const QCString &name)
{
  QCString n=name;
  expandExpression(n,0,0);
  n=removeMarkers(n);
  //printf("expandMacro `%s'->`%s'\n",name.data(),n.data());
  return n;
}

Define *newDefine()
{
  Define *def=new Define;
  def->name       = g_defName;
  def->definition = g_defText.stripWhiteSpace();
  def->nargs      = g_defArgs;
  def->fileName   = g_yyFileName; 
  def->fileDef    = g_yyFileDef;
  def->lineNr     = g_yyLineNr;
  def->varArgs    = g_defVarArgs;
  //printf("newDefine: %s %s file: %s\n",def->name.data(),def->definition.data(),
  //    def->fileDef ? def->fileDef->name().data() : def->fileName.data());
  //printf("newDefine: `%s'->`%s'\n",def->name.data(),def->definition.data());
  if (!def->name.isEmpty() && Doxygen::expandAsDefinedDict[def->name])
  {
    def->isPredefined=TRUE;
  }
  return def;
}

void addDefine()
{
  if (g_skip) return; // do not add this define as it is inside a 
                      // conditional section (cond command) that is disabled.
  if (!Doxygen::gatherDefines) return;

  //printf("addDefine %s %s\n",g_defName.data(),g_defArgsStr.data());
  //ArgumentList *al = new ArgumentList;
  //stringToArgumentList(g_defArgsStr,al);
  MemberDef *md=new MemberDef(
      g_yyFileName,g_yyLineNr,
      "#define",g_defName,g_defArgsStr,0,
      Public,Normal,FALSE,Member,MemberDef::Define,0,0);
  if (!g_defArgsStr.isEmpty())
  {
    ArgumentList *argList = new ArgumentList;
    //printf("addDefine() g_defName=`%s' g_defArgsStr=`%s'\n",g_defName.data(),g_defArgsStr.data());
    stringToArgumentList(g_defArgsStr,argList);
    md->setArgumentList(argList);
  }
  //printf("Setting initializer for `%s' to `%s'\n",g_defName.data(),g_defText.data());
  int l=g_defLitText.find('\n');
  if (l>0 && g_defLitText.left(l).stripWhiteSpace()=="\\")
  {
    // strip first line if it only contains a slash
    g_defLitText = g_defLitText.right(g_defLitText.length()-l-1);
  }
  else if (l>0)
  {
    // align the items on the first line with the items on the second line
    int k=l+1;
    const char *p=g_defLitText.data()+k;
    char c;
    while ((c=*p++) && (c==' ' || c=='\t')) k++;
    g_defLitText=g_defLitText.mid(l+1,k-l-1)+g_defLitText.stripWhiteSpace();
  }
  md->setInitializer(g_defLitText.stripWhiteSpace());

  //printf("pre.l: md->setFileDef(%p)\n",g_inputFileDef);
  md->setFileDef(g_inputFileDef);
  md->setDefinition("#define "+g_defName);

  MemberName *mn=Doxygen::functionNameSDict->find(g_defName);
  if (mn==0)
  {
    mn = new MemberName(g_defName);
    Doxygen::functionNameSDict->append(g_defName,mn);
  }
  mn->append(md);
  if (g_yyFileDef) 
  {
    g_yyFileDef->insertMember(md);
  }

  //Define *d;
  //if ((d=defineDict[g_defName])==0) defineDict.insert(g_defName,newDefine()); 
}

static inline void outputChar(char c)
{
  if (g_includeStack.isEmpty() || g_curlyCount>0) g_outputBuf->addChar(c);
}

static inline void outputArray(const char *a,int len)
{
  if (g_includeStack.isEmpty() || g_curlyCount>0) g_outputBuf->addArray(a,len);
}

static void readIncludeFile(const QCString &inc)
{
  static bool searchIncludes = Config_getBool("SEARCH_INCLUDES");
  if (!searchIncludes) return; // do not read include files
  uint i=0;

  // find the start of the include file name
  while (i<inc.length() &&
         (inc.at(i)==' ' || inc.at(i)=='"' || inc.at(i)=='<')
        ) i++;
  uint s=i;

  // was it a local include?
  bool localInclude = s>0 && inc.at(s-1)=='"';

  // find the end of the include file name
  while (i<inc.length() && inc.at(i)!='"' && inc.at(i)!='>') i++;

  if (s<inc.length() && i>s) // valid include file name found
  {
    // extract include path+name
    QCString incFileName=inc.mid(s,i-s).stripWhiteSpace();

    QCString dosExt = incFileName.right(4);
    if (dosExt==".exe" || dosExt==".dll" || dosExt==".tlb")
    {
      // skip imported binary files (e.g. M$ type libraries)
      return;
    }

    QCString oldFileName = g_yyFileName;
    FileDef *oldFileDef  = g_yyFileDef;
    int oldLineNr        = g_yyLineNr;
    //printf("Searching for `%s'\n",incFileName.data());

    // absIncFileName avoids difficulties for incFileName starting with "../" (bug 641336)
    QCString absIncFileName = incFileName;
    {
      static bool searchIncludes = Config_getBool("SEARCH_INCLUDES");
      QFileInfo fi(g_yyFileName);
      if (fi.exists())
      {
	QCString absName = QCString(fi.dirPath(TRUE).data())+"/"+incFileName;
        QFileInfo fi2(absName);
        if (fi2.exists())
        {
	  absIncFileName=fi2.absFilePath();
	}
	else if (searchIncludes) // search in INCLUDE_PATH as well
	{
	  QStrList &includePath = Config_getList("INCLUDE_PATH");
	  char *s=includePath.first();
	  while (s)
	  {
	    QFileInfo fi(s);
	    if (fi.exists() && fi.isDir())
	    {
	      QCString absName = QCString(fi.absFilePath())+"/"+incFileName;
	      //printf("trying absName=%s\n",absName.data());
	      QFileInfo fi2(absName);
	      if (fi2.exists())
	      {
		absIncFileName=fi2.absFilePath();
		break;
	      }
	      //printf( "absIncFileName = %s\n", absIncFileName.data() );
	    }
	    s=includePath.next();
	  }
	}
	//printf( "absIncFileName = %s\n", absIncFileName.data() );
      }
    }
    DefineManager::instance().addInclude(g_yyFileName,absIncFileName);
    DefineManager::instance().addFileToContext(absIncFileName);

    // findFile will overwrite g_yyFileDef if found
    FileState *fs;
    bool alreadyIncluded = FALSE;
    //printf("calling findFile(%s)\n",incFileName.data());
    if ((fs=findFile(incFileName,localInclude,alreadyIncluded))) // see if the include file can be found
    {
      //printf("Found include file!\n");
      if (Debug::isFlagSet(Debug::Preprocessor))
      {
        for (i=0;i<g_includeStack.count();i++) 
        {
          Debug::print(Debug::Preprocessor,0,"  ");
        }
        //msg("#include %s: parsing...\n",incFileName.data());
      }
      if (oldFileDef)
      {
        // add include dependency to the file in which the #include was found
	bool ambig;
	// change to absolute name for bug 641336 
        FileDef *incFd = findFileDef(Doxygen::inputNameDict,absIncFileName,ambig);
        oldFileDef->addIncludeDependency(ambig ? 0 : incFd,incFileName,localInclude,g_isImported,FALSE);
        // add included by dependency
        if (g_yyFileDef)
        {
          //printf("Adding include dependency %s->%s\n",oldFileDef->name().data(),incFileName.data());
          g_yyFileDef->addIncludedByDependency(oldFileDef,oldFileDef->docName(),localInclude,g_isImported);
        }
      }
      else if (g_inputFileDef)
      {
        g_inputFileDef->addIncludeDependency(0,absIncFileName,localInclude,g_isImported,TRUE);
      }
      fs->bufState = YY_CURRENT_BUFFER;
      fs->lineNr   = oldLineNr;
      fs->fileName = oldFileName;
      // push the state on the stack
      g_includeStack.push(fs);
      // set the scanner to the include file

      // Deal with file changes due to 
      // #include's within { .. } blocks
      QCString lineStr(g_yyFileName.length()+20);
      lineStr.sprintf("# 1 \"%s\" 1\n",g_yyFileName.data());
      outputArray(lineStr.data(),lineStr.length());

      //fprintf(stderr,"Switching to include file %s\n",incFileName.data());
      g_expectGuard=TRUE;
      g_inputBuf   = &fs->fileBuf;
      g_inputBufPos=0;
      preYY_switch_to_buffer(preYY_create_buffer(0,YY_BUF_SIZE));
    }
    else
    {
      //printf("  calling findFile(%s) alreadyInc=%d\n",incFileName.data(),alreadyIncluded);
      if (oldFileDef)
      {
	bool ambig;
	//QCString absPath = incFileName;
	//if (QDir::isRelativePath(incFileName))
	//{
	//  absPath = QDir::cleanDirPath(oldFileDef->getPath()+"/"+incFileName);
	//  //printf("%s + %s -> resolved path %s\n",oldFileDef->getPath().data(),incFileName.data(),absPath.data());
	//}

	// change to absolute name for bug 641336 
	FileDef *fd = findFileDef(Doxygen::inputNameDict,absIncFileName,ambig);
	//printf("%s::findFileDef(%s)=%p\n",oldFileDef->name().data(),incFileName.data(),fd);
	// add include dependency to the file in which the #include was found
	oldFileDef->addIncludeDependency(ambig ? 0 : fd,incFileName,localInclude,g_isImported,FALSE);
	// add included by dependency
        if (fd)
        {
          //printf("Adding include dependency (2) %s->%s ambig=%d\n",oldFileDef->name().data(),fd->name().data(),ambig);
          fd->addIncludedByDependency(oldFileDef,oldFileDef->docName(),localInclude,g_isImported);
        }
      }
      else if (g_inputFileDef)
      {
        g_inputFileDef->addIncludeDependency(0,absIncFileName,localInclude,g_isImported,TRUE);
      }
      if (Debug::isFlagSet(Debug::Preprocessor))
      {
	if (alreadyIncluded)
	{
          Debug::print(Debug::Preprocessor,0,"#include %s: already included! skipping...\n",incFileName.data());
	}
	else
	{
          Debug::print(Debug::Preprocessor,0,"#include %s: not found! skipping...\n",incFileName.data());
	}
        //printf("error: include file %s not found\n",preYYtext);
      }
      if (g_curlyCount>0 && !alreadyIncluded) // failed to find #include inside { ... }
      {
	warn(g_yyFileName,g_yyLineNr,"Warning: include file %s not found, perhaps you forgot to add its directory to INCLUDE_PATH?",incFileName.data());
      }
    }
  }
}

/* ----------------------------------------------------------------- */

static void startCondSection(const char *sectId)
{
  g_condStack.push(new bool(g_skip));
  if (Config_getList("ENABLED_SECTIONS").find(sectId)==-1)
  {
    g_skip=TRUE;
  }
}

static void endCondSection()
{
  if (g_condStack.isEmpty())
  {
    g_skip=FALSE;
  }
  else
  {
    bool *ctx = g_condStack.pop();
    g_skip=*ctx;
  }
}

static void forceEndCondSection()
{
  while (!g_condStack.isEmpty())
  {
    g_condStack.pop();
  }
  g_skip=FALSE;
}

static QCString escapeAt(const char *text)
{
  QCString result;
  if (text)
  {
    char c;
    const char *p=text;
    while ((c=*p++))
    {
      if (c=='@') result+="@@"; else result+=c;
    }
  }
  return result;
}

static char resolveTrigraph(char c)
{
  switch (c)
  {
    case '=': return '#';
    case '/': return '\\';
    case '\'': return '^';
    case '(': return '[';
    case ')': return ']';
    case '!': return '|';
    case '<': return '{';
    case '>': return '}';
    case '-': return '~';
  }
  return '?';
}

/* ----------------------------------------------------------------- */

#undef  YY_INPUT
#define YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
  int bytesInBuf = g_inputBuf->curPos()-g_inputBufPos;
  int bytesToCopy = QMIN(max_size,bytesInBuf);
  memcpy(buf,g_inputBuf->data()+g_inputBufPos,bytesToCopy);
  g_inputBufPos+=bytesToCopy;
  return bytesToCopy;
}

/* ----------------------------------------------------------------- */

































#line 4014 "<stdout>"

#define INITIAL 0
#define Start 1
#define Command 2
#define SkipCommand 3
#define SkipLine 4
#define SkipString 5
#define CopyLine 6
#define CopyString 7
#define Include 8
#define IncludeID 9
#define EndImport 10
#define DefName 11
#define DefineArg 12
#define DefineText 13
#define SkipCPPBlock 14
#define Ifdef 15
#define Ifndef 16
#define SkipCComment 17
#define CopyCComment 18
#define SkipVerbatim 19
#define SkipCPPComment 20
#define RemoveCComment 21
#define RemoveCPPComment 22
#define Guard 23
#define DefinedExpr1 24
#define DefinedExpr2 25
#define SkipDoubleQuote 26
#define SkipSingleQuote 27
#define UndefName 28
#define IgnoreLine 29
#define FindDefineArgs 30
#define ReadString 31
#define CondLine 32

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int preYYlex_destroy (void );

int preYYget_debug (void );

void preYYset_debug (int debug_flag  );

YY_EXTRA_TYPE preYYget_extra (void );

void preYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *preYYget_in (void );

void preYYset_in  (FILE * in_str  );

FILE *preYYget_out (void );

void preYYset_out  (FILE * out_str  );

yy_size_t preYYget_leng (void );

char *preYYget_text (void );

int preYYget_lineno (void );

void preYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int preYYwrap (void );
#else
extern int preYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 262144
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( preYYtext, preYYleng, 1, preYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( preYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( preYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, preYYin))==0 && ferror(preYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(preYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int preYYlex (void);

#define YY_DECL int preYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after preYYtext and preYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( preYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(preYYtext[preYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 1772 "pre.l"


#line 4234 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)preYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in preYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! preYYin )
			preYYin = stdin;

		if ( ! preYYout )
			preYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			preYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				preYY_create_buffer(preYYin,YY_BUF_SIZE );
		}

		preYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of preYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1161 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5500 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 1774 "pre.l"

	YY_BREAK
case 2:
YY_RULE_SETUP
#line 1775 "pre.l"

	YY_BREAK
case 3:
YY_RULE_SETUP
#line 1776 "pre.l"

	YY_BREAK
case 4:
YY_RULE_SETUP
#line 1777 "pre.l"
{ // Trigraph
  					  unput(resolveTrigraph(preYYtext[2]));
  					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 1780 "pre.l"
{ BEGIN(Command); }
	YY_BREAK
case 6:
/* rule 6 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1781 "pre.l"
{
 					  outputArray(preYYtext,preYYleng); 
  					  BEGIN(CopyLine); 
					}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 1785 "pre.l"
{ // constructors?
					  int i;
					  for (i=preYYleng-1;i>=0;i--)
					  {
					    unput(preYYtext[i]);
					  }
					  BEGIN(CopyLine);
                                        }
	YY_BREAK
case 8:
/* rule 8 can match eol */
#line 1794 "pre.l"
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 1794 "pre.l"
{ // function like macro
  					  static bool skipFuncMacros = Config_getBool("SKIP_FUNCTION_MACROS");
					  QCString name(preYYtext);
					  name=name.left(name.find('(')).stripWhiteSpace();

					  Define *def=0;
					  if (skipFuncMacros && 
					      name!="Q_PROPERTY" &&
					      !(
					         (g_includeStack.isEmpty() || g_curlyCount>0) &&
					         g_macroExpansion &&
					         (def=DefineManager::instance().isDefined(name)) &&
						 /*macroIsAccessible(def) &&*/
					         (!g_expandOnlyPredef || def->isPredefined)
					       )
					     )
					  {
					    outputChar('\n');
					    g_yyLineNr++;
					  }
					  else // don't skip
					  {
					    int i;
					    for (i=preYYleng-1;i>=0;i--)
					    {
					      unput(preYYtext[i]);
					    }
					    BEGIN(CopyLine);
					  }
  					}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 1824 "pre.l"
{
                                          QCString text=preYYtext;
  					  g_yyLineNr+=text.contains('\n');
					  outputArray(preYYtext,preYYleng);
  					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 1829 "pre.l"
{ // count brackets inside the main file
  					  if (g_includeStack.isEmpty()) 
					  {
					    g_curlyCount++;
					  }
					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 1836 "pre.l"
{ // count brackets inside the main file
  					  if (g_includeStack.isEmpty() && g_curlyCount>0) 
					  {
					    g_curlyCount--;
					  }
					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 1843 "pre.l"
{ 
  					  outputArray(preYYtext,preYYleng);
					}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 1846 "pre.l"
{ 
  					  outputArray(preYYtext,preYYleng);
					}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 1849 "pre.l"
{ 
  					  outputArray(preYYtext,preYYleng);
					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 1852 "pre.l"
{
					  outputChar(*preYYtext);
					  BEGIN( CopyString );
					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 1856 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
					}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 1859 "pre.l"
{
					  outputArray(preYYtext,preYYleng);
					}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 1862 "pre.l"
{
					  outputChar(*preYYtext);
					  BEGIN( CopyLine );
					}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 1866 "pre.l"
{
  					  g_expectGuard = FALSE;
  					  Define *def=0;
					  //def=g_globalDefineDict->find(preYYtext);
					  //def=DefineManager::instance().isDefined(preYYtext);
					  //printf("Search for define %s found=%d g_includeStack.isEmpty()=%d "
					  //       "g_curlyCount=%d g_macroExpansion=%d g_expandOnlyPredef=%d "
					  //	 "isPreDefined=%d\n",preYYtext,def ? 1 : 0,
					  //	 g_includeStack.isEmpty(),g_curlyCount,g_macroExpansion,g_expandOnlyPredef,
					  //	 def ? def->isPredefined : -1
					  //	);
					  if ((g_includeStack.isEmpty() || g_curlyCount>0) &&
					      g_macroExpansion &&
					      (def=DefineManager::instance().isDefined(preYYtext)) &&
				              /*(def->isPredefined || macroIsAccessible(def)) && */
					      (!g_expandOnlyPredef || def->isPredefined)
					     )
					  {
					    //printf("Found it! #args=%d\n",def->nargs);
					    g_roundCount=0;
					    g_defArgsStr=preYYtext;
					    if (def->nargs==-1) // no function macro
					    {
					      QCString result = def->isPredefined ? def->definition : expandMacro(g_defArgsStr);
					      outputArray(result,result.length());
					    }
					    else // zero or more arguments
					    {
					      g_findDefArgContext = CopyLine;
					      BEGIN(FindDefineArgs);
					    }
					  }
					  else
					  {
					    outputArray(preYYtext,preYYleng);
					  }
  					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 1903 "pre.l"
{
                                          Define *def=0;
  					  if ((g_includeStack.isEmpty() || g_curlyCount>0) && 
					      g_macroExpansion &&
					      (def=DefineManager::instance().isDefined(preYYtext)) &&
					      def->nargs==-1 &&
				              /*(def->isPredefined || macroIsAccessible(def)) &&*/
					      (!g_expandOnlyPredef || def->isPredefined)
					     )
					  {
					    QCString result=def->isPredefined ? def->definition : expandMacro(preYYtext); 
					    outputArray(result,result.length());
					  }
					  else
					  {
					    outputArray(preYYtext,preYYleng);
					  }
  					}
	YY_BREAK
case 22:
/* rule 22 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1921 "pre.l"
{ // strip line continuation characters
  					}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 1923 "pre.l"
{
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 1926 "pre.l"
{
  					  outputChar('\n');
					  BEGIN(Start);
					  g_yyLineNr++;
  					}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 1931 "pre.l"
{
  					  g_defArgsStr+='(';
  					  g_roundCount++;
  					}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 1935 "pre.l"
{
  					  g_defArgsStr+=')';
					  g_roundCount--;
					  if (g_roundCount==0)
					  {
					    QCString result=expandMacro(g_defArgsStr);
					    //printf("g_defArgsStr=`%s'->`%s'\n",g_defArgsStr.data(),result.data());
					    if (g_findDefArgContext==CopyLine)
					    {
					      outputArray(result,result.length());
					      BEGIN(g_findDefArgContext);
					    }
					    else // g_findDefArgContext==IncludeID
					    {
					      readIncludeFile(result);
					      g_nospaces=FALSE;
					      BEGIN(Start);
					    }
					  }
  					}
	YY_BREAK
/*
<FindDefineArgs>")"{B}*"("		{
  					  g_defArgsStr+=preYYtext;
  					}
  */
case 27:
YY_RULE_SETUP
#line 1960 "pre.l"
{
  					  g_defArgsStr+=preYYtext;
  					}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 1963 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
  					  BEGIN(ReadString);
  					}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 1967 "pre.l"
{
  					  g_yyLineNr++;
					  outputChar('\n');
  					}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 1971 "pre.l"
{
  					  g_defArgsStr+="@@";
  					}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 1974 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
  					}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 1977 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
					  BEGIN(FindDefineArgs);
  					}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 1981 "pre.l"
{
  					  g_defArgsStr+=preYYtext;
  					}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 1984 "pre.l"
{
  					  g_defArgsStr+=preYYtext;
  					}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 1987 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
  					}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 1990 "pre.l"
{
  					  g_isImported = preYYtext[1]=='m';
  					  if (g_macroExpansion) 
					    BEGIN(IncludeID);
  					}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 1995 "pre.l"
{ 
  					  g_isImported = preYYtext[1]=='m';
					  char c[2];
					  c[0]=preYYtext[preYYleng-1];c[1]='\0';
					  g_incName=c;
  					  BEGIN(Include); 
					}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 2002 "pre.l"
{ 
  			                  //printf("!!!DefName\n"); 
  					  BEGIN(DefName); 
					}
	YY_BREAK
case 39:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2006 "pre.l"
{
  					  incrLevel();
					  g_guardExpr.resize(0);
  					  BEGIN(DefinedExpr2);
  					}
	YY_BREAK
case 40:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2011 "pre.l"
{
  					  //printf("Pre.l: ifdef\n");
  					  incrLevel();
					  g_guardExpr.resize(0);
  					  BEGIN(DefinedExpr1);
  					}
	YY_BREAK
case 41:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2017 "pre.l"
{
  					  incrLevel();
					  g_guardExpr="! ";
  					  BEGIN(DefinedExpr2);
					}
	YY_BREAK
case 42:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2022 "pre.l"
{
  					  incrLevel();
					  g_guardExpr="! ";
  					  BEGIN(DefinedExpr1);
  					}
	YY_BREAK
case 43:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2027 "pre.l"
{
  					  incrLevel();
					  g_guardExpr.resize(0);
					  BEGIN(Guard);
					}
	YY_BREAK
case 44:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2032 "pre.l"
{
  					  if (!otherCaseDone())
					  {
					    g_guardExpr.resize(0);
					    BEGIN(Guard);  
					  }
					  else
					  {
					    g_ifcount=0;
					    BEGIN(SkipCPPBlock);
					  }
  					}
	YY_BREAK
case 45:
/* rule 45 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2044 "pre.l"
{
					  //printf("else g_levelGuard[%d]=%d\n",g_level-1,g_levelGuard[g_level-1]);
  					  if (otherCaseDone())
					  {
					    g_ifcount=0;
					    BEGIN(SkipCPPBlock);
					  }
					  else
					  {
					    setCaseDone(TRUE);
					    //g_levelGuard[g_level-1]=TRUE;
					  } 
  					}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 2057 "pre.l"
{
  					  BEGIN(UndefName);
  					}
	YY_BREAK
case 47:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2060 "pre.l"
{
  					  if (!otherCaseDone())
					  {
					    g_guardExpr.resize(0);
  					    BEGIN(Guard);
					  }
  					}
	YY_BREAK
case 48:
/* rule 48 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2067 "pre.l"
{
  					  //printf("Pre.l: #endif\n");
  					  decrLevel();
  					}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 2071 "pre.l"
{
  					  outputChar('\n');
  					  BEGIN(Start);
					  g_yyLineNr++;
  					}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 2076 "pre.l"
{ // unknown directive
					  BEGIN(IgnoreLine);
					}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 2079 "pre.l"
{
  					  outputChar('\n');
					  g_yyLineNr++;
					}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 2083 "pre.l"

	YY_BREAK
case 53:
YY_RULE_SETUP
#line 2084 "pre.l"

	YY_BREAK
case 54:
YY_RULE_SETUP
#line 2085 "pre.l"
{
  					  Define *def;
  					  if ((def=DefineManager::instance().isDefined(preYYtext)) 
					      /*&& !def->isPredefined*/
					      && !def->nonRecursive
					     )
					  {
					    //printf("undefining %s\n",preYYtext);
					    def->undef=TRUE;
					  }
					  BEGIN(Start);
  					}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 2097 "pre.l"
{
  					  outputChar('\n');
  					  g_guardExpr+=' ';
					  g_yyLineNr++;
  					}
	YY_BREAK
case 56:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2102 "pre.l"
{
    					  BEGIN(DefinedExpr2);
    					}
	YY_BREAK
case 57:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2105 "pre.l"
{
    					  BEGIN(DefinedExpr1);
    					}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 2108 "pre.l"
{ g_guardExpr+=preYYtext; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 2109 "pre.l"
{ g_guardExpr+=*preYYtext; }
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 2110 "pre.l"
{
  					  unput(*preYYtext);
  					  //printf("Guard: `%s'\n",
					  //    g_guardExpr.data());
					  bool guard=computeExpression(g_guardExpr);
					  setCaseDone(guard);
					  //printf("if g_levelGuard[%d]=%d\n",g_level-1,g_levelGuard[g_level-1]);
					  if (guard)
					  {
					    BEGIN(Start);
					  } 
					  else
					  {
					    g_ifcount=0;
					    BEGIN(SkipCPPBlock);
					  }
  					}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 2127 "pre.l"
{ g_yyLineNr++; outputChar('\n'); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 2128 "pre.l"
{
  					  if (DefineManager::instance().isDefined(preYYtext) || g_guardName==preYYtext)
					    g_guardExpr+=" 1L ";
					  else
					    g_guardExpr+=" 0L ";
					  g_lastGuardName=preYYtext;
					  BEGIN(Guard);
  					}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 2136 "pre.l"
{
  					  if (DefineManager::instance().isDefined(preYYtext) || g_guardName==preYYtext)
					    g_guardExpr+=" 1L ";
					  else
					    g_guardExpr+=" 0L ";
					  g_lastGuardName=preYYtext;
  					}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 2143 "pre.l"
{ // should not happen, handle anyway
                                          g_yyLineNr++;
  					  g_ifcount=0;
 					  BEGIN(SkipCPPBlock); 
					}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 2148 "pre.l"
{
  					  BEGIN(Guard);
  					}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 2151 "pre.l"

	YY_BREAK
case 67:
YY_RULE_SETUP
#line 2152 "pre.l"
{ BEGIN(SkipCommand); }
	YY_BREAK
case 68:
/* rule 68 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2153 "pre.l"
{ BEGIN(SkipLine); }
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 2154 "pre.l"
{ g_yyLineNr++; outputChar('\n'); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 2155 "pre.l"

	YY_BREAK
case 71:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2156 "pre.l"
{ 
  					  incrLevel();
                                          g_ifcount++; 
  					  //printf("#if... depth=%d\n",g_ifcount);
					}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 2161 "pre.l"
{
					  //printf("Else! g_ifcount=%d otherCaseDone=%d\n",g_ifcount,otherCaseDone());
  					  if (g_ifcount==0 && !otherCaseDone())
					  {
					    setCaseDone(TRUE);
  					    //outputChar('\n');
					    BEGIN(Start);
					  }
  					}
	YY_BREAK
case 73:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2170 "pre.l"
{
  					  if (g_ifcount==0) 
					  {
  					    if (!otherCaseDone())
					    {
					      g_guardExpr.resize(0);
					      g_lastGuardName.resize(0);
  					      BEGIN(Guard);
					    }
					    else
					    {
					      BEGIN(SkipCPPBlock);
					    }
					  }
					}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 2185 "pre.l"
{ 
					  g_expectGuard = FALSE;
  					  decrLevel();
  				          if (--g_ifcount<0)
  					  {
  					    //outputChar('\n');
					    BEGIN(Start);
					  }
					}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 2194 "pre.l"
{ 
  					  outputChar('\n');
  					  g_yyLineNr++; 
					  BEGIN(SkipCPPBlock);
					}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 2199 "pre.l"
{ // unknown directive 
  					  BEGIN(SkipLine); 
					}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 2202 "pre.l"

	YY_BREAK
case 78:
YY_RULE_SETUP
#line 2203 "pre.l"

	YY_BREAK
case 79:
YY_RULE_SETUP
#line 2204 "pre.l"
{ }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 2205 "pre.l"
{
					  BEGIN(SkipString);
					}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 2208 "pre.l"

	YY_BREAK
case 82:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2209 "pre.l"
{ 
                                        }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 2211 "pre.l"
{
  					  g_lastCPPContext=YY_START;
  					  BEGIN(RemoveCPPComment);
					}
	YY_BREAK
case 84:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2215 "pre.l"
{ 
                                        }
	YY_BREAK
case 85:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2217 "pre.l"
{
					  g_lastCContext=YY_START;
  					  BEGIN(RemoveCComment);
  					}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 2221 "pre.l"
{
  					  outputChar('\n');
					  g_yyLineNr++;  
					  BEGIN(SkipCPPBlock);
					}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 2226 "pre.l"
{ }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 2227 "pre.l"
{ }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 2228 "pre.l"
{
  					  BEGIN(SkipLine);
  					}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 2231 "pre.l"
{ }
	YY_BREAK
case 91:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2232 "pre.l"
{
  					  g_nospaces=TRUE;
				          g_roundCount=0;
					  g_defArgsStr=preYYtext;
					  g_findDefArgContext = IncludeID;
					  BEGIN(FindDefineArgs);
					}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 2239 "pre.l"
{
  					  g_nospaces=TRUE;
                                          readIncludeFile(expandMacro(preYYtext));
					  BEGIN(Start);
  					}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 2244 "pre.l"
{ 
					  g_incName+=preYYtext;
					  readIncludeFile(g_incName);
					  if (g_isImported)
					  {
					    BEGIN(EndImport);
					  }
					  else
					  {
					    BEGIN(Start);
					  }
  					}
	YY_BREAK
case 94:
/* rule 94 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2256 "pre.l"
{
  					  BEGIN(Start);
  					}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 2259 "pre.l"
{ 
					  outputChar('\n');
					  g_yyLineNr++;
					}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 2263 "pre.l"
{
  					}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 2265 "pre.l"
{ // define with argument
  					  //printf("Define() `%s'\n",preYYtext);
					  g_argDict = new QDict<int>(31);
					  g_argDict->setAutoDelete(TRUE);
					  g_defArgs = 0; 
                                          g_defArgsStr.resize(0);
					  g_defText.resize(0);
					  g_defLitText.resize(0);
					  g_defName = preYYtext;
					  g_defVarArgs = FALSE;
					  g_defExtraSpacing.resize(0);
					  BEGIN(DefineArg);
  					}
	YY_BREAK
case 98:
/* rule 98 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2278 "pre.l"
{ // special case: define with 1 -> can be "guard"
  					  //printf("Define `%s'\n",preYYtext);
  					  g_argDict = 0;
					  g_defArgs = -1;
                                          g_defArgsStr.resize(0);
					  g_defName = preYYtext;
					  g_defName = g_defName.left(g_defName.length()-1).stripWhiteSpace();
					  g_defVarArgs = FALSE;
					  //printf("Guard check: %s!=%s || %d\n",
					  //    g_defName.data(),g_lastGuardName.data(),g_expectGuard);
					  if ( g_defName!=g_lastGuardName || !g_expectGuard)
					  { // define may appear in the output
					    QCString tmp=(QCString)"#define "+g_defName;
					    outputArray(tmp.data(),tmp.length());
					    g_quoteArg=FALSE;
					    g_insideComment=FALSE;
					    g_lastGuardName.resize(0);
				            g_defText="1"; 
					    g_defLitText="1"; 
					    BEGIN(DefineText); 
					  }
					  else // define is a guard => hide
					  {
					    //printf("Found a guard %s\n",preYYtext);
					    g_defText.resize(0);
					    g_defLitText.resize(0);
					    BEGIN(Start);
					  }
					  g_expectGuard=FALSE;
  					}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 2308 "pre.l"
{ // empty define
  					  g_argDict = 0;
					  g_defArgs = -1;
					  g_defName = preYYtext;
                                          g_defArgsStr.resize(0);
					  g_defText.resize(0);
					  g_defLitText.resize(0);
					  g_defVarArgs = FALSE;
					  //printf("Guard check: %s!=%s || %d\n",
					  //    g_defName.data(),g_lastGuardName.data(),g_expectGuard);
					  if ( g_defName!=g_lastGuardName || !g_expectGuard)
					  { // define may appear in the output
					    QCString tmp=(QCString)"#define "+g_defName;
					    outputArray(tmp.data(),tmp.length());
					    g_quoteArg=FALSE;
					    g_insideComment=FALSE;
					    if (g_insideCS) g_defText="1"; // for C#, use "1" as define text
					    BEGIN(DefineText);
					  }
					  else // define is a guard => hide
					  {
					    //printf("Found a guard %s\n",preYYtext);
					    g_guardName = preYYtext;
					    g_lastGuardName.resize(0);
					    BEGIN(Start);
					  }
					  g_expectGuard=FALSE;
  					}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 2336 "pre.l"
{ // define with content
  					  //printf("Define `%s'\n",preYYtext);
  					  g_argDict = 0;
					  g_defArgs = -1;
                                          g_defArgsStr.resize(0);
					  g_defText.resize(0);
					  g_defLitText.resize(0);
					  g_defName = preYYtext;
					  g_defVarArgs = FALSE;
					  QCString tmp=(QCString)"#define "+g_defName+g_defArgsStr;
					  outputArray(tmp.data(),tmp.length());
					  g_quoteArg=FALSE;
					  g_insideComment=FALSE;
					  BEGIN(DefineText); 
  					}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 2351 "pre.l"
{
  					  g_defExtraSpacing+="\n";
					  g_yyLineNr++;
                                        }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 2355 "pre.l"
{ g_defArgsStr+=preYYtext; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 2356 "pre.l"
{ g_defArgsStr+=preYYtext; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 2357 "pre.l"
{
                                          g_defArgsStr+=preYYtext; 
					  QCString tmp=(QCString)"#define "+g_defName+g_defArgsStr+g_defExtraSpacing;
					  outputArray(tmp.data(),tmp.length());
					  g_quoteArg=FALSE;
					  g_insideComment=FALSE;
  					  BEGIN(DefineText);
  					}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 2365 "pre.l"
{ // Variadic macro
					  g_defVarArgs = TRUE;
					  g_defArgsStr+=preYYtext;
					  g_argDict->insert("__VA_ARGS__",new int(g_defArgs));
					  g_defArgs++;
  					}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 2371 "pre.l"
{
  					  //printf("Define addArg(%s)\n",preYYtext);
  					  QCString argName=preYYtext;
  					  g_defVarArgs = preYYtext[preYYleng-1]=='.';
					  if (g_defVarArgs) // strip ellipsis
					  {
					    argName=argName.left(argName.length()-3);
					  }
					  argName = argName.stripWhiteSpace();
                                          g_defArgsStr+=preYYtext;
					  g_argDict->insert(argName,new int(g_defArgs)); 
					  g_defArgs++;
  					}
	YY_BREAK
/*
<DefineText>"/ **"|"/ *!"			{
  					  g_defText+=preYYtext;
					  g_defLitText+=preYYtext;
					  g_insideComment=TRUE;
  					}
<DefineText>"* /"			{
  					  g_defText+=preYYtext;
					  g_defLitText+=preYYtext;
					  g_insideComment=FALSE;
  					}
  */
case 107:
YY_RULE_SETUP
#line 2396 "pre.l"
{
					  g_defText+=preYYtext;
					  g_defLitText+=preYYtext;
					  g_lastCContext=YY_START;
					  g_commentCount=1;
  					  BEGIN(CopyCComment);
  					}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 2403 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					  g_lastCPPContext=YY_START;
					  g_defLitText+=' ';
  					  BEGIN(SkipCPPComment);
  					}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 2409 "pre.l"
{
  					  if (preYYtext[0]=='/') outputChar('/');
  					  outputChar('*');outputChar('/');
					  if (--g_commentCount<=0)
					  {
					    if (g_lastCContext==Start) 
					      // small hack to make sure that ^... rule will
					      // match when going to Start... Example: "/*...*/ some stuff..."
					    {
					      YY_CURRENT_BUFFER->yy_at_bol=1;
					    }
  					    BEGIN(g_lastCContext);  
					  }
  					}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 2423 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 2426 "pre.l"
{
  					  outputChar('/');outputChar('*');
					  //g_commentCount++;
  					}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 2430 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 2433 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					  g_yyLineNr+=QCString(preYYtext).contains('\n');
  					}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 2437 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					  g_yyLineNr+=QCString(preYYtext).contains('\n');
					  if (preYYtext[1]=='f')
					  {
					    g_blockName="f";
					  }
					  else
					  {
					    g_blockName=QCString(&preYYtext[1]).stripWhiteSpace();
					  }
					  BEGIN(SkipVerbatim);
  					}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 2450 "pre.l"
{ // conditional section
  					  g_condCtx = YY_START;
  					  outputArray(preYYtext,preYYleng);
  					  BEGIN(CondLine);
  					}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 2455 "pre.l"
{
  				          startCondSection(preYYtext);
  					  outputArray(preYYtext,preYYleng);
  					  BEGIN(g_condCtx);
  					}
	YY_BREAK
case 117:
/* rule 117 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2460 "pre.l"
{
  					  g_condCtx = YY_START;
  					  outputArray(preYYtext,preYYleng);
  					}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 2464 "pre.l"
{
  					  unput(*preYYtext);
  					  startCondSection(" ");
					  BEGIN(g_condCtx);
  					}
	YY_BREAK
case 119:
/* rule 119 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2469 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					  endCondSection();
  					}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 2473 "pre.l"
{ /* end of verbatim block */
  					  outputArray(preYYtext,preYYleng);
					  if (preYYtext[1]=='f' && g_blockName=="f")
					  {
					    BEGIN(SkipCComment);
					  }
					  else if (&preYYtext[4]==g_blockName)
					  {
					    BEGIN(SkipCComment);
					  }
  					}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 2484 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 2487 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 2490 "pre.l"
{ 
  					  g_yyLineNr++;
  					  outputChar('\n');
  					}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 2494 "pre.l"
{
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 2497 "pre.l"
{
					  g_defLitText+=preYYtext;
					  g_defText+=escapeAt(preYYtext);
  					}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 2501 "pre.l"
{
					  g_defLitText+=preYYtext;
					  g_defText+=preYYtext;
  					  BEGIN(g_lastCContext);
  					}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 2506 "pre.l"
{ 
  					  g_yyLineNr++;
					  g_defLitText+=preYYtext;
					  g_defText+=' ';
  					}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 2511 "pre.l"
{ // see bug 594021 for a usecase for this rule
                                          if (g_lastCContext==SkipCPPBlock)
					  {
					    BEGIN(SkipCommand);
					  }
					  else
					  {
					    REJECT;
					  }
					}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 2521 "pre.l"
{ BEGIN(g_lastCContext); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 2522 "pre.l"

	YY_BREAK
case 131:
YY_RULE_SETUP
#line 2523 "pre.l"

	YY_BREAK
case 132:
YY_RULE_SETUP
#line 2524 "pre.l"

	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 2525 "pre.l"
{ g_yyLineNr++; outputChar('\n'); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 2526 "pre.l"

	YY_BREAK
case 135:
YY_RULE_SETUP
#line 2527 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 2530 "pre.l"
{
  					  unput(*preYYtext);
  					  BEGIN(g_lastCPPContext);
  					}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 2534 "pre.l"
{
  					  outputChar('/');outputChar('*');
  					}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 2537 "pre.l"
{
  					  outputChar('/');outputChar('/');
  					}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 2540 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 2543 "pre.l"
{
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 2546 "pre.l"

	YY_BREAK
case 142:
YY_RULE_SETUP
#line 2547 "pre.l"

	YY_BREAK
case 143:
YY_RULE_SETUP
#line 2548 "pre.l"

	YY_BREAK
case 144:
YY_RULE_SETUP
#line 2549 "pre.l"

	YY_BREAK
case 145:
YY_RULE_SETUP
#line 2550 "pre.l"
{
  					  g_quoteArg=TRUE;
					  g_defLitText+=preYYtext;
  					}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 2554 "pre.l"
{
					  g_defLitText+=preYYtext;
  					  if (g_quoteArg)
					  {
					    g_defText+="\"";
					  }
					  if (g_defArgs>0)
					  {
					    int *n;
					    if ((n=(*g_argDict)[preYYtext]))
					    {
					      //if (!g_quoteArg) g_defText+=' ';
					      g_defText+='@';
					      QCString numStr;
					      numStr.sprintf("%d",*n);
					      g_defText+=numStr;
					      //if (!g_quoteArg) g_defText+=' ';
					    }
					    else
					    {
					      g_defText+=preYYtext;
					    }
					  }
					  else
					  {
					    g_defText+=preYYtext;
					  }
					  if (g_quoteArg)
					  {
					    g_defText+="\"";
					  }
					  g_quoteArg=FALSE;
  					}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 2587 "pre.l"
{
					  g_defLitText+=preYYtext;
					  g_defText+=preYYtext;
  					}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 2591 "pre.l"
{ 
					  g_defLitText+=preYYtext;
					  outputChar('\n');
  					  g_defText += ' '; g_yyLineNr++; 
					}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 2596 "pre.l"
{
					  QCString comment=extractTrailingComment(g_defLitText);
					  g_defLitText+=preYYtext;
					  if (!comment.isEmpty())
					  {
					    outputArray(comment,comment.length());
					    g_defLitText=g_defLitText.left(g_defLitText.length()-comment.length()-1);
					  }
  					  outputChar('\n');
  					  Define *def=0;
					  //printf("Define name=`%s' text=`%s' litTexti=`%s'\n",g_defName.data(),g_defText.data(),g_defLitText.data());
					  if (g_includeStack.isEmpty() || g_curlyCount>0) 
					  {
					    addDefine();
					  }
					  def=DefineManager::instance().isDefined(g_defName);
					  if (def==0) // new define
					  {
					    //printf("new define '%s'!\n",g_defName.data());
					    Define *nd = newDefine();
					    DefineManager::instance().addDefine(g_yyFileName,nd);

					    // also add it to the local file list if it is a source file
					    //if (g_isSource && g_includeStack.isEmpty())
					    //{
					    //  g_fileDefineDict->insert(g_defName,nd);
					    //}
					  }
					  else if (def /*&& macroIsAccessible(def)*/)
					       // name already exists
					  {
					    //printf("existing define!\n");
					    //printf("define found\n");
					    if (def->undef) // undefined name
					    {
					      def->undef = FALSE;
					      def->name = g_defName;
					      def->definition = g_defText.stripWhiteSpace();
					      def->nargs = g_defArgs;
					      def->fileName = g_yyFileName.copy(); 
					      def->lineNr = g_yyLineNr;
					    }
					    else
					    {
					      //printf("error: define %s is defined more than once!\n",g_defName.data());
					    }
					  }
					  delete g_argDict; g_argDict=0;
					  g_yyLineNr++;
					  g_lastGuardName.resize(0);
					  BEGIN(Start);
  					}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 2648 "pre.l"
{ g_defText += ' '; g_defLitText+=preYYtext; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 2649 "pre.l"
{ g_defText += "##"; g_defLitText+=preYYtext; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 2650 "pre.l"
{ g_defText += "@@"; g_defLitText+=preYYtext; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 2651 "pre.l"
{ 
                                          g_defText += *preYYtext; 
  					  g_defLitText+=preYYtext; 
					  if (!g_insideComment)
					  {
					    BEGIN(SkipDoubleQuote);
					  }
  					}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 2659 "pre.l"
{ g_defText += *preYYtext;
  					  g_defLitText+=preYYtext; 
					  if (!g_insideComment)
					  {
  					    BEGIN(SkipSingleQuote);
					  }
					}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 2666 "pre.l"
{ g_defText += preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 2667 "pre.l"
{ g_defText += preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 2668 "pre.l"
{
  					  g_defText += *preYYtext; g_defLitText+=preYYtext; 
					  BEGIN(DefineText);
  					}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 2672 "pre.l"
{
  					  g_defText += preYYtext; g_defLitText+=preYYtext;
					}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 2675 "pre.l"
{
  					  g_defText += *preYYtext; g_defLitText+=preYYtext;
					  BEGIN(DefineText);
  					}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 2679 "pre.l"
{ g_defText += *preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 2680 "pre.l"
{ g_defText += *preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 2681 "pre.l"
{ g_defText += *preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Start):
case YY_STATE_EOF(Command):
case YY_STATE_EOF(SkipCommand):
case YY_STATE_EOF(SkipLine):
case YY_STATE_EOF(SkipString):
case YY_STATE_EOF(CopyLine):
case YY_STATE_EOF(CopyString):
case YY_STATE_EOF(Include):
case YY_STATE_EOF(IncludeID):
case YY_STATE_EOF(EndImport):
case YY_STATE_EOF(DefName):
case YY_STATE_EOF(DefineArg):
case YY_STATE_EOF(DefineText):
case YY_STATE_EOF(SkipCPPBlock):
case YY_STATE_EOF(Ifdef):
case YY_STATE_EOF(Ifndef):
case YY_STATE_EOF(SkipCComment):
case YY_STATE_EOF(CopyCComment):
case YY_STATE_EOF(SkipVerbatim):
case YY_STATE_EOF(SkipCPPComment):
case YY_STATE_EOF(RemoveCComment):
case YY_STATE_EOF(RemoveCPPComment):
case YY_STATE_EOF(Guard):
case YY_STATE_EOF(DefinedExpr1):
case YY_STATE_EOF(DefinedExpr2):
case YY_STATE_EOF(SkipDoubleQuote):
case YY_STATE_EOF(SkipSingleQuote):
case YY_STATE_EOF(UndefName):
case YY_STATE_EOF(IgnoreLine):
case YY_STATE_EOF(FindDefineArgs):
case YY_STATE_EOF(ReadString):
case YY_STATE_EOF(CondLine):
#line 2682 "pre.l"
{
                                          //fprintf(stderr,"End of include file\n");
					  //printf("Include stack depth=%d\n",g_includeStack.count());
  					  if (g_includeStack.isEmpty())
					  {
					    //fprintf(stderr,"Terminating scanner!\n");
					    yyterminate();
					  }
					  else
					  {
					    FileState *fs=g_includeStack.pop();
					    //fileDefineCache->merge(g_yyFileName,fs->fileName);
					    YY_BUFFER_STATE oldBuf = YY_CURRENT_BUFFER;
					    preYY_switch_to_buffer(fs->bufState );
					    preYY_delete_buffer(oldBuf );
					    g_yyLineNr    = fs->lineNr;
                                            //preYYin = fs->oldYYin;
                                            g_inputBuf    = fs->oldFileBuf;
					    g_inputBufPos = fs->oldFileBufPos;
					    setFileName(fs->fileName);
					    //fprintf(stderr,"######## FileName %s\n",g_yyFileName.data());
					    
                                            // Deal with file changes due to 
                                            // #include's within { .. } blocks
                                            QCString lineStr(15+g_yyFileName.length());
                                            lineStr.sprintf("# %d \"%s\" 2",g_yyLineNr,g_yyFileName.data());
                                            outputArray(lineStr.data(),lineStr.length());
					    
					    delete fs; fs=0;
					  }
  					}
	YY_BREAK
case 163:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
#line 2714 "pre.l"
case 164:
YY_RULE_SETUP
#line 2714 "pre.l"
{
					  outputArray(preYYtext,preYYleng);
  					  g_lastCContext=YY_START;
					  g_commentCount=1;
					  if (preYYleng==3) g_lastGuardName.resize(0); // reset guard in case the #define is documented!
					  BEGIN(SkipCComment);
  					}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 2721 "pre.l"
{
					  outputArray(preYYtext,preYYleng);
  					  g_lastCPPContext=YY_START;
					  if (preYYleng==3) g_lastGuardName.resize(0); // reset guard in case the #define is documented!
					  BEGIN(SkipCPPComment);
					}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 2727 "pre.l"
{ 
  					  outputChar('\n');
  					  g_yyLineNr++; 
					}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 2731 "pre.l"
{
  					  g_expectGuard = FALSE;
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 2736 "pre.l"
ECHO;
	YY_BREAK
#line 6127 "<stdout>"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed preYYin at a new source and called
			 * preYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = preYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( preYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * preYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of preYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			preYYrestart(preYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) preYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 56);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1161 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 56;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1161 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1160);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up preYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					preYYrestart(preYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( preYYwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve preYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void preYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        preYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            preYY_create_buffer(preYYin,YY_BUF_SIZE );
	}

	preYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	preYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void preYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		preYYpop_buffer_state();
	 *		preYYpush_buffer_state(new_buffer);
     */
	preYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	preYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (preYYwrap()) processing, but the only time this flag
	 * is looked at is after preYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void preYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	preYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE preYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) preYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	preYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with preYY_create_buffer()
 * 
 */
    void preYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		preYYfree((void *) b->yy_ch_buf  );

	preYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a preYYrestart() or at EOF.
 */
    static void preYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	preYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then preYY_init_buffer was _probably_
     * called from preYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void preYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		preYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void preYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	preYYensure_buffer_stack();

	/* This block is copied from preYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from preYY_switch_to_buffer. */
	preYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void preYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	preYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		preYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void preYYensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)preYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in preYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)preYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in preYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE preYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	preYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to preYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       preYY_scan_bytes() instead.
 */
YY_BUFFER_STATE preYY_scan_string (yyconst char * yystr )
{
    
	return preYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to preYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE preYY_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) preYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = preYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in preYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up preYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		preYYtext[preYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = preYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		preYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int preYYget_lineno  (void)
{
        
    return preYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *preYYget_in  (void)
{
        return preYYin;
}

/** Get the output stream.
 * 
 */
FILE *preYYget_out  (void)
{
        return preYYout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t preYYget_leng  (void)
{
        return preYYleng;
}

/** Get the current token.
 * 
 */

char *preYYget_text  (void)
{
        return preYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void preYYset_lineno (int  line_number )
{
    
    preYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see preYY_switch_to_buffer
 */
void preYYset_in (FILE *  in_str )
{
        preYYin = in_str ;
}

void preYYset_out (FILE *  out_str )
{
        preYYout = out_str ;
}

int preYYget_debug  (void)
{
        return preYY_flex_debug;
}

void preYYset_debug (int  bdebug )
{
        preYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from preYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    preYYin = stdin;
    preYYout = stdout;
#else
    preYYin = (FILE *) 0;
    preYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * preYYlex_init()
     */
    return 0;
}

/* preYYlex_destroy is for both reentrant and non-reentrant scanners. */
int preYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		preYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		preYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	preYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    preYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * preYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *preYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *preYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void preYYfree (void * ptr )
{
	free( (char *) ptr );	/* see preYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 2736 "pre.l"



/*@ ----------------------------------------------------------------------------
 */

static int getNextChar(const QCString &expr,QCString *rest,uint &pos)
{
  //printf("getNextChar(%s,%s,%d)\n",expr.data(),rest ? rest->data() : 0,pos);
  if (pos<expr.length())
  {
    //printf("%c=expr()\n",expr.at(pos));
    return expr.at(pos++);
  }
  else if (rest && !rest->isEmpty())
  {
    int cc=rest->at(0);
    *rest=rest->right(rest->length()-1);
    //printf("%c=rest\n",cc);
    return cc;
  }
  else
  {
    int cc=yyinput();
    //printf("%c=yyinput()\n",cc);
    return cc;
  }
}
 
static int getCurrentChar(const QCString &expr,QCString *rest,uint pos)
{
  //printf("getCurrentChar(%s,%s,%d)\n",expr.data(),rest ? rest->data() : 0,pos);
  if (pos<expr.length())
  {
    //printf("%c=expr()\n",expr.at(pos));
    return expr.at(pos);
  }
  else if (rest && !rest->isEmpty())
  {
    int cc=rest->at(0);
    //printf("%c=rest\n",cc);
    return cc;
  }
  else
  {
    int cc=yyinput();
    returnCharToStream(cc);
    //unput((char)cc);
    //printf("%c=yyinput()\n",cc);
    return cc;
  }
}

static void unputChar(const QCString &expr,QCString *rest,uint &pos,char c)
{
  //printf("unputChar(%s,%s,%d,%c)\n",expr.data(),rest ? rest->data() : 0,pos,c);
  if (pos<expr.length())
  {
    pos++;
  }
  else if (rest)
  {
    //printf("Prepending to rest!\n");
    char cs[2];cs[0]=c;cs[1]='\0';
    rest->prepend(cs);
  }
  else
  {
    //unput(c);
    returnCharToStream(c);
  }
  //printf("result: unputChar(%s,%s,%d,%c)\n",expr.data(),rest ? rest->data() : 0,pos,c);
}

void addSearchDir(const char *dir)
{
  QFileInfo fi(dir);
  if (fi.isDir()) g_pathList->append(fi.absFilePath());
} 

void initPreprocessor()
{
  g_pathList = new QStrList;
  addSearchDir(".");
  g_expandedDict = new DefineDict(17);
}

void cleanUpPreprocessor()
{
  delete g_expandedDict; g_expandedDict=0;
  delete g_pathList; g_pathList=0;
  DefineManager::deleteInstance();
}


void preprocessFile(const char *fileName,BufStr &input,BufStr &output)
{
  uint orgOffset=output.curPos();
  //printf("##########################\n%s\n####################\n",
  //    input.data());

  g_macroExpansion = Config_getBool("MACRO_EXPANSION");
  g_expandOnlyPredef = Config_getBool("EXPAND_ONLY_PREDEF");
  g_curlyCount=0;
  g_nospaces=FALSE;
  g_inputBuf=&input;
  g_inputBufPos=0;
  g_outputBuf=&output;
  g_includeStack.setAutoDelete(TRUE);
  g_includeStack.clear();
  g_expandedDict->setAutoDelete(FALSE);
  g_expandedDict->clear();
  g_condStack.clear();
  g_condStack.setAutoDelete(TRUE);
  //g_fileDefineDict->clear();

  setFileName(fileName);
  g_inputFileDef = g_yyFileDef;
  DefineManager::instance().startContext(g_yyFileName);
  
  static bool firstTime=TRUE;
  if (firstTime)
  {
    // add predefined macros
    char *defStr;
    QStrList &predefList = Config_getList("PREDEFINED");
    QStrListIterator sli(predefList);
    for (sli.toFirst();(defStr=sli.current());++sli)
    {
      QCString ds = defStr;
      int i_equals=ds.find('=');
      int i_obrace=ds.find('(');
      int i_cbrace=ds.find(')');
      bool nonRecursive = i_equals>0 && ds.at(i_equals-1)==':';

      if (i_obrace==0) continue; // no define name

      if (i_obrace<i_equals && i_cbrace<i_equals && 
	  i_obrace!=-1      && i_cbrace!=-1      && 
	  i_obrace<i_cbrace
	 ) // predefined function macro definition
      {
	//printf("predefined function macro '%s'\n",defStr);
	QRegExp reId("[a-z_A-Z][a-z_A-Z0-9]*"); // regexp matching an id
	QDict<int> argDict(17);
	argDict.setAutoDelete(TRUE);
	int i=i_obrace+1,p,l,count=0;
	// gather the formal arguments in a dictionary 
	while (i<i_cbrace && (p=reId.match(ds,i,&l)))
	{
	  argDict.insert(ds.mid(p,l),new int(count++));
	  i=p+l;
	}
	// strip definition part
	QCString tmp=ds.right(ds.length()-i_equals-1);
	QCString definition;
	i=0;
	// substitute all occurrences of formal arguments by their 
	// corresponding markers
	while ((p=reId.match(tmp,i,&l))!=-1)
	{
	  if (p>i) definition+=tmp.mid(i,p-i);
	  int *argIndex;
	  if ((argIndex=argDict[tmp.mid(p,l)])!=0)
	  {
	    QCString marker;
	    marker.sprintf(" @%d ",*argIndex);
	    definition+=marker;
	  }
	  else
	  {
	    definition+=tmp.mid(p,l);
	  }
	  i=p+l;
	}
	if (i<(int)tmp.length()) definition+=tmp.mid(i,tmp.length()-i);

	// add define definition to the dictionary of defines for this file
	QCString dname = ds.left(i_obrace);
	if (!dname.isEmpty())
	{
	  Define *def = new Define;
	  def->name         = dname;
	  def->definition   = definition; 
	  def->nargs        = count;
	  def->isPredefined = TRUE;
	  def->nonRecursive = nonRecursive;
	  def->fileDef      = g_yyFileDef;
	  def->fileName     = fileName;
	  DefineManager::instance().addDefine(g_yyFileName,def);
	}

	//printf("#define `%s' `%s' #nargs=%d\n",
	//  def->name.data(),def->definition.data(),def->nargs);
      }
      else if ((i_obrace==-1 || i_obrace>i_equals) &&
	  (i_cbrace==-1 || i_cbrace>i_equals) &&
	  !ds.isEmpty() && (int)ds.length()>i_equals
	  ) // predefined non-function macro definition
      {
	//printf("predefined normal macro '%s'\n",defStr);
	Define *def = new Define;
	if (i_equals==-1) // simple define without argument
	{
	  def->name = ds;
	  def->definition = "1"; // substitute occurrences by 1 (true)
	}
	else // simple define with argument
	{
	  int ine=i_equals - (nonRecursive ? 1 : 0);
	  def->name = ds.left(ine);
	  def->definition = ds.right(ds.length()-i_equals-1);
	}
	if (!def->name.isEmpty())
	{
	  def->nargs = -1;
	  def->isPredefined = TRUE;
	  def->nonRecursive = nonRecursive;
	  def->fileDef      = g_yyFileDef;
	  def->fileName     = fileName;
	  DefineManager::instance().addDefine(g_yyFileName,def);
	}
	else
	{
	  delete def;
	}

	//printf("#define `%s' `%s' #nargs=%d\n",
	//  def->name.data(),def->definition.data(),def->nargs);
      }
    }
    //firstTime=FALSE;
  }
 
  g_yyLineNr = 1;
  g_level    = 0;
  g_ifcount  = 0;

  BEGIN( Start );
  
  g_expectGuard = guessSection(fileName)==Entry::HEADER_SEC;
  g_guardName.resize(0);
  g_lastGuardName.resize(0);
  g_guardExpr.resize(0);
  
  preYYlex();
  g_lexInit=TRUE;

  // make sure we don't extend a \cond with missing \endcond over multiple files (see bug 624829)
  forceEndCondSection();

  // remove locally defined macros so they can be redefined in another source file
  //if (g_fileDefineDict->count()>0)
  //{
  //  QDictIterator<Define> di(*g_fileDefineDict);
  //  Define *d;
  //  for (di.toFirst();(d=di.current());++di)
  //  {
  //    g_globalDefineDict->remove(di.currentKey());
  //  }
  //  g_fileDefineDict->clear();
  //}

  if (Debug::isFlagSet(Debug::Preprocessor))
  {
    char *orgPos=output.data()+orgOffset;
    char *newPos=output.data()+output.curPos();
    Debug::print(Debug::Preprocessor,0,"Preprocessor output (size: %d bytes):\n",newPos-orgPos);
    int line=1;
    Debug::print(Debug::Preprocessor,0,"---------\n00001 ");
    while (orgPos<newPos) 
    {
      putchar(*orgPos);
      if (*orgPos=='\n') Debug::print(Debug::Preprocessor,0,"%05d ",++line);
      orgPos++;
    }
    Debug::print(Debug::Preprocessor,0,"\n---------\n");
    if (DefineManager::instance().defineContext().count()>0)
    {
      Debug::print(Debug::Preprocessor,0,"Macros accessible in this file:\n");
      Debug::print(Debug::Preprocessor,0,"---------\n");
      QDictIterator<Define> di(DefineManager::instance().defineContext());
      Define *def;
      for (di.toFirst();(def=di.current());++di)
      {
        Debug::print(Debug::Preprocessor,0,"%s ",def->name.data());
      }
      Debug::print(Debug::Preprocessor,0,"\n---------\n");
    }
    else
    {
      Debug::print(Debug::Preprocessor,0,"No macros accessible in this file.\n");
    }
  }
  DefineManager::instance().endContext();
}

void preFreeScanner()
{
#if defined(YY_FLEX_SUBMINOR_VERSION) 
  if (g_lexInit)
  {
    preYYlex_destroy();
  }
#endif
}

#if !defined(YY_FLEX_SUBMINOR_VERSION) 
extern "C" { // some bogus code to keep the compiler happy
//  int  preYYwrap() { return 1 ; }
  void preYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


