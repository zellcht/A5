
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer scanYY_create_buffer
#define yy_delete_buffer scanYY_delete_buffer
#define yy_flex_debug scanYY_flex_debug
#define yy_init_buffer scanYY_init_buffer
#define yy_flush_buffer scanYY_flush_buffer
#define yy_load_buffer_state scanYY_load_buffer_state
#define yy_switch_to_buffer scanYY_switch_to_buffer
#define yyin scanYYin
#define yyleng scanYYleng
#define yylex scanYYlex
#define yylineno scanYYlineno
#define yyout scanYYout
#define yyrestart scanYYrestart
#define yytext scanYYtext
#define yywrap scanYYwrap
#define yyalloc scanYYalloc
#define yyrealloc scanYYrealloc
#define yyfree scanYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE scanYYrestart(scanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 262144
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t scanYYleng;

extern FILE *scanYYin, *scanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up scanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up scanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via scanYYrestart()), so that the user can continue scanning by
	 * just pointing scanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when scanYYtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t scanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow scanYYwrap()'s to do buffer switches
 * instead of setting up a fresh scanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void scanYYrestart (FILE *input_file  );
void scanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE scanYY_create_buffer (FILE *file,int size  );
void scanYY_delete_buffer (YY_BUFFER_STATE b  );
void scanYY_flush_buffer (YY_BUFFER_STATE b  );
void scanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void scanYYpop_buffer_state (void );

static void scanYYensure_buffer_stack (void );
static void scanYY_load_buffer_state (void );
static void scanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER scanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE scanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE scanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE scanYY_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *scanYYalloc (yy_size_t  );
void *scanYYrealloc (void *,yy_size_t  );
void scanYYfree (void *  );

#define yy_new_buffer scanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        scanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            scanYY_create_buffer(scanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        scanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            scanYY_create_buffer(scanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define scanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *scanYYin = (FILE *) 0, *scanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int scanYYlineno;

int scanYYlineno = 1;

extern char *scanYYtext;
#define yytext_ptr scanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up scanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	scanYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 644
#define YY_END_OF_BUFFER 645
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[4672] =
    {   0,
       39,   39,  328,  328,  328,  328,  328,  328,  325,  325,
       50,   50,   56,   56,  385,  385,  385,  385,  645,  639,
      644,  634,  644,  635,  638,  639,  644,  636,  639,  644,
      637,  639,  644,  639,  644,  639,  644,  207,  639,  644,
      213,  639,  644,  213,  639,  644,  208,  634,  644,  212,
      213,  635,  638,  639,  644,  213,  636,  639,  644,  213,
      637,  639,  644,  213,  639,  644,  213,  639,  644,  639,
      644,  634,  644,  639,  644,  639,  644,  639,  644,  639,
      644,  493,  639,  644,  494,  639,  644,  504,  505,  639,
      644,16887,  531,  639,  644,  639,  644,  639,  644,  634,

      644,  639,  644,  639,  644,  639,  644,  525,  639,  644,
      510,  639,  644,  530,  639,  644,  507,  639,  644,  639,
      644,  524,  639,  644,  544,  639,  644,  639,  644,  509,
      639,  644,  509,  639,  644,  509,  639,  644,  521,  639,
      644,  520,  634,  644,  521,  635,  638,  639,  644,  513,
      521,  636,  639,  644,  521,  639,  644,  521,  637,  639,
      644,  521,  639,  644,  516,  521,  639,  644,  515,  521,
      639,  644,  517,  521,  639,  644,  521,  639,  644,  519,
      521,  639,  644,  519,  521,  639,  644,  514,  521,  639,
      644,  639,  644,  639,  644,  523,  639,  644,  522,  639,

      644,  500,  639,  644,  500,  635,  638,  639,  644,  500,
      636,  639,  644,  500,  637,  639,  644,  151,  500,  639,
      644,  152,  500,  639,  644,  500,  639,  644,  499,  500,
      639,  644,  498,  500,  639,  644,   40,  639,  644,   39,
       40,  639,  644,   38,  634,  644,   40,  635,  638,  639,
      644,   40,  636,  639,  644,   40,  639,  644,   40,  637,
      639,  644,   40,  639,  644,   37,   40,  639,  644,   34,
       40,  639,  644,   35,   40,  639,  644,   36,   40,  639,
      644,   42,  639,  644,   42,  635,  638,  639,  644,   42,
      636,  639,  644,   42,  637,  639,  644,   42,  639,  644,

       41,   42,  639,  644,  436,  639,  644,  435,  634,  644,
      436,  635,  638,  639,  644,  436,  636,  639,  644,  436,
      639,  644,  436,  637,  639,  644,  436,  639,  644,  433,
      436,  639,  644,  434,  436,  639,  644,  639,  644,  634,
      644,  639,  644,  639,  644,  561,  639,  644,  639,  644,
      545,  639,  644,  561,  639,  644,  539,  540,  541,  639,
      644,  639,  644,  562,  639,  644,  538,  639,  644,  537,
      538,  639,  644,  537,  634,  644,  538,  635,  638,  639,
      644,  538,  636,  639,  644,  538,  637,  639,  644,  538,
      639,  644,  538,  639,  644,  538,  639,  644,  538,  639,

      644,    9,  635,  638,  639,  644,    7,  637,  639,  644,
        2,  639,  644,   10,  639,  644,   10,  639,  644,    1,
      639,  644,  292,  639,  644,  292,  635,  638,  639,  644,
      292,  636,  639,  644,  292,  637,  639,  644,   11,  292,
      639,  644,  292,  639,  644,   11,  292,  639,  644,   60,
      639,  644,   60,  634,  644,   60,  639,  644,  639,  644,
      197,  636,  639,  644,  639,  644,  215,  639,  644,  216,
      639,  644,  381,  639,  644,   46,  639,  644,  293,  639,
      644,  183,  639,  644,  639,  644,  639,  644,  291,  639,
      644,  293,  639,  644,  315,  639,  644,  222,  639,  644,

      639,  644,  639,  644,  180,  639,  644,  180,  639,  644,
      294,  639,  644,  215,  639,  644,  180,  639,  644,  180,
      639,  644,  180,  639,  644,  180,  639,  644,  180,  639,
      644,  180,  639,  644,  180,  639,  644,  180,  639,  644,
      180,  639,  644,  180,  639,  644,  180,  639,  644,  180,
      639,  644,  180,  639,  644,  180,  639,  644,  180,  639,
      644,  180,  639,  644,  180,  639,  644,  180,  639,  644,
      580,  639,  644,   15,   17,  639,  644,   16,  634,  644,
       15,   17,  635,  638,  639,  644,   15,   17,  636,  639,
      644,   15,   17,  637,  639,  644,   15,   17,  639,  644,

       17,  639,  644,  639,  644,  634,  644,  639,  644,  639,
      644,  639,  644,  180,  639,  644,  639,  644,  634,  644,
      639,  644,  197,  636,  639,  644,  639,  644,  321,  639,
      644,  326,  639,  644,  639,  644,  323,  639,  644,  322,
      639,  644,  320,  639,  644,  327,  639,  644,  639,  644,
      431,  636,  639,  644,  462,  639,  644,  464,  639,  644,
      463,  639,  644,  464,  639,  644,  449,  639,  644,  430,
      449,  639,  644,  430,  634,  644,  449,  635,  638,  639,
      644,  431,  449,  636,  639,  644,  449,  637,  639,  644,
      419,  449,  639,  644,  420,  449,  639,  644,  429,  449,

      639,  644,  449,  639,  644,  457,  639,  644,  457,  635,
      638,  639,  644,  457,  636,  639,  644,  457,  637,  639,
      644,  455,  457,  639,  644,  456,  457,  639,  644,  457,
      639,  644,  461,  639,  644,  460,  634,  644,  461,  635,
      638,  639,  644,  461,  636,  639,  644,  461,  637,  639,
      644,  461,  639,  644,  459,  461,  639,  644,  458,  461,
      639,  644,  430,  449,  639,  644,  430,  634,  644,  449,
      639,  644,  421,  449,  639,  644,  449,  639,  644,  432,
      449,  639,  644,  444,  449,  639,  644,  444,  449,  639,
      644,  444,  449,  639,  644,  444,  449,  639,  644,  444,

      449,  639,  644,  444,  449,  639,  644,  444,  449,  639,
      644,  444,  449,  639,  644,  444,  449,  639,  644,  120,
      639,  644,  120,  634,  644,  120,  635,  638,  639,  644,
      120,  636,  639,  644,  120,  637,  639,  644,  122,  639,
      644,  120,  639,  644,  119,  120,  639,  644,  120,  639,
      644,  310,  639,  644,  310,  635,  638,  639,  644,  310,
      636,  639,  644,  310,  637,  639,  644,  310,  639,  644,
      309,  310,  639,  644,  307,  310,  639,  644,  328,  353,
      639,  644,  328,  351,  353,  639,  644,  351,  634,  644,
      351,  353,  639,  644,  333,  353,  635,  638,  639,  644,

      330,  353,  636,  639,  644,  336,  353,  637,  639,  644,
      353,  639,  644,  353,  639,  644,  353,  639,  644,  338,
      353,  639,  644,  340,  353,  639,  644,  340,  353,  639,
      644,  353,  639,  644,  339,  353,  639,  644,  639,  644,
      139,  639,  644,  137,  639,  644,  137,  639,  644,  639,
      644,  634,  644,  639,  644,  639,  644,  639,  644,  138,
      639,  644,  475,  486,  639,  644,  475,  486,  639,  644,
      473,  634,  644,  471,  486,  635,  638,  639,  644,  482,
      486,  636,  639,  644,  485,  486,  637,  639,  644,  486,
      639,  644,  486,  639,  644,  486,  639,  644,  486,  639,

      644,  466,  486,  639,  644,  467,  486,  639,  644,  475,
      486,  639,  644,  472,  482,  486,  636,  639,  644,  476,
      634,  644,  486,  635,  638,  639,  644,  486,  639,  644,
      486,  639,  644,  470,  639,  644,  492,  639,  644,  491,
      634,  644,  488,  492,  635,  638,  639,  644,  492,  636,
      639,  644,  492,  637,  639,  644,  492,  639,  644,  492,
      639,  644,  492,  639,  644,  492,  635,  638,  639,  644,
      489,  492,  637,  639,  644,  480,  486,  635,  638,  639,
      644,  482,  486,  636,  639,  644,  486,  639,  644,  481,
      486,  639,  644,  465,  486,  639,  644,  203,  639,  644,

      205,  634,  644,  203,  639,  644,  203,  635,  638,  639,
      644,  203,  636,  639,  644,  203,  637,  639,  644,  203,
      639,  644,  203,  639,  644,  633,  639,  644,  633,  639,
      644,  633,  635,  638,  639,  644,  633,  636,  639,  644,
      633,  637,  639,  644,  639,  644,  633,  639,  644,  639,
      644,  632,  634,  644,  635,  638,  639,  644,  636,  639,
      644,  637,  639,  644,  639,  644,  639,  644,    5,  639,
      644,    6,  639,  644,    3,  639,  644,    4,  639,  644,
      319,  639,  644,  318,  319,  639,  644,  318,  634,  644,
      319,  635,  638,  639,  644,  319,  636,  639,  644,  319,

      637,  639,  644,  319,  639,  644,  317,  319,  639,  644,
      316,  319,  639,  644,  556,  639,  644,  557,  639,  644,
      560,  635,  638,  639,  644,  558,  639,  644,  559,  639,
      644,  314,  639,  644,  313,  635,  638,  639,  644,  314,
      636,  639,  644,  314,  637,  639,  644,  314,  639,  644,
      311,  639,  644,  312,  639,  644,  325,  639,  644,  324,
      634,  644,  325,  635,  638,  639,  644,  325,  636,  639,
      644,  325,  637,  639,  644,  325,  639,  644,  639,  644,
      344,  639,  644,  343,  639,  644,  343,  639,  644,  343,
      639,  644,  192,  639,  644,  190,  634,  644,  192,  635,

      638,  639,  644,  192,  636,  639,  644,  192,  637,  639,
      644,  192,  639,  644,  191,  192,  639,  644,  195,  639,
      644,  195,  639,  644,  194,  634,  644,  195,  635,  638,
      639,  644,  195,  636,  639,  644,  195,  637,  639,  644,
      195,  639,  644,  195,  639,  644,  572,  574,  639,  644,
      567,  574,  639,  644,  567,  634,  644,  572,  574,  635,
      638,  639,  644,  572,  574,  636,  639,  644,  572,  574,
      637,  639,  644,  574,  639,  644,  574,  639,  644,  574,
      639,  644,  572,  574,  639,  644,  639,  644,   74,  639,
      644,   73,  639,  644,   75,  639,  644,  639,  644,  639,

      644,  639,  644,  132,  639,  644,  129,  639,  644,16512,
      639,  644,  634,  644,  639,  644,  131,  639,  644,  588,
      639,  644,  589,  634,  644,  588,  635,  638,  639,  644,
      588,  636,  639,  644,  588,  637,  639,  644,  588,  639,
      644,  588,  639,  644,  588,  639,  644,  588,  639,  644,
      588,  639,  644,  581,  588,  639,  644,  582,  588,  639,
      644,  496,  639,  644,  201,  639,  644,  202,  634,  644,
      201,  635,  638,  639,  644,  201,  636,  639,  644,  201,
      637,  639,  644,  201,  639,  644,  639,  644,  639,  644,
      210,  639,  644,  210,  635,  638,  639,  644,  210,  636,

      639,  644,  210,  637,  639,  644,  210,  639,  644,  209,
      210,  639,  644,  448,  639,  644,  448,  639,  644,  448,
      635,  638,  639,  644,  448,  636,  639,  644,  448,  639,
      644,  448,  637,  639,  644,  445,  448,  639,  644,  448,
      639,  644,  445,  448,  639,  644,  446,  448,  639,  644,
      447,  448,  639,  644,  236,  240,  639,  644,  239,  634,
      644,  238,  240,  635,  638,  639,  644,  236,  240,  636,
      639,  644,  236,  240,  637,  639,  644,  236,  240,  639,
      644,  639,  644,   47,  639,  644,   49,  639,  644,   58,
      639,  644,   48,  639,  644,   59,  639,  644,   50,  639,

      644,   50,  634,  644,   50,  635,  638,  639,  644,   50,
      636,  639,  644,   50,  637,  639,  644,   51,  639,  644,
       50,  639,  644,  639,  644,   55,  639,  644,  639,  644,
       52,  639,  644,   53,  639,  644,   56,  639,  644,   56,
      634,  644,   56,  635,  638,  639,  644,   56,  636,  639,
      644,   56,  637,  639,  644,   57,  639,  644,   56,  639,
      644,  497,  639,  644,   70,  639,  644,  639,  644,  639,
      644,  639,  644,  639,  644,  639,  644,  639,  644,   72,
      639,  644,  169,  639,  644,  639,  644,  166,  639,  644,
      170,  639,  644,  170,  639,  644,  170,  639,  644,  639,

      644,  171,  639,  644,  167,  639,  644,  639,  644,  639,
      644,  639,  644,  639,  644,  639,  644,  177,  639,  644,
      639,  644,  178,  639,  644,  242,  639,  644,  242,  639,
      644,  234,  634,  644,  226,  242,  635,  638,  639,  644,
      242,  636,  639,  644,  232,  242,  637,  639,  644,  223,
      230,  242,  639,  644,  231,  242,  639,  644,  225,  242,
      639,  644,  242,  639,  644,  242,  639,  644,  225,  242,
      639,  644,  230,  242,  639,  644,  231,  242,  639,  644,
      242,  639,  644,  242,  639,  644,  230,  242,  639,  644,
      224,  230,  242,  639,  644,  639,  644,  634,  644,  639,

      644,  639,  644,  639,  644,  196,  639,  644,  639,  644,
      634,  644,  639,  644,  639,  644,  346,  639,  644,  347,
      639,  644,  639,  644,  347,  639,  644,  348,  639,  644,
      345,  639,  644,  349,  639,  644,  350,  639,  644,  153,
      639,  644,  153,  635,  638,  639,  644,  153,  636,  639,
      644,  153,  637,  639,  644,  151,  153,  639,  644,  152,
      153,  639,  644,  153,  639,  644,  145,  153,  639,  644,
      147,  153,  639,  644,16533,  357,  639,  644,  357,  639,
      644,  634,  644,  357,  639,  644,  357,  635,  638,  639,
      644,  357,  636,  639,  644,  357,  639,  644,  357,  637,

      639,  644,  357,  639,  644,  357,  639,  644,  356,  357,
      639,  644,  361,  639,  644,  359,  634,  644,  361,  635,
      638,  639,  644,  361,  636,  639,  644,  361,  637,  639,
      644,  360,  361,  639,  644,  361,  639,  644,  365,  639,
      644,  367,  639,  644,  639,  644,  382,  418,  639,  644,
      385,  418,  639,  644,  385,  417,  634,  644,  386,  418,
      635,  638,  639,  644,  418,  636,  639,  644,  416,  418,
      637,  639,  644,  387,  418,  639,  644,  388,  418,  639,
      644,  418,  639,  644,  418,  639,  644,  406,  418,  639,
      644,  407,  418,  639,  644,  189,  639,  644,  188,  634,

      644,  189,  635,  638,  639,  644,  189,  636,  639,  644,
      189,  637,  639,  644,  189,  639,  644,  187,  189,  639,
      644,  639,  644,  125,  639,  644,  639,  644,  127,  639,
      644,  126,  639,  644,  248,  639,  644,  247,  634,  644,
      244,  248,  635,  638,  639,  644,  248,  636,  639,  644,
      248,  637,  639,  644,  248,  639,  644,  248,  639,  644,
      248,  639,  644,  248,  635,  638,  639,  644,  245,  248,
      637,  639,  644,  254,  639,  644,  253,  634,  644,  250,
      254,  635,  638,  639,  644,  254,  636,  639,  644,  254,
      637,  639,  644,  254,  639,  644,  254,  639,  644,  254,

      639,  644,  254,  635,  638,  639,  644,  251,  254,  637,
      639,  644,  261,  262,  639,  644,  258,  634,  644,  255,
      262,  635,  638,  639,  644,  261,  262,  636,  639,  644,
      259,  262,  637,  639,  644,  256,  262,  639,  644,  257,
      262,  639,  644,  261,  262,  639,  644,  276,  279,  639,
      644,  278,  634,  644,  271,  279,  635,  638,  639,  644,
      276,  279,  636,  639,  644,  272,  279,  637,  639,  644,
      277,  279,  639,  644,  273,  279,  639,  644,  274,  279,
      639,  644,  269,  270,  639,  644,  266,  634,  644,  263,
      270,  635,  638,  639,  644,  269,  270,  636,  639,  644,

      267,  270,  637,  639,  644,  264,  270,  639,  644,  265,
      270,  639,  644,  270,  639,  644,  287,  290,  639,  644,
      289,  634,  644,  282,  290,  635,  638,  639,  644,  287,
      290,  636,  639,  644,  283,  290,  637,  639,  644,  288,
      290,  639,  644,  284,  290,  639,  644,  285,  290,  639,
      644,  287,  290,  636,  639,  644,  566,  639,  644,  566,
      639,  644,  565,  634,  644,  566,  635,  638,  639,  644,
      566,  636,  639,  644,  566,  637,  639,  644,  563,  566,
      639,  644,  564,  566,  639,  644,  566,  639,  644,  555,
      639,  644,  548,  555,  639,  644,  548,  634,  644,  555,

      635,  638,  639,  644,  555,  636,  639,  644,  555,  637,
      639,  644,  553,  555,  639,  644,  554,  555,  639,  644,
      555,  639,  644,  546,  555,  639,  644,  547,  555,  639,
      644,  555,  639,  644,  442,  639,  644,  443,  634,  644,
      438,  442,  635,  638,  639,  644,  442,  636,  639,  644,
      442,  639,  644,  439,  442,  637,  639,  644,  442,  639,
      644,  437,  442,  639,  644,  441,  442,  639,  644,  368,
      449,  639,  644,  369,  449,  639,  644,  373,  639,  644,
      373,  635,  638,  639,  644,  373,  636,  639,  644,  373,
      637,  639,  644,  373,  639,  644,  373,  639,  644,  378,

      639,  644,  377,  378,  639,  644,  377,  634,  644,  378,
      635,  638,  639,  644,  378,  636,  639,  644,  378,  637,
      639,  644,  374,  378,  639,  644,  375,  378,  639,  644,
      376,  378,  639,  644,  378,  639,  644,  308,  310,  639,
      644,  383,  418,  639,  644,  417,  634,  644,  413,  418,
      635,  638,  639,  644,  383,  418,  636,  639,  644,  418,
      637,  639,  644,  383,  418,  639,  644,  418,  639,  644,
      418,  635,  638,  639,  644,  414,  418,  637,  639,  644,
      384,  418,  639,  644,  384,  418,  636,  639,  644,  408,
      418,  639,  644,  409,  418,  639,  644,  418,  639,  644,

      410,  418,  639,  644,  411,  418,  639,  644,  395,  404,
      639,  644,  403,  634,  644,  395,  404,  635,  638,  639,
      644,  395,  404,  636,  639,  644,  395,  404,  637,  639,
      644,  404,  639,  644,  395,  404,  639,  644,  404,  639,
      644,  395,  404,  639,  644,  404,  639,  644,16778,  401,
      402,  639,  644,  397,  634,  644,  401,  402,  635,  638,
      639,  644,  401,  402,  636,  639,  644,  401,  402,  637,
      639,  644,  401,  402,  639,  644,  402,  639,  644,  404,
      639,  644,  404,  635,  638,  639,  644,  404,  636,  639,
      644,  404,  637,  639,  644,  404,  639,  644,  404,  639,

      644,  639,  644,  637,  639,  644,  157,  639,  644,  160,
      639,  644,  160,  635,  638,  639,  644,  160,  636,  639,
      644,  160,  637,  639,  644,  160,  639,  644,  160,  639,
      644,  159,  160,  639,  644,  639,  644,  637,  639,  644,
      155,  639,  644,  163,  639,  644,  162,  634,  644,  163,
      635,  638,  639,  644,  163,  636,  639,  644,  163,  637,
      639,  644,  163,  639,  644,  163,  639,  644,  161,  163,
      639,  644,  298,  639,  644,  298,  635,  638,  639,  644,
      298,  636,  639,  644,  298,  637,  639,  644,  298,  639,
      644,  295,  298,  639,  644,  298,  639,  644,  306,  639,

      644,  306,  639,  644,  634,  644,  306,  635,  638,  639,
      644,  306,  636,  639,  644,  306,  639,  644,  306,  637,
      639,  644,  306,  639,  644,  305,  306,  639,  644,  302,
      306,  639,  644,  306,  639,  644,  639,  644,  634,  644,
      639,  644,  299,  639,  644,  629,  639,  644,  629,  635,
      638,  639,  644,  629,  636,  639,  644,  629,  637,  639,
      644,  615,  629,  639,  644,  629,  639,  644,  629,  639,
      644,  620,  639,  644,  620,  639,  644,  634,  644,  620,
      639,  644,  620,  635,  638,  639,  644,  620,  636,  639,
      644,  620,  639,  644,  620,  637,  639,  644,  618,  620,

      639,  644,  619,  620,  639,  644,  620,  639,  644,  620,
      639,  644,  617,  620,  639,  644,  628,  639,  644,  628,
      639,  644,  628,  635,  638,  639,  644,  628,  636,  639,
      644,  628,  637,  639,  644,  628,  639,  644,  628,  639,
      644,  628,  639,  644,  628,  639,  644,  628,  639,  644,
      621,  628,  639,  644,  627,  639,  644,  627,  635,  638,
      639,  644,  627,  636,  639,  644,  627,  637,  639,  644,
      626,  627,  639,  644,  627,  639,  644,  630,  639,  644,
      630,  635,  638,  639,  644,  630,  636,  639,  644,  630,
      637,  639,  644,  630,  639,  644,  639,  644,  591,  634,

      644,  635,  638,  639,  644,  636,  639,  644,  637,  639,
      644,  639,  644,  602,  604,  639,  644,  602,  604,  639,
      644,  603,  634,  644,  602,  604,  635,  638,  639,  644,
      602,  604,  636,  639,  644,  602,  604,  637,  639,  644,
      604,  639,  644,  604,  639,  644,  602,  604,  639,  644,
      604,  639,  644,  604,  639,  644,  602,  604,  639,  644,
      604,  639,  644,  604,  639,  644,  610,  613,  639,  644,
      612,  634,  644,  610,  613,  635,  638,  639,  644,  610,
      613,  636,  639,  644,  613,  639,  644,  610,  613,  637,
      639,  644,  613,  639,  644,  613,  639,  644,  613,  639,

      644,  613,  639,  644,  610,  613,  639,  644,  613,  639,
      644,16993,  641,  643,  207,  206,  207,  641,  643,  211,
      531,  504,16887,  504,  505,16887,  505,  502, 8695,  504,
      505,16887,  501,  495,  531,  504,  505,16887,  542,  542,
      542,  509,  530,  641,  643,  506,  509,  509,  509,  517,
      641,  643,  517,  519,  519,  519,  181,  522,  522,  144,
      146,   39,   34,   34,  433,  433,  540,  541,  540,  541,
      562,  542,  542,  540,  541,  542,  540,  541,  542,  539,
      540,  541,  561,  539,  540,  541,  539,  562,   60,   60,
      197,  180,  180,   20,   21,  216,  355,   46,  641,  643,

      182,  184,   18,   71,   71,   71,   71,   71,   71,  180,
      141,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,   15,   15,  641,   15,  643,   13,  180,
      180,  180,  142,  197,  320,  641,  643,  320,  430,  429,
      429,  430,  444,  641,  643,  428,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  121,  328,  328,  351,
      351,  330,  330,  334,  641,  329,  643,  331,  137,  137,
      137,  137,  138,  138,  138,  475,  475,  478,  641,  479,

      643,  483,  475,  472,  478,  641,  479,  643,  477,  490,
      490,  641,  490,  643,  487,  479,  643,  205,  205,  204,
      633,  633,  642,  640,  641,  633,  640,  643,  632,  641,
      643,  631,  632,  318,  314,  314,  641,  314,  643,  325,
      325,  641,  325,  643,  343,  343,  343,  343,  572,  567,
      573,  568,  641,  569,  643,  572,  572,  572,   73,   73,
      129,16512,  129,16512,  131,  131,  200,  446,  641,  643,
      446,  236,  237,  236,  641,  236,  643,   48,   49,   48,
       50,   50,  641,   50,  643,   53,   53,   53,   52,   56,
       57,   56,  641,   56,  643,  169,  170,  170,  170,  170,

      171,  171,  177,  177,  178,  178,  227,  641,  643,  228,
      229,  241,  235,  380,  185,  345,  345,  345,  144,16533,
      148,  356,  356,  356,  363,  362,  364,  366,  382,  385,
      391,  641,  392,  643,  186,  125,  125,  126,  126,  246,
      246,  641,  246,  643,  243,  252,  252,  641,  252,  643,
      249,  261,  261,  641,  261,  643,  276,  269,  287,  287,
      563,  548,  549,  551,  441,  441,  370,  371,  372,  377,
      376,  376,  383,  383,  641,  383,  643,  412,  384,  395,
      396,  395,  643,  395,16778, 8586,  401,  401,  641,  401,
      643,  157,  157,  159,  159,  155,  155,  161,  161,  302,

      304,  303,  302,  301,  299,  299,  299,  300,  299,  616,
      617,  617,  617,  624,  591,  641,  643,  602,  602,  602,
      592,  596,  641,  595,  643,  602,  602,  602,  593,  594,
      595,  643,  610,  611,  611,  641,  611,  643,  610,16993,
     8801,  504,16887,  504,16887,  505,  505,  504,  505,16887,
      528,  575,  529,  577,  509,  509,  512,  512,  519,  519,
      540,  541,  540,  541,  540,  541,  539,    8,   60,   60,
      180,   20,  355,  575,  577,  182,   61,   71,   71,   71,
       71,   71,   71,   71,   71,  140,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,

      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      575,  577,  575,  577,  428,  444,  444,  425,  444,  444,
      444,  444,  444,  444,  444,  118,  328,  351,  351,  330,
      337,  334,  335,  329,  332,  137,  137,  138,  484,  474,
      477,  204,  343,  343,  572,  572,  572,   73,  133,  134,
      585,  584,  583,  214,  575,  577,   59,  170,  170,  170,
      233,  345,  143, 8341,  150,  356,  358,  415,  389,  389,
      260,  275,  268,  286,  287,  440,  399,  158,  156,  304,

      301,  299,  299,  617,  624,  602,  602,  598,  594,  594,
      607,  219,  504,16887,  505,  527,  576,  526,  578,  526,
      578,  543,  509,  509,  512,  511,  519,  519,  498,  540,
      541,  540,  541,    8,   60,   60,  354,  576,  576,  576,
      220,  578,  578,  578,  578,  221,   71,   71,   71,   71,
       71,   71,   71,   71,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  219,  576,  219,

      578,  425,  444,  444,  425,  444,  444,  444,  444,  451,
      450,  444,  328,  351,  351,  330,  337,  137,  137,  484,
      343,  343,  572,  572,  572,   73,  134, 8320,  130,  214,
       54,   68,  170,  170,  172,  233, 8341,  415,  389,  390,
      260,  275,  268,  286,  287,  550,  440,  400,  590,  602,
      602,  597,  597,  509,  509,  518,  519,  498,  498,  540,
      541,  218,  217,   60,   60,  199,  379,  221,   12,   71,
       71,   71,   71,   71,   71,   71,   71,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,   19,   19,   19,
       19,  141,   19,  180,  116,  115,  180,  180,  180,  180,

      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,   13,  444,
      426,  444,  444,  444,  444,  444,  444,  117,  328,  351,
      351,  199,  330,  352,  137,  468,  469,  343,  343,  193,
      570,  572,  572,  572,  572,  587,  168,  170,  170,  173,
      393,  398,  622,  599,  602,  602,  600,  509,  509,16892,
      498,  540,  541,   60,   60,  116,  221,   71,   95,   71,
       71,   71,   71,   71,   71,   71,   71,  180,  180,  180,
      180,  180,   97,   96,  180,  180,  180,   32,  180,  180,

      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,16490,  180,  180,  180,  114,  113,  135,  180,
      180,  180,  426,  444,  426,  444,  444,  424,  444,  452,
      444,  444,  328,  351,  351,  137,  342,  343,  572,  572,
      572,  586,   66,   67,  170,  622,  625,  601,  602,  605,
      509, 8700, 8700,  540,  541,  533,   60,   60,   97,   32,
    16490,  114,  198,   71,   71,   71,   71,   71,   71,   71,
       71,  180,  180,  180,  180,  180,  180,  180,  180,  180,
       78,  180,  180,  180,   81,  180,  180,   23,  180,  180,

       88,  180,  180,  180,  180,  180,   28,  180,  180,  180,
      180,   77, 8298,  105,  180,  180,  180,  180,  180,  180,
      424,  444,  444,  453,  424,  454,  444,  328,  351,  351,
      137,  343,  572,  572,  572,  170,  174,  405,  297,  296,
      606,  540,  541,  536,  532,   60,   60,   78,   81,   23,
       88,   28,   77, 8298,   71,   71,   71,   71,   71,   71,
       45,   71,  164,  180,  180,  180,  180,  180,  104,  154,
      180,  180,  180, 8315,  141,16507,  180,  180,  180,  180,
       23,   89,   82,  180,   31,  180,  180,  180,  180,  180,
       28,  180,  180,  180,   24,  180,  180,   79,  422,  444,

      423,  444,  427,  444,  328,  351,  351,  137,  571,  572,
      572,  572,   62,   69,   64,   63,  174,  623,  608,  540,
      541,  535,   60,   60,   45,  104,   89,   82,   31,   24,
       79,   71,   71,   71,   43,   71,   71,   71,  180,  180,
       80,  180,  180,   83,  579, 8315,  140,  180,   76,  180,
       29,  180,   31,  180,  180,  180,   33,  180,  180,  180,
      180,   24,   86,  180,  422,  423,  427,  422,  423,  427,
      328,  351,  351,  137,  572,   62,   65,   63,  280,  281,
      552,  623,  540,  541,  534,   60,   60,   43,   80,   83,
       76,   29,   33,   86,   71,   71,   85,   71,   93,   84,

      165,  180,  180,  180,   94,  579,  579,  180,   90,   90,
       29,   87,   87,16508,   87,   87,  141,   87,  180,  180,
      180,  180,   30,  180,  180,  180,  180,  101,  100,  180,
      328,  351,  351,  341,  136,  137,  572,  280,  280,  281,
      281,  614,  540,  541,  561,   60,   60,   85,   93,   84,
       94,   90,   90,   87,   30,   71,   92,   44,  180,  116,
      180,   87,   87,  180,  180,   22,   30,  180,  180,  180,
      180,  110,  109,  180,  328,  351,  351,  572,  561,   60,
       60,   92,   44,   22,   71,  180, 8316,  180,  180,   22,
      180,  180,  180,   25,   99,   98,  328,  351,  351,  176,

      175,   60,   60,   25,   71,  179,  180,   27,  180,  180,
       25,  108,  107,  328,  351,  351,  176,  175,   60,   60,
       27,   71,   27,  180,  180,  328,  351,  351,   60,   60,
       71,  180,   26,  328,  351,  351,   60,   60,   26,   91,
      103,  102,   26,  328,  351,  351,   60,   60,   91,  112,
      111,  328,  351,  351,   60,   60,  328,  351,  351,   60,
       60,  328,  351,  351,   60,   60,  328,  351,  351,   60,
       60,   14,  328,  351,  351,   60,   60,  328,  351,  351,
       60,   60,  328,  351,  351,   60,   60,  328,  351,  351,
       60,   60,  328,  351,  351,   60,   60,  328,  351,  351,

       60,   60,  328,  351,  351,   60,   60,  328,  351,  351,
       60,   60,  328,  351,  351,   60,   60,  328,  351,  351,
       60,   60,  328,  351,  351,   60,   60,  328,  351,  351,
       60,   60,  328,  351,  351,   60,   60,  328,  351,  351,
       60,   60,  328,  351,  351,   60,   60,  328,  351,  351,
       60,   60,  328,  351,  351,   60,   60,  328,  351,  351,
       60,   60,  328,  351,  351,   60,   60,  328,  351,  351,
       60,   60,  328,  351,  351,   60,   60,  328,  351,  351,
       60,   60,  328,  351,  351,   60,   60,  328,  351,  351,
       60,   60,  328,  351,  351,   60,   60,  328,  351,  351,

       60,   60,  328,  351,  351,   60,   60,  328,  351,  351,
       60,   60,  328,  351,  351,   60,   60,  328,  351,  351,
       60,   60,  328,  351,  351,   60,   60,  328,  351,  351,
       60,   60,  328,  351,  351,   60,   60,  328,  351,  351,
       60,   60,  328,  351,  351,   60,   60,  328,  351,  351,
       60,   60,  328,  351,  351,   60,   60,  328,  351,  351,
       60,   60,  328,  351,  351,   60,   60,  328,  351,  351,
       60,   60,  328,  351,  351,   60,   60,  328,  351,  351,
       60,   60,  328,  351,  351,   60,   60,  328,  351,  351,
       60,   60,  328,  351,  351,   60,   60,  328,  351,  351,

       60,   60,  328,  351,  351,   60,   60,  328,  351,  351,
       60,   60,  328,  351,  351,   60,   60,  328,  351,  351,
       60,   60,  328,  351,  351,   60,   60,  328,  351,  351,
       60,   60,  328,  351,  351,   60,   60,  328,  351,  351,
       60,   60,  328,  351,  351,   60,   60,  328,  351,  351,
       60,   60,  328,  351,  351,   60,   60,  328,  351,  351,
       60,   60,  328,  351,  351,   60,   60,  328,  351,  351,
      328
    } ;

static yyconst flex_int16_t yy_accept[3917] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    4,
        5,    6,    7,    8,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,   10,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   12,   13,   13,   13,   14,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,   17,   18,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   20,   22,   24,   28,   31,   34,   36,   38,   41,
       44,   47,   50,   56,   60,   64,   67,   70,   72,   74,
       76,   78,   80,   82,   85,   88,   93,   96,   98,  100,
      102,  104,  106,  108,  111,  114,  117,  120,  122,  125,

      128,  130,  133,  136,  139,  142,  145,  150,  155,  158,
      162,  165,  169,  173,  177,  180,  184,  188,  192,  194,
      196,  199,  202,  205,  210,  214,  218,  222,  226,  229,
      233,  237,  240,  244,  247,  252,  256,  259,  263,  266,
      270,  274,  278,  282,  285,  290,  294,  298,  301,  305,
      308,  311,  316,  320,  323,  327,  330,  334,  338,  340,
      342,  344,  346,  349,  351,  354,  357,  362,  364,  367,
      370,  374,  377,  382,  386,  390,  393,  396,  399,  402,
      407,  411,  414,  417,  420,  423,  426,  431,  435,  439,
      443,  446,  450,  453,  456,  459,  461,  465,  467,  470,

      473,  476,  479,  482,  485,  487,  489,  492,  495,  498,
      501,  503,  505,  508,  511,  514,  517,  520,  523,  526,
      529,  532,  535,  538,  541,  544,  547,  550,  553,  556,
      559,  562,  565,  568,  571,  574,  578,  581,  587,  592,
      597,  601,  604,  606,  608,  610,  612,  614,  617,  619,
      621,  623,  627,  629,  632,  635,  637,  640,  643,  646,
      649,  651,  655,  658,  661,  664,  667,  670,  674,  677,
      682,  687,  691,  695,  699,  703,  706,  709,  714,  718,
      722,  726,  730,  733,  736,  739,  744,  748,  752,  755,
      759,  763,  767,  770,  773,  777,  780,  784,  788,  792,

      796,  800,  804,  808,  812,  816,  820,  823,  826,  831,
      835,  839,  842,  845,  849,  852,  855,  860,  864,  868,
      871,  875,  879,  883,  888,  891,  895,  901,  906,  911,
      914,  917,  920,  924,  928,  932,  935,  939,  941,  944,
      947,  950,  952,  954,  956,  958,  960,  963,  967,  971,
      974,  980,  985,  990,  993,  996,  999, 1002, 1006, 1010,
     1014, 1020, 1023, 1028, 1031, 1034, 1037, 1040, 1043, 1049,
     1053, 1057, 1060, 1063, 1066, 1071, 1076, 1082, 1087, 1090,
     1094, 1098, 1101, 1104, 1107, 1112, 1116, 1120, 1123, 1126,
     1129, 1132, 1137, 1141, 1145, 1147, 1150, 1152, 1155, 1159,

     1162, 1165, 1167, 1169, 1172, 1175, 1178, 1181, 1184, 1188,
     1191, 1196, 1200, 1204, 1207, 1211, 1215, 1218, 1221, 1226,
     1229, 1232, 1235, 1240, 1244, 1248, 1251, 1254, 1257, 1260,
     1263, 1268, 1272, 1276, 1279, 1281, 1284, 1287, 1290, 1293,
     1296, 1299, 1304, 1308, 1312, 1315, 1319, 1322, 1325, 1328,
     1333, 1337, 1341, 1344, 1347, 1351, 1355, 1358, 1364, 1369,
     1374, 1377, 1380, 1383, 1387, 1389, 1392, 1395, 1398, 1400,
     1402, 1404, 1407, 1411, 1413, 1415, 1417, 1420, 1423, 1426,
     1431, 1435, 1439, 1442, 1445, 1448, 1451, 1454, 1458, 1462,
     1465, 1468, 1471, 1476, 1480, 1484, 1487, 1489, 1491, 1494,

     1499, 1503, 1507, 1510, 1514, 1517, 1520, 1525, 1529, 1532,
     1536, 1540, 1543, 1547, 1551, 1555, 1559, 1562, 1568, 1573,
     1578, 1582, 1584, 1587, 1590, 1593, 1596, 1599, 1602, 1605,
     1610, 1614, 1618, 1621, 1624, 1626, 1629, 1631, 1634, 1637,
     1640, 1643, 1648, 1652, 1656, 1659, 1662, 1665, 1668, 1670,
     1672, 1674, 1676, 1678, 1680, 1683, 1686, 1688, 1691, 1694,
     1697, 1700, 1702, 1705, 1708, 1710, 1712, 1714, 1716, 1718,
     1721, 1723, 1726, 1729, 1732, 1735, 1741, 1745, 1750, 1755,
     1759, 1763, 1766, 1769, 1773, 1777, 1781, 1784, 1787, 1791,
     1796, 1798, 1800, 1802, 1804, 1806, 1809, 1811, 1813, 1815,

     1817, 1820, 1823, 1825, 1828, 1831, 1834, 1837, 1840, 1843,
     1848, 1852, 1856, 1860, 1864, 1867, 1871, 1876, 1879, 1882,
     1884, 1887, 1892, 1896, 1899, 1903, 1906, 1909, 1913, 1916,
     1919, 1924, 1928, 1932, 1936, 1939, 1942, 1945, 1947, 1951,
     1955, 1959, 1965, 1969, 1974, 1978, 1982, 1985, 1988, 1992,
     1996, 1999, 2002, 2007, 2011, 2015, 2018, 2022, 2024, 2027,
     2029, 2032, 2035, 2038, 2041, 2047, 2051, 2055, 2058, 2061,
     2064, 2069, 2074, 2077, 2080, 2086, 2090, 2094, 2097, 2100,
     2103, 2108, 2113, 2117, 2120, 2126, 2131, 2136, 2140, 2144,
     2148, 2152, 2155, 2161, 2166, 2171, 2175, 2179, 2183, 2187,

     2190, 2196, 2201, 2206, 2210, 2214, 2217, 2221, 2224, 2230,
     2235, 2240, 2244, 2248, 2252, 2257, 2260, 2263, 2266, 2271,
     2275, 2279, 2283, 2287, 2290, 2293, 2297, 2300, 2305, 2309,
     2313, 2317, 2321, 2324, 2328, 2332, 2335, 2338, 2341, 2347,
     2351, 2354, 2359, 2362, 2366, 2370, 2374, 2378, 2381, 2386,
     2390, 2394, 2397, 2400, 2403, 2407, 2410, 2415, 2419, 2423,
     2427, 2431, 2435, 2438, 2442, 2446, 2449, 2455, 2460, 2464,
     2468, 2471, 2476, 2481, 2485, 2490, 2494, 2498, 2501, 2505,
     2509, 2513, 2516, 2522, 2527, 2532, 2535, 2539, 2542, 2546,
     2550, 2554, 2557, 2563, 2568, 2573, 2577, 2580, 2583, 2588,

     2592, 2596, 2599, 2602, 2604, 2607, 2610, 2613, 2618, 2622,
     2626, 2629, 2632, 2636, 2638, 2641, 2644, 2647, 2650, 2655,
     2659, 2663, 2666, 2669, 2673, 2676, 2681, 2685, 2689, 2692,
     2696, 2699, 2702, 2705, 2707, 2712, 2716, 2719, 2723, 2726,
     2730, 2734, 2737, 2739, 2741, 2743, 2746, 2749, 2754, 2758,
     2762, 2766, 2769, 2772, 2775, 2778, 2780, 2783, 2788, 2792,
     2795, 2799, 2803, 2807, 2810, 2813, 2817, 2820, 2823, 2828,
     2832, 2836, 2839, 2842, 2845, 2848, 2851, 2855, 2858, 2863,
     2867, 2871, 2875, 2878, 2881, 2886, 2890, 2894, 2897, 2899,
     2902, 2906, 2909, 2912, 2914, 2918, 2922, 2925, 2931, 2936,

     2941, 2944, 2947, 2951, 2954, 2957, 2961, 2964, 2967, 2971,
     2974, 2980, 2985, 2988, 2993, 2996, 2999, 3002, 3005, 3009,
     3013, 3014, 3015, 3016, 3016, 3017, 3018, 3018, 3018, 3019,
     3020, 3021, 3021, 3021, 3021, 3021, 3021, 3022, 3022, 3022,
     3024, 3024, 3024, 3024, 3027, 3027, 3027, 3028, 3028, 3028,
     3028, 3029, 3030, 3033, 3034, 3035, 3036, 3036, 3036, 3039,
     3039, 3039, 3039, 3040, 3040, 3041, 3042, 3042, 3042, 3042,
     3042, 3042, 3043, 3044, 3045, 3046, 3046, 3046, 3046, 3047,
     3048, 3049, 3050, 3051, 3052, 3053, 3054, 3055, 3055, 3055,
     3056, 3056, 3057, 3057, 3058, 3059, 3060, 3061, 3061, 3061,

     3062, 3063, 3064, 3065, 3066, 3067, 3067, 3067, 3067, 3069,
     3071, 3072, 3072, 3073, 3074, 3077, 3080, 3083, 3083, 3083,
     3084, 3084, 3084, 3087, 3087, 3087, 3087, 3088, 3089, 3089,
     3089, 3089, 3089, 3089, 3089, 3089, 3089, 3089, 3089, 3090,
     3091, 3092, 3092, 3092, 3092, 3092, 3092, 3092, 3092, 3092,
     3092, 3092, 3092, 3092, 3092, 3092, 3092, 3092, 3092, 3092,
     3092, 3092, 3092, 3092, 3093, 3093, 3093, 3093, 3093, 3093,
     3093, 3094, 3095, 3096, 3097, 3097, 3097, 3098, 3098, 3098,
     3099, 3100, 3101, 3101, 3102, 3103, 3103, 3103, 3104, 3104,
     3105, 3106, 3107, 3108, 3109, 3110, 3110, 3111, 3112, 3113,

     3113, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121,
     3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131,
     3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141,
     3142, 3143, 3144, 3145, 3147, 3149, 3150, 3150, 3150, 3150,
     3150, 3150, 3151, 3151, 3151, 3152, 3152, 3152, 3153, 3154,
     3154, 3155, 3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162,
     3163, 3163, 3163, 3163, 3163, 3163, 3163, 3163, 3163, 3163,
     3164, 3165, 3166, 3166, 3167, 3168, 3169, 3170, 3171, 3172,
     3173, 3174, 3175, 3176, 3177, 3177, 3177, 3178, 3179, 3181,
     3182, 3182, 3183, 3184, 3184, 3184, 3186, 3188, 3188, 3189,

     3189, 3189, 3190, 3191, 3191, 3192, 3192, 3193, 3193, 3193,
     3193, 3193, 3194, 3194, 3194, 3195, 3195, 3196, 3197, 3198,
     3198, 3198, 3198, 3200, 3202, 3202, 3203, 3203, 3203, 3204,
     3205, 3207, 3209, 3210, 3210, 3210, 3210, 3211, 3213, 3215,
     3216, 3218, 3219, 3220, 3220, 3221, 3221, 3222, 3223, 3223,
     3224, 3226, 3229, 3229, 3230, 3230, 3231, 3232, 3234, 3235,
     3236, 3238, 3240, 3241, 3243, 3245, 3246, 3247, 3248, 3249,
     3249, 3249, 3249, 3250, 3251, 3252, 3254, 3256, 3257, 3258,
     3259, 3260, 3260, 3261, 3261, 3261, 3261, 3261, 3263, 3263,
     3265, 3265, 3265, 3265, 3266, 3267, 3267, 3267, 3267, 3267,

     3267, 3267, 3268, 3268, 3268, 3268, 3269, 3270, 3271, 3272,
     3273, 3274, 3276, 3278, 3279, 3280, 3280, 3281, 3282, 3284,
     3286, 3287, 3287, 3287, 3288, 3289, 3290, 3291, 3292, 3294,
     3296, 3296, 3296, 3296, 3296, 3296, 3296, 3297, 3298, 3299,
     3299, 3299, 3300, 3301, 3302, 3303, 3303, 3303, 3303, 3303,
     3304, 3305, 3306, 3307, 3307, 3307, 3308, 3309, 3310, 3311,
     3312, 3313, 3314, 3314, 3314, 3314, 3314, 3315, 3315, 3315,
     3316, 3316, 3316, 3316, 3317, 3318, 3319, 3319, 3320, 3321,
     3322, 3322, 3322, 3322, 3322, 3322, 3323, 3323, 3323, 3324,
     3324, 3325, 3325, 3325, 3325, 3326, 3327, 3328, 3328, 3329,

     3330, 3331, 3331, 3331, 3331, 3331, 3333, 3335, 3336, 3337,
     3338, 3339, 3340, 3340, 3341, 3343, 3345, 3346, 3347, 3349,
     3351, 3352, 3353, 3353, 3353, 3355, 3357, 3358, 3358, 3358,
     3359, 3359, 3359, 3360, 3360, 3360, 3361, 3361, 3362, 3363,
     3364, 3365, 3365, 3366, 3366, 3366, 3367, 3367, 3368, 3369,
     3370, 3371, 3372, 3373, 3374, 3376, 3378, 3379, 3380, 3381,
     3382, 3384, 3384, 3384, 3385, 3386, 3387, 3388, 3390, 3392,
     3392, 3392, 3392, 3392, 3392, 3392, 3392, 3392, 3392, 3392,
     3393, 3393, 3393, 3394, 3395, 3396, 3397, 3397, 3397, 3398,
     3399, 3400, 3400, 3400, 3400, 3400, 3400, 3401, 3401, 3402,

     3403, 3404, 3404, 3405, 3405, 3405, 3406, 3407, 3408, 3409,
     3410, 3410, 3410, 3411, 3411, 3411, 3411, 3411, 3411, 3411,
     3412, 3412, 3412, 3413, 3413, 3414, 3414, 3414, 3414, 3414,
     3414, 3415, 3415, 3415, 3415, 3415, 3416, 3416, 3416, 3417,
     3418, 3419, 3420, 3421, 3421, 3422, 3424, 3426, 3427, 3428,
     3428, 3428, 3428, 3428, 3428, 3428, 3428, 3428, 3428, 3429,
     3429, 3429, 3430, 3430, 3433, 3434, 3435, 3437, 3439, 3439,
     3439, 3439, 3440, 3441, 3442, 3442, 3442, 3442, 3442, 3444,
     3446, 3446, 3447, 3447, 3447, 3448, 3448, 3451, 3451, 3451,
     3451, 3453, 3453, 3453, 3455, 3455, 3455, 3455, 3456, 3457,

     3458, 3459, 3460, 3460, 3460, 3460, 3461, 3461, 3463, 3465,
     3465, 3465, 3466, 3466, 3467, 3467, 3468, 3468, 3468, 3468,
     3468, 3468, 3468, 3469, 3469, 3469, 3469, 3469, 3469, 3469,
     3470, 3471, 3471, 3471, 3471, 3471, 3471, 3471, 3471, 3471,
     3471, 3471, 3471, 3471, 3471, 3471, 3471, 3471, 3471, 3471,
     3471, 3471, 3471, 3471, 3471, 3471, 3471, 3471, 3471, 3471,
     3471, 3471, 3471, 3471, 3472, 3472, 3472, 3472, 3473, 3474,
     3474, 3474, 3474, 3474, 3474, 3474, 3474, 3474, 3474, 3475,
     3475, 3475, 3475, 3476, 3476, 3476, 3477, 3477, 3477, 3477,
     3477, 3478, 3478, 3479, 3480, 3481, 3482, 3483, 3484, 3485,

     3486, 3487, 3488, 3489, 3490, 3490, 3490, 3491, 3492, 3493,
     3494, 3495, 3496, 3497, 3498, 3499, 3500, 3501, 3502, 3503,
     3504, 3505, 3506, 3507, 3508, 3509, 3510, 3511, 3512, 3513,
     3514, 3515, 3516, 3517, 3518, 3519, 3520, 3521, 3522, 3523,
     3524, 3525, 3526, 3527, 3528, 3529, 3530, 3530, 3530, 3530,
     3531, 3531, 3532, 3532, 3533, 3533, 3533, 3533, 3533, 3533,
     3533, 3533, 3533, 3533, 3533, 3534, 3534, 3534, 3535, 3535,
     3536, 3537, 3538, 3540, 3541, 3542, 3543, 3544, 3545, 3546,
     3546, 3547, 3547, 3549, 3550, 3551, 3551, 3552, 3552, 3552,
     3553, 3554, 3554, 3555, 3556, 3556, 3556, 3556, 3556, 3557,

     3558, 3559, 3559, 3559, 3560, 3560, 3560, 3561, 3561, 3561,
     3562, 3562, 3562, 3562, 3563, 3564, 3565, 3565, 3566, 3567,
     3568, 3568, 3569, 3569, 3569, 3570, 3571, 3571, 3571, 3571,
     3571, 3572, 3573, 3573, 3573, 3574, 3574, 3575, 3576, 3576,
     3577, 3577, 3578, 3578, 3578, 3578, 3578, 3578, 3578, 3578,
     3578, 3578, 3578, 3579, 3580, 3581, 3581, 3581, 3581, 3581,
     3581, 3581, 3582, 3582, 3582, 3582, 3582, 3582, 3582, 3582,
     3582, 3582, 3583, 3584, 3584, 3584, 3585, 3585, 3586, 3587,
     3587, 3587, 3588, 3588, 3589, 3589, 3589, 3589, 3589, 3590,
     3591, 3591, 3591, 3592, 3592, 3592, 3592, 3593, 3593, 3593,

     3593, 3594, 3594, 3594, 3594, 3595, 3595, 3595, 3596, 3596,
     3596, 3596, 3596, 3597, 3597, 3597, 3597, 3597, 3597, 3597,
     3598, 3598, 3598, 3598, 3598, 3598, 3598, 3598, 3599, 3599,
     3600, 3600, 3600, 3600, 3601, 3602, 3603, 3604, 3604, 3604,
     3604, 3605, 3605, 3606, 3606, 3606, 3606, 3606, 3607, 3608,
     3608, 3608, 3608, 3608, 3609, 3609, 3609, 3609, 3609, 3609,
     3610, 3611, 3611, 3611, 3611, 3612, 3613, 3613, 3615, 3616,
     3616, 3618, 3618, 3620, 3622, 3623, 3624, 3625, 3626, 3627,
     3627, 3628, 3629, 3629, 3629, 3629, 3629, 3630, 3632, 3633,
     3634, 3634, 3634, 3634, 3634, 3634, 3634, 3634, 3635, 3635,

     3635, 3635, 3636, 3637, 3637, 3637, 3637, 3637, 3637, 3637,
     3637, 3637, 3637, 3637, 3637, 3637, 3637, 3637, 3637, 3637,
     3637, 3637, 3637, 3637, 3637, 3637, 3637, 3637, 3637, 3637,
     3637, 3637, 3637, 3637, 3637, 3637, 3637, 3637, 3637, 3637,
     3637, 3637, 3637, 3637, 3637, 3637, 3637, 3637, 3637, 3637,
     3637, 3637, 3637, 3637, 3638, 3638, 3638, 3638, 3638, 3638,
     3638, 3638, 3639, 3640, 3641, 3642, 3642, 3642, 3643, 3644,
     3645, 3646, 3647, 3647, 3647, 3647, 3647, 3648, 3649, 3650,
     3651, 3652, 3653, 3654, 3655, 3656, 3657, 3658, 3659, 3660,
     3661, 3662, 3663, 3664, 3665, 3666, 3667, 3668, 3669, 3670,

     3671, 3672, 3673, 3674, 3675, 3676, 3677, 3678, 3679, 3680,
     3681, 3682, 3683, 3684, 3685, 3686, 3687, 3687, 3688, 3689,
     3690, 3691, 3692, 3693, 3694, 3695, 3696, 3697, 3698, 3698,
     3698, 3700, 3702, 3702, 3702, 3703, 3703, 3703, 3703, 3703,
     3703, 3703, 3704, 3705, 3706, 3707, 3708, 3709, 3710, 3711,
     3712, 3713, 3713, 3713, 3715, 3716, 3717, 3717, 3718, 3718,
     3718, 3718, 3718, 3719, 3720, 3720, 3721, 3721, 3721, 3721,
     3721, 3722, 3723, 3723, 3724, 3725, 3726, 3727, 3728, 3729,
     3730, 3730, 3730, 3731, 3732, 3732, 3733, 3733, 3733, 3733,
     3733, 3733, 3733, 3734, 3735, 3735, 3736, 3736, 3736, 3736,

     3736, 3737, 3737, 3738, 3738, 3738, 3738, 3738, 3739, 3739,
     3739, 3740, 3741, 3741, 3741, 3742, 3742, 3742, 3743, 3743,
     3743, 3744, 3744, 3744, 3745, 3745, 3746, 3747, 3747, 3747,
     3748, 3748, 3748, 3748, 3748, 3748, 3748, 3748, 3748, 3748,
     3748, 3748, 3749, 3749, 3749, 3749, 3749, 3749, 3749, 3750,
     3751, 3752, 3753, 3753, 3754, 3754, 3754, 3754, 3754, 3754,
     3754, 3754, 3754, 3754, 3754, 3754, 3755, 3756, 3758, 3758,
     3758, 3759, 3759, 3759, 3759, 3760, 3762, 3762, 3762, 3762,
     3762, 3762, 3762, 3762, 3763, 3764, 3765, 3766, 3766, 3766,
     3766, 3766, 3766, 3766, 3766, 3766, 3766, 3766, 3766, 3766,

     3766, 3766, 3766, 3766, 3766, 3766, 3766, 3766, 3766, 3766,
     3766, 3766, 3766, 3766, 3766, 3766, 3766, 3766, 3766, 3766,
     3766, 3766, 3766, 3766, 3766, 3766, 3766, 3766, 3766, 3767,
     3767, 3767, 3767, 3767, 3767, 3767, 3767, 3767, 3767, 3768,
     3768, 3768, 3768, 3768, 3769, 3769, 3770, 3770, 3771, 3772,
     3773, 3774, 3775, 3776, 3777, 3778, 3779, 3780, 3781, 3782,
     3783, 3784, 3785, 3786, 3787, 3788, 3789, 3790, 3791, 3793,
     3795, 3796, 3797, 3798, 3799, 3800, 3801, 3802, 3803, 3804,
     3805, 3806, 3807, 3808, 3809, 3810, 3811, 3812, 3813, 3814,
     3815, 3816, 3817, 3817, 3817, 3818, 3819, 3820, 3821, 3822,

     3823, 3824, 3825, 3826, 3827, 3828, 3829, 3830, 3830, 3830,
     3830, 3830, 3830, 3830, 3830, 3830, 3831, 3833, 3834, 3835,
     3836, 3837, 3838, 3838, 3839, 3841, 3842, 3844, 3844, 3844,
     3844, 3845, 3846, 3846, 3846, 3847, 3848, 3849, 3850, 3851,
     3853, 3854, 3855, 3856, 3857, 3857, 3857, 3857, 3857, 3857,
     3857, 3857, 3857, 3859, 3860, 3860, 3860, 3860, 3861, 3861,
     3861, 3861, 3861, 3861, 3862, 3862, 3862, 3862, 3862, 3862,
     3862, 3862, 3862, 3862, 3862, 3862, 3862, 3862, 3862, 3863,
     3863, 3863, 3863, 3863, 3863, 3863, 3863, 3863, 3863, 3863,
     3863, 3863, 3863, 3863, 3863, 3864, 3864, 3864, 3866, 3867,

     3868, 3868, 3868, 3868, 3868, 3868, 3868, 3868, 3868, 3868,
     3868, 3868, 3868, 3868, 3868, 3869, 3871, 3872, 3872, 3874,
     3874, 3874, 3874, 3874, 3874, 3875, 3876, 3876, 3876, 3876,
     3876, 3876, 3876, 3876, 3876, 3876, 3876, 3876, 3876, 3876,
     3876, 3877, 3877, 3877, 3877, 3877, 3877, 3877, 3877, 3877,
     3877, 3877, 3877, 3877, 3877, 3877, 3877, 3877, 3877, 3877,
     3877, 3877, 3877, 3877, 3877, 3877, 3877, 3877, 3877, 3877,
     3877, 3877, 3877, 3877, 3878, 3878, 3880, 3881, 3882, 3883,
     3884, 3885, 3886, 3887, 3888, 3889, 3890, 3891, 3892, 3893,
     3894, 3895, 3896, 3896, 3897, 3898, 3898, 3898, 3899, 3900,

     3901, 3902, 3903, 3904, 3905, 3906, 3907, 3908, 3909, 3910,
     3911, 3912, 3913, 3914, 3915, 3916, 3917, 3918, 3919, 3919,
     3919, 3920, 3921, 3922, 3924, 3925, 3926, 3927, 3928, 3929,
     3930, 3930, 3931, 3932, 3933, 3933, 3933, 3934, 3934, 3934,
     3934, 3934, 3934, 3935, 3936, 3937, 3938, 3940, 3940, 3941,
     3942, 3943, 3945, 3946, 3946, 3947, 3948, 3949, 3950, 3951,
     3952, 3953, 3954, 3954, 3954, 3954, 3954, 3955, 3955, 3956,
     3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956,
     3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956,
     3956, 3957, 3957, 3958, 3958, 3960, 3960, 3960, 3960, 3960,

     3960, 3960, 3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961,
     3962, 3962, 3963, 3964, 3966, 3966, 3966, 3966, 3967, 3967,
     3968, 3969, 3969, 3969, 3969, 3969, 3969, 3969, 3969, 3969,
     3969, 3969, 3969, 3970, 3970, 3970, 3970, 3971, 3971, 3971,
     3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971,
     3971, 3971, 3971, 3971, 3971, 3971, 3971, 3972, 3972, 3972,
     3973, 3973, 3973, 3973, 3973, 3974, 3974, 3975, 3976, 3977,
     3978, 3979, 3980, 3981, 3982, 3983, 3984, 3985, 3986, 3987,
     3988, 3988, 3988, 3988, 3988, 3989, 3989, 3989, 3990, 3991,
     3992, 3992, 3992, 3993, 3994, 3995, 3996, 3997, 3998, 3998,

     3999, 4000, 4001, 4002, 4003, 4004, 4005, 4006, 4007, 4007,
     4008, 4009, 4010, 4010, 4010, 4011, 4012, 4013, 4014, 4015,
     4016, 4017, 4018, 4018, 4018, 4019, 4020, 4021, 4021, 4021,
     4021, 4021, 4022, 4022, 4022, 4023, 4024, 4024, 4025, 4026,
     4027, 4028, 4030, 4031, 4031, 4032, 4033, 4034, 4035, 4036,
     4036, 4036, 4036, 4036, 4036, 4037, 4037, 4037, 4038, 4038,
     4038, 4038, 4039, 4039, 4039, 4039, 4039, 4039, 4039, 4039,
     4039, 4039, 4039, 4039, 4040, 4041, 4041, 4041, 4041, 4041,
     4041, 4041, 4041, 4042, 4042, 4042, 4042, 4042, 4042, 4042,
     4042, 4044, 4044, 4045, 4045, 4046, 4047, 4048, 4048, 4048,

     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4049, 4049, 4050, 4050, 4050, 4050, 4051,
     4051, 4051, 4052, 4052, 4052, 4052, 4052, 4052, 4052, 4053,
     4053, 4053, 4053, 4054, 4055, 4055, 4055, 4055, 4055, 4055,
     4055, 4056, 4057, 4058, 4059, 4060, 4061, 4062, 4063, 4065,
     4066, 4067, 4068, 4069, 4070, 4070, 4070, 4071, 4072, 4072,
     4072, 4073, 4074, 4074, 4074, 4074, 4074, 4074, 4077, 4078,
     4079, 4080, 4081, 4082, 4083, 4083, 4084, 4085, 4085, 4086,
     4087, 4088, 4089, 4090, 4091, 4092, 4093, 4094, 4094, 4094,
     4095, 4095, 4096, 4096, 4097, 4097, 4097, 4098, 4099, 4099,

     4099, 4099, 4099, 4101, 4103, 4105, 4107, 4108, 4108, 4109,
     4111, 4112, 4113, 4113, 4114, 4115, 4116, 4116, 4116, 4117,
     4117, 4118, 4118, 4118, 4118, 4118, 4118, 4118, 4118, 4118,
     4118, 4118, 4118, 4118, 4119, 4119, 4119, 4119, 4120, 4120,
     4120, 4120, 4120, 4120, 4122, 4123, 4123, 4124, 4125, 4125,
     4125, 4125, 4125, 4125, 4125, 4126, 4126, 4126, 4126, 4126,
     4127, 4127, 4127, 4127, 4127, 4127, 4127, 4128, 4128, 4129,
     4129, 4129, 4130, 4130, 4130, 4130, 4130, 4130, 4130, 4130,
     4130, 4131, 4131, 4131, 4131, 4132, 4133, 4134, 4135, 4136,
     4137, 4138, 4139, 4140, 4141, 4142, 4143, 4143, 4143, 4144,

     4145, 4146, 4146, 4146, 4146, 4146, 4148, 4149, 4150, 4151,
     4151, 4152, 4153, 4154, 4155, 4156, 4157, 4158, 4159, 4160,
     4161, 4161, 4161, 4162, 4163, 4163, 4163, 4164, 4164, 4164,
     4165, 4165, 4166, 4167, 4168, 4169, 4170, 4171, 4173, 4174,
     4174, 4175, 4176, 4177, 4178, 4179, 4179, 4179, 4180, 4181,
     4182, 4182, 4182, 4182, 4182, 4182, 4182, 4182, 4182, 4183,
     4183, 4183, 4183, 4183, 4183, 4183, 4185, 4186, 4187, 4188,
     4188, 4188, 4188, 4189, 4189, 4189, 4189, 4189, 4190, 4190,
     4190, 4191, 4192, 4192, 4192, 4193, 4193, 4193, 4193, 4193,
     4194, 4194, 4194, 4194, 4195, 4195, 4196, 4197, 4198, 4199,

     4200, 4201, 4203, 4204, 4205, 4205, 4205, 4206, 4207, 4208,
     4208, 4208, 4208, 4208, 4209, 4210, 4211, 4212, 4213, 4215,
     4216, 4218, 4220, 4221, 4222, 4223, 4223, 4224, 4225, 4226,
     4227, 4228, 4229, 4230, 4230, 4231, 4231, 4231, 4231, 4231,
     4233, 4234, 4235, 4237, 4238, 4238, 4238, 4239, 4240, 4241,
     4242, 4242, 4242, 4242, 4242, 4242, 4242, 4243, 4243, 4243,
     4243, 4243, 4243, 4246, 4247, 4248, 4248, 4248, 4249, 4249,
     4250, 4251, 4251, 4251, 4252, 4253, 4254, 4255, 4255, 4255,
     4255, 4255, 4256, 4256, 4256, 4256, 4256, 4257, 4258, 4259,
     4260, 4261, 4261, 4261, 4261, 4262, 4262, 4262, 4263, 4263,

     4264, 4265, 4266, 4266, 4267, 4268, 4269, 4270, 4271, 4272,
     4273, 4274, 4275, 4275, 4275, 4275, 4277, 4278, 4279, 4279,
     4279, 4279, 4279, 4279, 4279, 4279, 4279, 4280, 4281, 4282,
     4282, 4283, 4284, 4284, 4284, 4284, 4284, 4285, 4285, 4285,
     4285, 4285, 4286, 4287, 4287, 4287, 4287, 4287, 4287, 4287,
     4288, 4289, 4290, 4291, 4292, 4293, 4294, 4294, 4295, 4296,
     4297, 4297, 4297, 4299, 4300, 4300, 4301, 4301, 4302, 4302,
     4302, 4303, 4304, 4304, 4304, 4304, 4304, 4304, 4304, 4304,
     4304, 4305, 4306, 4307, 4307, 4307, 4308, 4308, 4309, 4310,
     4311, 4312, 4313, 4314, 4314, 4316, 4317, 4318, 4319, 4320,

     4321, 4321, 4321, 4321, 4322, 4322, 4322, 4323, 4323, 4323,
     4324, 4325, 4326, 4326, 4328, 4329, 4330, 4331, 4331, 4331,
     4331, 4332, 4332, 4332, 4333, 4333, 4334, 4334, 4336, 4337,
     4338, 4339, 4339, 4339, 4339, 4340, 4341, 4342, 4343, 4343,
     4344, 4344, 4346, 4347, 4348, 4349, 4350, 4351, 4352, 4352,
     4352, 4354, 4355, 4356, 4357, 4357, 4357, 4357, 4359, 4360,
     4361, 4362, 4362, 4364, 4365, 4366, 4367, 4367, 4369, 4370,
     4371, 4372, 4372, 4372, 4373, 4375, 4376, 4377, 4378, 4380,
     4381, 4382, 4383, 4385, 4386, 4387, 4388, 4390, 4391, 4392,
     4393, 4395, 4396, 4397, 4398, 4400, 4401, 4402, 4403, 4405,

     4406, 4407, 4408, 4410, 4411, 4412, 4413, 4415, 4416, 4417,
     4418, 4420, 4421, 4422, 4423, 4425, 4426, 4427, 4428, 4430,
     4431, 4432, 4433, 4435, 4436, 4437, 4438, 4440, 4441, 4442,
     4443, 4445, 4446, 4447, 4448, 4450, 4451, 4452, 4453, 4455,
     4456, 4457, 4458, 4460, 4461, 4462, 4463, 4465, 4466, 4467,
     4468, 4470, 4471, 4472, 4473, 4475, 4476, 4477, 4478, 4480,
     4481, 4482, 4483, 4485, 4486, 4487, 4488, 4490, 4491, 4492,
     4493, 4495, 4496, 4497, 4498, 4500, 4501, 4502, 4503, 4505,
     4506, 4507, 4508, 4510, 4511, 4512, 4513, 4515, 4516, 4517,
     4518, 4520, 4521, 4522, 4523, 4525, 4526, 4527, 4528, 4530,

     4531, 4532, 4533, 4535, 4536, 4537, 4538, 4540, 4541, 4542,
     4543, 4545, 4546, 4547, 4548, 4550, 4551, 4552, 4553, 4555,
     4556, 4557, 4558, 4560, 4561, 4562, 4563, 4565, 4566, 4567,
     4568, 4570, 4571, 4572, 4573, 4575, 4576, 4577, 4578, 4580,
     4581, 4582, 4583, 4585, 4586, 4587, 4588, 4590, 4591, 4592,
     4593, 4595, 4596, 4597, 4598, 4600, 4601, 4602, 4603, 4605,
     4606, 4607, 4608, 4610, 4611, 4612, 4613, 4615, 4616, 4617,
     4618, 4620, 4621, 4622, 4623, 4625, 4626, 4627, 4628, 4630,
     4631, 4632, 4633, 4635, 4636, 4637, 4638, 4640, 4641, 4642,
     4643, 4645, 4646, 4647, 4648, 4650, 4651, 4652, 4653, 4655,

     4656, 4657, 4658, 4660, 4661, 4662, 4663, 4665, 4666, 4667,
     4668, 4670, 4671, 4671, 4672, 4672
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   24,   24,   24,   24,   25,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   38,   40,   41,   38,   42,   38,   43,   44,   45,
       46,   47,   48,   49,   38,   38,   50,   38,   51,   38,
       52,   53,   54,   55,   56,    1,   57,   58,   59,   60,

       61,   62,   63,   64,   65,   38,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   38,   81,    1,   82,   83,    1,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,

       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84
    } ;

static yyconst flex_int32_t yy_meta[85] =
    {   0,
        1,    2,    3,    4,    2,    5,    6,    7,    8,    1,
        9,   10,   11,   12,   13,    1,   14,    1,   15,   16,
       17,   17,   17,   17,   17,   18,   19,   20,   21,   22,
        1,   23,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   25,   26,   27,   28,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       29,   30,   31,   32
    } ;

static yyconst flex_int16_t yy_base[4470] =
    {   0,
        0,    2,   22,    0,  105,  116,  169,    0,  253,    0,
      337,    0,  421,    0,  503,  505,  557,    0,  119,  519,
      641,    0,  723,  725,  779,    0,  863,    0,  946,  957,
      967,  978,  134,  739, 1059,    0,  741,  996, 1143,    0,
     1227,    0,  533, 1033, 1309, 1311, 1337, 1356, 1006, 1371,
     1374, 1390, 1471,    0, 1392, 1415, 1553, 1556, 1567, 1581,
     1612, 1623, 1663, 1694, 1776,    0, 1860,    0, 1943, 1954,
     1965, 2001, 1626, 1649, 1670, 1704, 2007, 2036, 2054, 2060,
     2087, 2093,  145,  755, 1429, 1445, 2103, 2109, 2119, 2125,
     1722, 1740, 2145, 2156, 1743, 2175, 2201, 2215, 1980, 2182,

     1418, 2230, 2250,    0, 2332, 2334, 2353, 2364, 2375, 2414,
     2467,    0, 2551,    0, 2635,    0, 2719,    0, 2801, 2803,
     2424, 2435, 2385, 2442, 2885,    0, 2817, 2819, 2969,    0,
     2833, 2835, 3053,    0, 2849, 3135, 3155,    0, 3237, 3240,
     3255, 3258, 3265, 3284, 3281, 3287, 3358,    0, 3442,    0,
     3524, 3534, 3584,    0, 3668,    0, 3751, 3832, 3914,    0,
     3303, 3324, 3544, 3777, 3998,    0, 3787, 3803, 3862, 3865,
     4082,    0, 3754, 3805, 4164, 4167, 4186, 4200, 4219, 4233,
     3835, 4189, 4263,    0, 4347,    0, 4429, 4431, 4445, 4447,
     4461, 4463, 4482, 4484, 3891, 4498, 4512, 4514, 4533, 4536,

     4551, 4554, 4565, 4595, 4635, 4709, 4784,    0, 4609, 4654,
     4669, 4672, 4728, 4747, 4598, 4866, 4868, 4882, 4884, 4902,
     4687, 4762, 4222, 4904, 4933, 4944, 4955, 4970, 4981, 4992,
     5045,    0, 4579, 5129, 5213,    0, 5002, 5297, 5379, 5381,
     5452,    0, 5536,    0, 5618, 5620, 5690,    0, 5773, 5784,
     5013, 5023, 5395, 5397, 5411, 5417, 5634, 5803, 5813, 5866,
    11367,29884,29884,29884,29884,29884,    1,    0,  154,29884,
     1027, 1404,29884,29884,29884,   96,   14, 1684, 1976, 2846,
      769, 4700, 4924,11339,29884, 5648,  133, 1047, 2167,  516,
     1735, 1459, 5886,29884,29884,  736,29884,  114,11337,29884,

    11300, 2398, 4525, 5880,29884,29884,29884,29884,    0,29884,
      125,29884,29884,    0,    0,  515,  969,29884,11298,    0,
    29884,    0,29884,29884,29884,29884,29884,29884,  135,11323,
     2194,29884,  158,29884,29884,29884,    0,29884,  494,29884,
        0,29884,29884,29884,29884,29884,29884,  509,29884,29884,
    29884,29884,29884,    0,29884,  531,    0,29884, 5835, 5969,
     6052,    0,29884,11314,29884, 2073, 4966,11330,  750,29884,
    29884,29884,29884,29884,29884,  714,11269,  681,11270,29884,
    11270,29884, 2814, 3315,29884,29884,29884,29884,29884, 3563,
      745, 4879, 6132, 5408, 5653, 1765, 1328, 6060,   33,    0,

     5899, 1411, 5666,29884,  937,11313,11294, 5919,  936,29884,
    11289, 5867, 5925, 6068,11264,29884, 6072, 6080, 6085, 6116,
     6143, 6076, 6157, 6211, 6221, 6225, 6230, 6238, 6257, 6266,
     6270, 6300, 6284, 6311,29884,    0,29884,    0,    0,    0,
      948,  476, 5931, 5940, 2455, 6315,11204, 6344, 5944, 6170,
     6362, 2083,    0,29884, 6381,  956,29884,29884,    0,29884,
      958,29884,29884,29884,29884, 6385,29884, 2345, 3824,29884,
    29884,29884,29884,29884, 2241,  981,29884,29884,29884,29884,
    29884,29884,  987,29884,29884,29884,29884,29884,  995,29884,
    29884, 6404,    0,    0,29884, 1024, 5796,    0,11169,11156,

    11164,11141,11160,11154,  663,11144,29884,29884,29884,29884,
    29884, 5392, 1300,29884,11183,29884,29884,29884,29884, 1312,
    29884,29884,    0, 3346, 2876, 3148,29884,  987,11144, 1328,
    11168,11188,29884, 3573,29884,  993,29884,    0,29884, 6352,
     6391, 6127, 6409, 4253, 6416,11153, 6424,    0, 1589,29884,
    29884, 1041,11125, 1332,11139,11158,29884,29884, 6434, 1598,
     1053,29884,29884, 1347,  140, 6442,29884,29884,29884,29884,
    29884,11123, 1351,    0,29884,29884,29884,29884, 1360,29884,
    29884,29884,11138, 1352,29884,29884,29884, 1425, 1455,    0,
     1575,    0,    0,    0,11116, 1431, 1343,29884, 1350, 1386,

     1559, 1639, 1619,29884,29884,29884,29884,29884, 3904, 4775,
    29884,29884,29884, 1603,29884,29884,29884,29884,29884,29884,
    29884,    0,29884,    0,    0, 1621,29884,29884,    0,29884,
        0,    0,    0, 1630,    0,29884,    0,11056,11049,29884,
    29884,29884,29884,29884, 1638,29884,29884, 6453, 6462,29884,
    29884,29884, 1659,11059,    0, 5036, 5436,    0,    0,    0,
    11093,29884, 1661, 1656,    0,29884,  111,29884,    0, 6163,
        0,29884, 6466, 6480, 6484,    0,    0,29884,29884,29884,
    29884,29884, 1698,11049,11047,  105,11024,29884,29884,29884,
    29884,29884,11077,29884,29884, 1712,    0, 1752,29884,29884,

    29884,29884, 1932,29884,29884, 6488,29884,29884,    0,29884,
     6493, 1934, 6498,    0,29884,    0,29884,11067,    0,    0,
     1938,    0,29884, 1464, 5440,    0,29884,    0,    0,    0,
        0,    0,29884, 1945,    0,29884, 6512,29884, 6502,    0,
        0,    0,    0,    0, 1465, 1949,29884,29884,10999,10995,
    11003,10993,11000,10999,29884, 1576,    0,29884,  526, 2000,
     2014,    0,    0,29884,11014,11009,11003,10989,    0,    0,
        0,    0,29884, 6520, 6530,29884,29884,10981,29884,29884,
     6540,11003, 1969, 6544,11004,10993,10979,10999,29884,29884,
     5680, 5956, 6549, 6563, 2048,29884, 6568, 6582, 6596, 6610,

    29884, 6624, 1979, 6628,29884, 6632,29884,29884,29884,29884,
    29884,29884,29884,29884, 1996,10977, 6636,29884, 6648, 6652,
     6656,29884,29884, 6666,29884, 1997,10977, 6677,29884,29884,
    29884,29884,29884, 6683, 2044,29884, 6691,10948,    0, 5444,
     6696,29884,29884,10948,29884, 6703, 2078,29884,29884,29884,
    29884,29884,29884,29884,29884, 2088,10967,    0,    0,    0,
    29884,10964,29884,29884,29884,29884,29884,10968, 2089,    0,
    29884,29884,29884,29884,29884,29884,29884,10962, 2099,    0,
    29884,29884,    0,29884,29884,    0,10925,29884,29884, 2105,
        0,29884,29884,    0,10923, 2159,29884,29884,    0,29884,

    29884,    0,10921,29884,29884, 2196,    0,29884,29884,    0,
    10919, 2197,29884,29884, 1996,29884, 2018,29884,29884,29884,
    29884,29884,29884, 2210,29884, 6707, 6711,29884,29884,29884,
    29884,29884, 2211,10943,10940,10882,29884,29884,29884,29884,
        0,10894, 2323,29884,    0,29884,29884,29884,29884,29884,
    29884, 6717, 2344,29884, 6722, 6729,29884,29884,29884,29884,
    29884, 6733, 2355,29884,    0,29884,29884,    0,29884, 2366,
        0,29884,29884,    0,    0,29884,29884, 2376,29884,29884,
        0,29884,    0,    0,    0,10922, 2384, 1508, 2446, 6748,
        0,29884,    0,    0,    0, 2394, 6697,29884,29884,29884,

    29884, 2405, 1496,    0,10926,    0,29884,29884,29884,29884,
     2415,    0,    0,    0,10923,    0,29884,29884,29884,29884,
    29884, 2792,    0,    0,29884,29884,29884,29884, 2813,29884,
    10857,29884, 6768, 6776,29884,29884,    0,29884, 2815,29884,
     6785,10873, 6791, 6801,    0, 6809,29884,29884,29884,29884,
     3548, 2839,10850,29884, 6813, 6821, 6827,29884,29884, 6839,
    29884,29884,29884, 2847,10889, 6847,29884, 4952,29884,29884,
    29884, 2853, 2435,10839,10840,10832,29884,29884,29884,29884,
    29884,29884, 3124,29884,29884,29884,29884, 3125,10892, 3251,
    10891,10883,10880, 3261,    0, 3298,29884,    0,    0,    0,

     3126, 3226,  485, 6795, 6816, 4626, 3235, 3254,    0,29884,
        0,    0,29884,    0,10861, 3282,10856, 1659, 3340, 6883,
    29884,29884, 2036, 2175,29884, 3796, 6887, 3310, 1006,  744,
    29884,10867, 6897, 6906, 6910,10842, 3307, 6931, 6939, 6947,
     6951, 6963,    0, 6977, 6982, 7004, 6995, 7013, 7022, 7030,
    29884,29884, 7049,29884,29884, 3528, 7034, 7069, 7079, 7086,
     7095,10841,29884, 7099, 7106,10836, 7111, 7124, 7132, 7137,
        0, 7145, 7149, 1319, 3851, 7157,10787, 7171,29884, 7175,
     7187, 7191,    0, 1596, 1752,    0, 3515,10827,10830, 3774,
    10826, 4632,10776,29884,    0,    0,29884, 7203,10786,29884,

     3768,    0,    0,    0,    0, 7207, 7216, 7228, 7239, 7247,
     3770, 7315,    0, 7251, 7265, 7398, 7402, 7273, 7406,29884,
     7410,10801, 7427,10783,10796,10794,10748, 3814,10722, 3470,
    10733,10695,10752, 7271, 7436, 3868, 7440, 3876, 7486, 7445,
     4668,10736, 4519,10684,10682,10679,10675, 3754,10666, 2170,
    10660,10665,10652, 2275,10654, 3775,10648,  918,10628,10638,
     3832, 7296, 7459, 7470, 7480,10637,10631, 7474, 7504,    0,
     7522,    0,29884, 1418, 7562, 7576, 7590,10664, 7594, 7308,
     7608, 5777,    0,    0, 7623,10610,10611,29884,    0, 7517,
     7631, 7649, 7653, 7671, 7675, 7697, 7705,10646, 7709,10611,

     7717, 7724, 7736, 7756, 7763, 7768, 7772, 7783, 7799, 7803,
     7812, 7816, 7831, 7846, 7850, 7858, 7863, 7891, 7899, 7904,
     7931, 7937, 7941, 7945, 7950, 7978, 7983, 7988, 8015, 8022,
     8029, 8033,    0,    0,    0,10592,10584, 7995,10614, 8060,
     8068, 8079, 8083,    0, 8091, 8106, 8101, 8118,29884, 8131,
     4713, 4901,    0, 8135, 6590,    0, 7512, 8150, 8154, 8188,
     8158,10580,10561,10568,10550,10569,10563, 1636,10553,    0,
     2204, 4751, 8166, 8170,    0,10548,10542,10524,10539,10534,
    10541,10512,10499,10510, 8180, 8193,29884,    0, 8197, 8205,
     4180,    0, 8209,10546, 8201, 8224,    0,10518,29884, 8233,

    10476, 8247, 8251, 8237, 8276,10517, 8280, 8284,10505, 8288,
     8309,    0, 8317,    0, 8325, 8329, 8337,    0, 4246, 8344,
    10517, 8335, 2226, 4895,10500,29884, 8368, 4153, 4472, 4181,
    29884,29884,10513, 1987, 8372, 4213,29884,29884,29884,29884,
     4742,10512,10510, 2163,10507, 2188,    0, 4550,10490,29884,
    29884,    0, 2049,29884, 2386, 3526, 3828,29884, 8376,    0,
        0,    0,    0,    0,    0,    0,    0,10431,10432, 8380,
    10441,10421,    0, 8391,29884,29884,29884,10425,10424,10430,
      953,10481, 1709, 8395, 8399, 8404, 8418, 8422, 8426, 8431,
     8438, 8446,10405,    0,    0,10410,10386,10380,10376,10363,

    10425,29884, 4428, 8450, 4435,    0, 2799, 5658,    0,    0,
    29884,    0,    0,    0, 4456, 8454,    0,    0,    0,    0,
     8459, 8467,10410, 8485, 8489,29884,    0, 4622,    0,    0,
    10354,10356,10344,10349, 1564,10341, 4680,  742,  999,10388,
    10377, 4844, 1570,    0,    0,10357, 1009,10356,10360,    0,
        0,    0,    0,10382, 8474,29884, 8499, 7491,29884,29884,
    29884,29884, 8504, 8514, 8522, 8536,29884, 8540, 4761,29884,
     8545, 8559, 8573, 8587, 8591, 8595,10338,10361, 8599, 8604,
    10358, 8612,10357, 8618, 8626,    0, 8646,    0, 8654, 8658,
     8666, 8671, 8684, 8691,29884,29884,29884,10320,29884,    0,

     8696,10360, 8684, 8707, 4473, 3771, 2059,29884,    0,    0,
    10344,10336,10324,29884,29884,29884,29884,29884,29884,29884,
    29884,    0,10337, 8692,    0,    0,    0,10336, 8698,    0,
    10331, 8702,    0,10325, 8707, 8730, 4937,29884, 8734,29884,
     4893,10265,    0,10321, 8723,    0, 8754,29884,29884,29884,
     8758, 8766, 8774,    0,    0,    0,29884,    0,    0,29884,
        0,10259,10261, 5013, 8780, 8784,    0,    0,    0,10254,
    10253, 4644,10245,10262,10255,10250,10242,10239, 4522,    0,
        0,10295,    0,    0,    0,    0,    0,10294,    0,    0,
        0,10141, 8788, 8796, 8805,10156, 8809, 8813, 8829,29884,

     8839,10155, 8834, 8855, 8863, 8847, 8871, 8875,29884, 8887,
     5847,    0, 5894,10180,10137, 8891,10147, 8899, 8907,    0,
     8916,    0, 8924, 8928, 8936, 6252, 5858,10099,10093, 6105,
     4686,10090,10085,10083,10142, 4978, 5822,10118,10134,10123,
        0, 4989,10061, 4488,29884,29884,29884, 1998,10049,10077,
    10015,10012, 4922,10005,10012,10011,10006, 9996, 6554,10048,
    10025,29884, 4549, 6090,    0,29884,29884,29884, 6056, 9968,
     4884, 6107, 8940, 8944, 3852, 2118,10008, 8954, 8961, 8981,
     8997, 9001, 8988, 9010,    0, 9019, 9027, 9033, 9045, 9057,
    29884,    0, 6174,29884,10020, 9062, 9969, 9071, 9077,10000,

     1721,29884,    0,    0, 9986, 6265, 9089, 9102, 9106, 9114,
     9131, 9145,    0, 9969, 9149, 9934, 9925, 9903, 9900, 9907,
     9893, 9950,29884, 9941, 9143, 3895, 2124, 4457, 3549, 9176,
     9157, 9183, 2397, 9875, 4670, 9883, 9894, 9870, 9855, 9860,
     1697, 9841, 9832, 9846, 3281, 4458, 9837, 9832, 9813, 9826,
     9808, 9812, 4510, 9819, 9804, 9796, 1607, 9785, 9790, 9769,
     9758, 9761, 9171, 9191, 9202, 9770, 9760,    0, 9252, 9266,
     9208, 9280, 9284, 9296, 9309, 9790, 9785, 6320, 6398, 6865,
     2789, 7584, 6957, 8111, 3480,    0, 9313, 9751, 9738, 9323,
    29884, 9778, 9327, 9340, 9345, 9352, 9364, 9371, 9376, 9389,

    29884, 9383, 9396, 9402, 8965, 9716, 9442, 9446, 9450, 9455,
     9460, 9487, 9491, 9497, 9501, 9505, 9533, 9537, 9542, 9551,
     9579, 9583, 9587, 9593, 9620, 9625, 9629, 9633, 9639, 9666,
     9670, 9675, 9683, 9702, 9714, 9722, 9731, 9742, 9758, 9762,
     9769, 9773, 9777, 9809, 9816, 9821, 9719, 9683, 9410, 9804,
     9848, 7610, 8096, 9661, 9843, 9681, 9684, 9661, 9677, 9667,
     9653, 9626, 9615, 9587,29884,    0, 6243,29884, 9611, 9256,
     9545, 9543, 9358, 9520, 9506, 9511, 9506, 9546, 9518, 9859,
    29884, 9543, 9865, 9416, 9877, 9559,29884, 9552, 9817, 9597,
    29884, 9789,    0,29884, 9480, 9497, 9901, 9909, 9890, 9917,

        0, 9921, 9531,29884, 9520, 9916,29884, 4480, 3860, 9526,
     4619, 4624, 9513, 9522, 9442, 9457, 9452, 9438, 9437, 9414,
        0, 2355, 9946, 9954,29884, 9962, 9411, 9968, 9980, 9930,
    29884,29884, 9410, 9412,29884, 9988, 9992, 9452, 9445, 9438,
     1632,29884, 9437, 9370, 9353, 9351, 9353, 9343, 9325, 9297,
     9361, 9322, 9325, 4851, 5364, 9298, 9298, 9283, 9269, 9259,
     9291,29884, 9290, 9986, 7616, 9974, 9211, 7924, 9998, 9209,
     9236, 9228,29884,10009,10029,10037,10017,29884,    0,10044,
    10052,29884, 9267,29884, 9266,10050, 4663, 4714, 9248, 2378,
     9265, 9261,29884, 9250,10054, 9228,29884, 9227,10067, 9218,

    29884, 9208,10071, 9206,29884, 9204,10075,10079, 5425, 9189,
     9142, 9189,29884, 9188,10093, 9105, 9099, 9108, 9088,29884,
     9089, 9081, 9074, 9069, 9074, 9067,    0,29884, 9114,29884,
     9101, 9030,10104,10056,10108,10120,10126, 9074, 9073, 9016,
        0,10130, 5642, 9013, 9015, 9015, 4718, 3268, 9003,    0,
    10213, 8997, 8981,29884, 8985, 8977, 8970, 8944, 8929, 6250,
     6329, 2111, 3749, 8935,29884,29884,10138,10144,    0,10149,
    29884, 8965,29884, 4902,29884,10296,10300,29884,29884, 8947,
     8963, 5775,10312,10174,10325, 8949,10182,10337,10186, 8954,
    10190, 8878, 8878, 8863, 8858, 8846, 8885,29884,10323, 8859,

     8858,10407,10350, 8814, 8808, 8807, 5559, 8823, 8799, 8830,
     8770, 8750, 8750, 8736, 8699, 8693, 8682, 8680, 8656, 8636,
     8641, 8606, 8614, 8617, 8618, 8599, 8602, 8589, 8583, 8575,
     8533, 1998, 8538, 8582, 8517, 8510, 8507, 8508, 8483, 8470,
     8459, 8476, 6149, 8466, 8455,10362,10376, 8485,10394,10198,
    10421,10432,10355,29884,10438,10483, 8487,10480,10504, 8469,
    10518,29884, 7926, 4129,29884, 8465, 8211,29884, 8385, 5628,
     4136,    0, 8405, 8406,    0,10452,10522,10534,10547,10552,
    10559,10571,10578,10590,10584,10611,10602,10616,10630,10645,
    10649,10657,10665,10676,10741,10684,10711,10692,10772,10776,

    10785,10780,10812,10696,10816,10824,10829,10843,10856,10861,
    10875,10870,10888,10903,10908,10915,10920,10935,10947,10955,
    10963,10982,10993,11009,11013,11022,11026,11040, 8405, 8400,
    29884,29884, 8371, 8371,10446, 8359, 8342, 8348, 8341,10951,
     8353, 8332, 8316,10565, 8316, 8325, 8303, 8283,10723,29884,
     8285, 8320,11054,11067,11077, 6372, 8331,29884,11065, 8265,
        0,11088,11092,11101, 8311,29884,11100, 8277, 8275, 5666,
     8225, 8223, 8212, 8213, 2059, 8214, 3520,11126,29884,11096,
     8208, 8183,11130,29884, 8185,29884, 8183, 8145, 3243, 8153,
     8143,    0, 5357, 5887, 8164,29884, 8132, 8135, 8140, 8164,

    29884,11125,11136,11150,11154, 8140, 8153,29884,11148, 8120,
    29884,29884,    0, 8135,29884,11161, 8133,29884,11165, 8130,
    29884,11169, 8126,29884,11182, 6397,29884,   99,  504,29884,
    11186,  487,  703,  894,    0, 1246, 1304, 1302, 1353, 1384,
    11152,29884, 3729, 6915, 1399, 1492, 1514, 1529,29884, 1654,
     1915,29884,11231,    0, 1944,    0, 1963, 1976, 1988, 2076,
     2081, 4936, 5598,11257, 5840,11324,11328, 6167,11159,11219,
        0,11340,    0,11353,11344,11370, 2171, 2278, 2304, 2326,
     2353, 2429, 2441,29884,29884,11435,11380, 2765, 3087, 3089,
     3165, 3184, 3213, 3206, 3294, 3288, 3472, 3475, 3523, 3685,

     3711,11388, 3713, 3783, 3822, 3827, 3842, 4100, 4122, 4173,
     4187, 4189, 4193, 4375, 4371, 4399, 4418, 4446, 4444, 5755,
     4456, 4477, 4501, 5990, 4512, 4527, 4543, 4545,29884, 4603,
     4618,11395,11406,11420, 4671, 4668,11415,11448,29884,11433,
    11461, 4693, 4699,    0, 4693,29884,11511,11515,11533,11537,
    11555,11559,11577,11595,11599,11583,11624,11628,11637,11670,
    11674,11679,11683,11687,11714,29884,11718, 4755, 4893,11726,
    11730,29884,11734,11762,11766,11770,11774,11782,11810,11814,
    11818,11824,11828,11856,11861,11869,11898,11905,11909,11913,
    11940,11944, 4863, 4869,11949,11953,11957,11985,11989,11993,

    12002,12021,12029,12035,12039,12048,29884, 4908, 4933, 4957,
     4963, 4981, 4983, 5330, 5341, 5365,11197, 5361, 5354, 5376,
    11475, 5557,11632,29884,11873,11410,    0, 5633, 5636, 5612,
    29884,12066, 5665, 5668,29884,29884,11461,12075,29884,    0,
     5707, 5723, 5733,29884, 5734, 5738, 5739, 5751, 5757, 5761,
     5778, 5778, 5844, 6032, 5810, 5875, 5808,29884, 5852, 5875,
    12079, 5885, 5895,29884, 5899, 5905, 5906, 5919, 5938, 5943,
     5944, 5951,    0, 5910, 5956, 5974, 6005, 5993,29884, 6023,
     6020, 6034, 6057, 6047, 6053, 6055, 6064, 6084, 6093, 6096,
     6095, 6109, 6111, 6121, 6274, 6338, 6139,    0, 6180,29884,

     6141, 6138, 6150, 6164, 6162, 6262, 6206, 6168, 6174, 6171,
     6193, 6210, 6221, 6229,12095,12101,    0,12113,12126, 6244,
     6246, 6233,11619, 6242,12195,12121, 6271, 6263, 6272, 6293,
     6299, 6294, 6297, 6320, 6308, 6334,12130, 6318,12139, 6328,
    12146,12153, 6340, 6357, 6354, 6355, 6370, 6372, 6361, 6367,
     6383, 6388, 6385, 6382, 6384, 6387, 6413, 6416, 6409, 6421,
     6419, 6448, 6453,12157, 6506, 6463, 6461, 6467, 6468,12161,
    12169, 6500,12183,29884, 6465,12188,12210,12229,12271,12283,
    12290,12295,12302,12314,12308,12320,12327,12360,12364,12368,
    29884,12372,12376,12380,12408, 6471, 6464,12412,12416,12427,

    12454,12460,12465,12469,12473,12500,12505,12509,12513,12517,
    12544,12548,12552,12579,12583,12588,12596,12623, 6498, 6484,
    12627,12636,12654,12663,12670,12674,12681,12690,29884,12701,
    12709,12720,12728,12736, 6486, 6505,12214, 6498, 6501, 6516,
    12748, 6515, 6529,12241, 6529,12556,12277,12767,29884,12643,
     6523,12755,12771, 6534,12782,29884,12786, 6542, 6530, 6529,
    29884,29884, 6577, 6543, 6542, 6551,29884, 6588, 6719, 6585,
     6753, 6587, 6616, 6556, 6640, 6577, 6577, 6596, 6589, 6600,
     6613, 6601, 6609, 6608, 6620, 6617, 6624, 6627, 6642, 6658,
     6832, 6833,29884, 6662,    0, 6671, 6671, 6675, 6673, 6687,

     6730,29884, 6706, 6692, 6707, 6707, 6714, 6711, 6724,12794,
    12808, 6766,29884,12812, 6730,12821, 6740,12825,12838,12842,
    12846, 6739, 6746, 6740, 6744, 6762, 6774, 6781, 6780, 6823,
     6793, 6801,12852, 6787,12856, 6789,12860, 6801, 6803,12872,
     6804,12876, 6820, 6822,12880, 6801, 6808,12888, 6833, 6839,
     6843, 6830, 6831,12892, 6847,12896,12900, 6865, 6860,12907,
     6872, 6857, 6871, 6872,29884, 6870,12918,12923,12941,12945,
    12965,12969,12988,12992,13010,13015,13019,13023,13028,13061,
     6880, 6882,13065,13069,13080, 6901, 6888,13096,13107,13111,
     6928,13124,13141,13200,13153,13158,13168,13219,13232,13173,

    13236,13246,13263,13273,13290,13300,13304,13309,13317,13336,
    13349,13353, 6895, 6894, 6915,13362,13390,13395,29884,13399,
    13404,13408, 6906, 6901,13435,13439,13444,13185, 6924, 6928,
    13449,13453,13471, 6925, 6920, 6941,13475,29884,13479,13487,
     6950,13491,13498, 6951,13505,13509, 6958, 6962, 6956, 7020,
     6971, 6960, 6966, 7033, 7018, 7011, 7058,    0, 7016, 7059,
     6994, 7117, 6992, 7000, 6990, 7015, 7005, 7025, 7026, 7033,
     7025, 7059, 7048,29884,29884, 7050, 7063, 7063, 7062, 7058,
     7078, 7064,29884, 7094,    0, 7089, 7096, 7094, 7107, 7098,
    13513,13517,13523, 7109,13531,13538,13542, 7109, 7115, 7124,

     7121, 7110, 7116,13546, 7126, 7156, 7125, 7127,13550, 7142,
     7144, 7140,13554, 7142,13558, 7164, 7157,13569,13573,13581,
    13585,13589,13594, 7167,13598, 7182, 7166,13602,13610, 7172,
     7167,13614,13618,13627,13631, 7174, 7165,13647, 7177, 7209,
    13651,13655,13675,13679,13697,13702,13720,13724,13736,13742,
    13746,13750,13777,13783, 7172,13794,29884,13813, 7172, 7181,
    13818,13822, 7264, 7192, 7188, 7195,13826, 7244,13830,13857,
    13862,13866,13870,13875,13893,13902,13906,13910,13922,13937,
    13942,13947,13955,13974,13983,13987,13992, 7205, 7224,14001,
    14019,14028,14035,14039, 7228, 7213,14046,14053,14073, 7212,

     7228, 7229,14080,14086,14095,14100,14111, 7234,14115,    0,
     7245, 7235, 7295,    0,29884,29884, 7245, 7298,    0, 7266,
        0, 7272, 7681,14119, 7316, 7349, 7350, 7349, 7341, 7353,
     7366, 7356, 7452, 7432, 7346, 7360, 7365,29884, 7365, 7372,
     7383, 7401, 7390,14123,14127,14133,14141,14148, 7398, 7410,
     7403,14152, 7420, 7416,14156, 7424, 7438, 7428,14160,14164,
     7422, 7430,14168,14175, 7449,14179,14183,14187,14191, 7467,
    14197,14204, 7475, 7466, 7473,14212, 7475, 7489, 7471,14216,
    14222,14226,14230, 7488,14234,14242,14246,14264,14271,14277,
    14306,14310,14290,14328,14340,14344, 7482, 7499,14348,14355,

    14359, 7552, 7512, 7497, 7507,29884,14375,14382,14388,14392,
    14419,14445,14423,14464,14476,14480,14491,14511,14519,14530,
    14428, 7499,14538,14432, 7576, 7505,14546, 7502, 7506,14565,
     7526,14484,14573,14577,14584,14592,14596,14606,14613,14617,
    14621, 7509,    0,29884,    0, 7553, 7563, 7662, 7690,14625,
     7526, 7538, 7541, 7552, 7549, 7563, 7743, 7741, 7680, 7559,
     7572, 7577, 7592, 7585, 7603,14629,14633,14639,14647, 7596,
     7620,14654,14658, 7627,14662,14666, 7628,14672, 7629,14676,
    14680,14684,14688,14692,14696,14702, 7648, 7627, 7631,14706,
    14710, 7673, 7641,14717,14721,14725,14729,14747,14759,14763,

    14783,14787,14795,14799,14803, 7655,14807,14814,29884, 7725,
     7660, 7666, 7679,14826,14834,14838,14842,29884,14912, 7725,
     7733,14846,14865,14995,14873,14999,14877,15003,15007,15011,
    15015,14884,29884,15044,15049, 7700, 7705, 7721, 7712,15058,
    14906,14931,15076, 7718, 7788, 7821, 7877,29884, 7959,29884,
     7725, 7728, 7719, 7747, 7744, 7883,29884, 7761, 7768, 7759,
     7776, 7763,15080,15088,15107, 7788,15111,15115,15119,15124,
    15132, 7796, 7801,15136,15140,15144,15148, 7827, 7795,15152,
    15156,15160, 7817, 7810, 7846, 7818,15164,15168,15182,15186,
    15194, 7824, 7840, 7843,15203, 7847, 7840,    0,15217,15221,

    15230,15239,15249,15257,15266,15276,15282,15286,15290,15294,
    29884,15317,15323, 7843, 7857,15328,15335, 7854, 8040, 8042,
     7843, 7857, 7869, 7880, 7899, 7900,15344,15351,15355, 7895,
    15359,15363, 7916, 7940, 7915,15369,15380, 7946, 7932, 7956,
    15384,15388,15394,15409, 7935, 7955, 7942,15413,15421,29884,
    15426,15430,15434,15441,15458,15468,15474,15485,15501,29884,
    15505, 7946,15510,15517, 8210,    0, 8266,    0, 7948, 7949,
    15521,15525, 7965, 7978, 7991,15532, 8010, 7981, 8010,15536,
    15540,15544,15550, 7986, 7990,15562,15566,15570,15574,15578,
    15617,15621,29884, 8010,15625,15632,    0,    0,15636,15640,

     7998, 8026,15644,15651, 8031, 8002,15655, 8004, 8020,15659,
    15673,15677, 8027,15681,15688,15692,15704, 8022, 8048,15708,
    15712,15716, 8024,15724,15733,15737, 8053,15741,15751,15762,
    15766,15771, 8070,15775,15779,15783,15800,29884,15804,15808,
    15812,15816,15823,15827,15831,15835,15840,29884,15844,15848,
    15859,15866,15872,15876,15884, 8054, 8066,15890,15901,15905,
    15909, 8060,15913,15920,15924,15928,15934,15940,15947,15954,
    15958,15963,15967,29884,15971,15978,15983,15987,15996,16003,
    16007,16012,16016,16023,16027,16031,16037,16044,16048,16056,
    16060,16067,16071,16075,16081,16088,16092,16100,16104,16111,

    16115,16119,16125,16132,16136,16144,16148,16155,16159,16163,
    16169,16176,16180,16188,16192,16199,16203,16207,16213,16220,
    16224,16232,16236,16243,16247,16251,16257,16264,16268,16276,
    16280,16287,16291,16295,16301,16308,16312,16320,16324,16331,
    16335,16339,16345,16352,16356,16364,16368,16375,16379,16383,
    16389,16396,16400,16408,16412,16419,16423,16427,16433,16440,
    16444,16452,16456,16463,16467,16471,16477,16484,16488,16496,
    16500,16507,16511,16515,16521,16528,16532,16540,16544,16551,
    16555,16559,16565,16572,16576,16584,16588,16595,16599,16603,
    16609,16616,16620,16628,16632,16639,16643,16647,16653,16660,

    16664,16672,16676,16683,16687,16691,16697,16704,16708,16716,
    16720,16727,16731,16735,16741,16748,16752,16760,16764,16771,
    16775,16779,16785,16792,16796,16804,16808,16815,16819,16823,
    16829,16836,16840,16848,16852,16859,16863,16867,16873,16880,
    16884,16892,16896,16903,16907,16911,16917,16924,16928,16936,
    16940,16947,16951,16955,16961,16968,16972,16980,16984,16991,
    16995,16999,17005,17012,17016,17024,17028,17035,17039,17043,
    17049,17056,17060,17068,17072,17079,17083,17087,17093,17100,
    17104,17112,17116,17123,17127,17131,17137,17144,17148,17156,
    17160,17167,17171,17175,17181,17188,17192,17200,17204,17211,

    17215,17219,17225,17232,17236,17244,17248,17255,17259,17263,
    17269,29884,17276,17280,29884,17289,17321,17353,17385,17417,
    17449,17481,17513,17545,17577,17609,17641,17673,17705,17737,
    17769,17801,17833,17865,17897,17929,17961,17993,18025,18057,
    18089,18121,18153,18185,18217,18249,18281,18313,18345,18377,
    18409,18441,18473,18505,18537,18569,18601,18633,18665,18697,
    18729,18761,18793,18825,18857,18889,18921,18953,18985,19017,
    19049,19081,19113,19145,19177,19209,19241,19273,19305, 8154,
    19336,19367,19398,19429,19460,19491,19523,19554,19585,19616,
     8235, 8277, 8272,19638,19670, 8283, 8320, 8292, 8330, 8293,

     8449,19701, 8321,19732, 8436,19764,19795,19826,19857, 8504,
     8549,19888,19920,19952,19983,20014,20045, 8450, 8548, 8478,
     8594,20077,20109,20141, 8497,20172,20203,20234,20265,20297,
    20329,20361,20393,20425,20457,20489, 8498, 8620,20521, 8534,
    20539, 8535,20570, 8547,20601, 8600, 8716,20633, 8609,20660,
     8610, 8748,20692, 8621, 8830,20724, 8622,20755,20787, 8658,
    20803, 8659, 8881, 8710, 8882, 8742, 8955,20835,20866,20897,
    20928,20959,20990,21021,21052,21084,21116,21148, 8770, 9010,
     8772, 9173,21180,21212,21244,21276,21308,21340,21372,21404,
    21436,21468, 8796,21500, 9105,21532,21564,21596,21628,21660,

     8797, 8837, 9107, 8831, 9197, 8883, 8928, 9214, 8929, 9408,
    21691, 8986,21722,21754,21785, 9009,21816,21847,21878,21909,
    21940,21972,22004,22036,22068,22099,22130,22161,22192, 9019,
    22223,22254,22285,22316,22347,22379,22410,22441, 9045,22472,
     9628,22494, 9088, 9106,22526, 9632, 9659, 9705,22557,22588,
    22619,22650, 9174, 9240, 9928,22682,22714,22746,22777,22808,
     9054,22839,22871,22902,22933, 9272, 9772, 9309,22964,22996,
    23027,23058, 9399,23089,10150,10358,23121,23153,23185,23217,
    23249,23280,23311,23342,10369, 9405,23373,23405,23437,23469,
    23501,23533,23565,23597,10389,23629,23647, 9852,23678,23709,

    23740,23771,10445,23803,23830,10516,23862,10640,23894,23925,
    23957,23973,24004,10706,10775,10819,24028,24060,24091,24122,
    24153,24184,24216,24247,24278,10975, 9443,24309,24341,24373,
    24405,24437,11023,11552,24469,24501,24533,24565,24597,24629,
    24661,24693,24725,24757,24789,24821,11093,24853,24885,24917,
    24949,24981,25013,11336, 9445,11354,11363,11473, 9447,11634,
    11629,25044,25075,25107,25138,25169,25200,25231, 9488,11874,
    25262,11638, 9534,25293,25325,25357, 9857,25389,25421,25452,
    25483,25514,25545,11682,25576,25607,25638,25669,25701,25733,
    25764,25795, 9582, 9584,12069,25817,25848,25879,25910,25941,

     9586,11908,12151,25973,26004,26035,26067,26098,26129,26160,
    26191,26222,26246,26278,11950, 9991,26309,26340,26371,26402,
    12233,26434,26466,26498,26530,26562,26593,26624,26655,12318,
    26686,26718,12320,26750, 9615,26768,26799,26830,26861, 9993,
    26892,26900,26932,26964,26995,27026,12409,27057,27089,10136,
    27121,27153,27185,27217,27249,27281,27313,13679,14036,27344,
    27375,12547,12510,27406,27438, 9658,27469,12512,27500,27531,
    12572,27553,27584,27615,27646,27677,27708,12591,27739,27771,
    27802,27833,27864,27895,27926,27951,27982,28006,28038, 9676,
    28069,28100,28131,12578,28163,28195,28227,28259,28291,28322,

    28353,28385,12618,28417,28435,28466, 9688,28482,28514,28545,
    28577, 9689,28609,28641,28673,28705,28737,28769,28801,28832,
    28864,28896,28927,28949,28980,12702, 9717,29011,29042,29073,
    29104,29135,29158,29183,29215,29247,29278,29309,29340,13018,
    29372,29404,29435,29466,29498,29514,29545,29577,29609,29640,
    13020,29671,29702,29733,29764,10510,10172,10173,13062,29788,
    13106,13108,29820, 9719,29851,11142,11519,13256,13293
    } ;

static yyconst flex_int16_t yy_def[4470] =
    {   0,
     3916, 3916, 3915,    3, 3917, 3917, 3915,    7, 3915,    9,
     3915,   11, 3915,   13, 3916, 3916, 3915,   17, 3918, 3918,
     3915,   21, 3919, 3919, 3915,   25, 3915,   27, 3920, 3920,
     3916, 3916, 3921, 3921, 3915,   35, 3922, 3922, 3915,   39,
     3915,   41, 3916, 3916, 3916, 3916, 3923, 3923, 3924, 3924,
     3925, 3925, 3915,   53, 3926, 3926, 3927, 3927, 3928, 3928,
     3928, 3928, 3928, 3928, 3915,   65, 3915,   67, 3929, 3929,
     3929, 3929, 3916, 3916, 3930, 3930, 3930, 3930, 3931, 3931,
     3932, 3932, 3916, 3916, 3933, 3933, 3934, 3934, 3916, 3916,
     3916, 3916, 3935, 3935, 3916, 3916, 3916, 3916, 3936, 3936,

     3937, 3937, 3915,  103, 3938, 3938, 3939, 3939, 3940, 3940,
     3915,  111, 3915,  113, 3915,  115, 3915,  117, 3941, 3941,
     3916, 3916, 3942, 3942, 3915,  125, 3943, 3943, 3915,  129,
     3944, 3944, 3915,  133, 3945, 3945, 3915,  137, 3946, 3946,
     3916, 3916, 3916, 3916, 3916, 3916, 3915,  147, 3915,  149,
     3916, 3916, 3915,  153, 3915,  155, 3947, 3947, 3915,  159,
     3916, 3916, 3916, 3916, 3915,  165, 3916, 3916, 3948, 3948,
     3915,  171, 3949, 3949, 3916, 3916, 3950, 3950, 3951, 3951,
     3952, 3952, 3915,  183, 3915,  185, 3953, 3953, 3953, 3953,
     3954, 3954, 3954, 3954, 3955, 3955, 3956, 3956, 3957, 3957,

     3958, 3958, 3959, 3959, 3960, 3960, 3915,  207, 3961, 3961,
     3962, 3962, 3963, 3963, 3964, 3964, 3965, 3965, 3965, 3965,
     3966, 3966, 3951, 3951, 3967, 3967, 3968, 3968, 3969, 3969,
     3915,  231, 3970, 3915, 3915,  235, 3971, 3915, 3972, 3972,
     3915,  241, 3915,  243, 3973, 3973, 3915,  247, 3974, 3974,
     3975, 3975, 3976, 3976, 3977, 3977, 3978, 3978, 3979, 3979,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3980, 3981, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3982, 3983, 3984, 3915, 3915, 3985, 3915, 3986, 3915, 3987,
     3915, 3988, 3989, 3915, 3915, 3915, 3915, 3915, 3915, 3915,

     3915, 3990, 3990, 3990, 3915, 3915, 3915, 3915, 3991, 3915,
     3915, 3915, 3915, 3992, 3993, 3994, 3994, 3915, 3995, 3996,
     3915, 3997, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3998, 3915, 3915, 3915,
     3999, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 4000, 3915, 3915, 4001, 3915, 4002, 3915,
     4002, 4003, 3915, 3915, 3915, 3915, 4004, 4005, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     4006, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 4007, 3915, 4008, 3915, 3915,

     4009, 3915, 3915, 3915, 3915, 4010, 3915, 3915, 3915, 3915,
     3915, 4011, 4012, 4012, 4013, 3915, 4012, 4012, 4012, 4012,
     4012, 4012, 4012, 4012, 4012, 4012, 4012, 4012, 4012, 4012,
     4012, 4012, 4012, 4012, 3915, 4014, 3915, 4014, 4014, 4014,
     4014, 3915, 3915, 3915, 4015, 4016, 3915, 4017, 3915, 3915,
     3915, 3915, 4018, 3915, 3915, 3915, 3915, 3915, 4019, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915,  492, 4020, 3915, 3915, 3915, 4021, 4021, 4021,

     4021, 4021, 4021, 4021, 4021, 4021, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 4022, 4022, 3915, 3915, 3915, 4023, 4024, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 4025, 3915, 4026,
     4026, 3915, 3915, 4027, 4028, 3915, 4029, 4030, 4030, 3915,
     3915, 3915, 4031, 3915, 3915, 3915, 3915, 3915, 3915, 4030,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 4032, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 4033,
     4033, 4033, 4033, 4033, 3915, 4033, 4034, 3915, 4034, 4034,

     4034, 4034, 4034, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 4035, 3915, 4035, 4035, 4035, 3915, 3915, 4036, 3915,
     4036, 4036, 4036, 4036, 4037, 3915, 4038, 4038, 4038, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 4039, 3915, 3915, 4039, 4039, 4039,
     3915, 3915, 3915, 4039, 4040, 3915, 4041, 3915, 4042, 4043,
     4044, 3915, 4045, 3915, 3915, 4046, 4047, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 4048, 3915, 3915, 3915, 4049, 4050, 3915, 3915,

     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 4051, 3915,
     3915, 3915, 3915, 4052, 3915, 4053, 3915, 3915, 4053, 4053,
     4053, 4054, 3915, 3915, 3915, 4055, 3915, 4056, 4056, 4056,
     4056, 4056, 3915, 4056, 4057, 3915, 3915, 3915, 4058, 4059,
     4059, 4059, 4059, 4059, 3915, 4059, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 4060, 3915, 4061, 4061,
     4061, 4062, 4063, 3915, 3915, 3915, 3915, 3915, 4064, 4065,
     4066, 4067, 3915, 3915, 3915, 3915, 3915, 4068, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     4069, 4069, 4069, 4070, 3915, 3915, 4071, 4071, 4071, 4071,

     3915, 3915, 3915, 3915, 3915, 4072, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     4073, 3915, 3915, 4074, 3915, 3915, 3915, 4075, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 4076, 4077, 3915,
     3915, 3915, 3915, 4078, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 4079, 4080, 4081,
     3915, 4082, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 4083,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 4084,
     3915, 3915, 4085, 3915, 3915, 4085, 4086, 3915, 3915, 4085,
     4087, 3915, 3915, 4087, 4088, 3915, 3915, 3915, 4089, 3915,

     3915, 4089, 4090, 3915, 3915, 3915, 4091, 3915, 3915, 4091,
     4092, 3915, 3915, 3915, 4091, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     4093, 4094, 3915, 3915, 4095, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 4096, 3915, 3915, 4096, 3915, 4096,
     4097, 3915, 3915, 4098, 4098, 3915, 3915, 3915, 3915, 3915,
     4099, 3915, 4099, 4099, 4099, 3915, 4099, 3915, 4099, 3915,
     4100, 3915, 4100, 4100, 4100, 4100, 3915, 3915, 3915, 3915,

     3915, 3915, 3915, 4101, 4102, 4103, 3915, 3915, 3915, 3915,
     3915, 4104, 4105, 4106, 4107, 4108, 3915, 3915, 3915, 3915,
     3915, 3915, 4109, 4110, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 4111, 4111, 3915, 3915, 4112, 3915, 3915, 3915,
     4113, 4114, 4115, 4115, 4116, 4117, 3915, 3915, 3915, 3915,
     4118, 3915, 3915, 3915, 3915, 3915, 4119, 3915, 3915, 4120,
     3915, 3915, 3915, 3915, 3915, 4121, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 4122, 3915,
     4122, 4122, 4122, 4122, 4123, 4123, 3915, 4123, 4123, 4123,

     3915, 3915, 4123, 3915, 3915, 4123, 4124, 3915, 4125, 3915,
     4125, 4125, 3915, 4125, 3915, 3915, 3915, 3915, 4125, 3915,
     3915, 3915, 4126, 3915, 3915, 4126, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 4127, 3915, 3915, 4128, 4128, 4129,
     3915, 4128, 4130, 4131, 4127, 4127, 4132, 4133, 4130, 3915,
     3915, 3915, 4131, 3915, 3915, 3915, 4134, 4134, 4135, 3915,
     3915, 3915, 3915, 4136, 4136, 3915, 4137, 4137, 4138, 4137,
     4139, 4140, 3915, 3915, 3915, 4139, 3915, 3915, 3915, 4140,
     4140, 4140, 4141, 3915, 3915, 4141, 4142, 3915, 4143, 4142,
     4144, 4142, 4145, 3915, 4146, 4146, 3915, 3915, 3915, 3915,

     3915, 4147, 4147, 4148, 4148, 4149, 4149, 4149, 4150, 4150,
     3915, 3915, 1212, 4149, 4150, 4150, 4151, 4152, 3915, 3915,
     3915, 4153, 4151, 3915, 4154, 4154, 4155, 3915, 3915, 3915,
     3915, 3915, 4156, 4157, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 4158, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 4159, 4159, 4160, 3915, 3915, 3915, 3915, 4159, 4161,
     4162, 4163, 3915, 3915, 4164, 4164, 3915, 3915, 4165, 3915,
     3915, 3915, 4166, 4167, 4161, 3915, 3915, 3915, 4168, 4169,
     4169, 4169, 4169, 4169, 4169, 3915, 4162, 3915, 4162, 4158,

     3915, 4162, 4162, 4162, 4162, 4162, 4162, 4162, 4162, 4162,
     4162, 4162, 4162, 4162, 4162, 4162, 4162, 4162, 4162, 4162,
     4162, 4162, 4162, 4162, 4162, 4162, 4162, 4162, 4162, 4162,
     4162, 4162, 4170, 4170, 4170, 3915, 3915, 3915, 3915, 4171,
     4171, 4172, 4171, 4173, 4174, 4173, 3915, 4174, 3915, 3915,
     3915, 3915, 4175, 3915, 3915, 4175, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 4176,
     3915, 3915, 3915, 3915, 4176, 4176, 4176, 4176, 4176, 4176,
     4176, 4176, 4176, 4176, 3915, 3915, 3915, 4177, 4177, 3915,
     3915, 4178, 4178, 4179, 4180, 3915, 4181, 3915, 3915, 3915,

     3915, 4182, 3915, 4183, 4182, 3915, 4182, 3915, 3915, 4184,
     4184, 4185, 4184, 4186, 4187, 4186, 4187, 4188, 4188, 3915,
     4189, 4190, 3915, 3915, 3915, 3915, 3915, 3915, 4188, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 4191, 4191, 3915, 3915,
     3915, 4191, 4192, 3915, 4192, 4192, 4192, 3915, 3915, 4193,
     4193, 4193, 4194, 4194, 4194, 4195, 4195, 4195, 4195, 3915,
     3915, 3915, 4196, 3915, 3915, 3915, 3915, 4196, 4196, 4196,
     4197, 4198, 4197, 4199, 3915, 4200, 4199, 4201, 3915, 4201,
     4202, 3915, 3915, 4203, 4203, 3915, 3915, 3915, 3915, 3915,

     4204, 3915, 4205, 3915, 4205, 4206, 3915, 3915, 4206, 4207,
     3915, 4207, 4207, 4208, 3915, 3915, 4208, 4209, 4209, 4209,
     4210, 3915, 3915, 3915, 4210, 3915, 4211, 3915, 4211, 4211,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 4212, 4212, 3915,
     4213, 4212, 4212, 4214, 4214, 3915, 3915, 3915, 3915, 4215,
     4215, 4216, 4216, 4217, 4218, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 4219, 4219, 4220, 3915, 3915, 4220, 3915, 3915,
     4221, 4221, 4221, 4222, 3915, 4222, 4223, 3915, 3915, 4224,
     3915, 3915, 3915, 4225, 4225, 4226, 4225, 4227, 4228, 4227,
     4228, 3915, 3915, 3915, 3915, 3915, 3915, 4229, 3915, 4230,

     3915, 4231, 4232, 3915, 3915, 3915, 3915, 3915, 4233, 4233,
     4234, 4234, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 4235, 4236, 4237, 4235, 4235, 4238, 4239, 4240, 4241,
     4242, 4243, 4244, 4245, 4246, 4244, 3915, 3915, 3915, 3915,
     3915, 3915, 4247, 4248, 4249, 4247, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 4250, 4250, 4250, 3915, 4251, 4252, 3915,
     4252, 3915, 3915, 4252, 3915, 3915, 4253, 4253, 4253, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 4254,
     4255, 4256, 4254, 4257, 4257, 4258, 4259, 4260, 4258, 4261,
     4261, 3915, 4262, 4262, 4263, 4264, 4265, 3915, 3915, 3915,

     4265, 4264, 3915, 4266, 4266, 4267, 4268, 3915, 3915, 4268,
     3915, 4269, 3915, 4270, 3915, 3915, 3915, 4271, 4271, 4272,
     4271, 4273, 4274, 4273, 4274, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 4275, 3915, 3915, 3915, 4275, 4275,
     4276, 4276, 4276, 3915, 3915, 3915, 3915, 4276, 4276, 4277,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 4276, 4278,
     3915, 3915, 4278, 3915, 4279, 3915, 3915, 3915, 3915, 3915,
     3915, 4279, 3915, 3915, 3915, 3915, 3915, 3915, 4280, 4281,
     3915, 4282, 4283, 4283, 4284, 4285, 4286, 3915, 4287, 4288,
     3915, 4289, 3915, 3915, 4290, 4291, 3915, 4292, 4292, 3915,

     3915, 3915, 4293, 4294, 4295, 4296, 4297, 4298, 4298, 4299,
     4299, 4300, 4301, 4302, 4299, 4303, 3915, 3915, 3915, 3915,
     3915, 4304, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 4305, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 4306, 3915, 3915, 3915, 4307, 3915, 4308,
     4309, 3915, 3915, 4310, 4311, 3915, 4312, 3915, 3915, 4313,
     3915, 3915, 3915, 4314, 3915, 4315, 4305, 3915, 3915, 3915,
     3915, 4316, 4317, 4317, 4317, 4317, 4317, 4317, 4317, 4317,

     3915, 4318, 4318, 4318, 3915, 3915, 4318, 4318, 4318, 4318,
     4318, 4318, 4318, 4318, 4318, 4318, 4318, 4318, 4318, 4318,
     4318, 4318, 4318, 4318, 4318, 4318, 4318, 4318, 4318, 4318,
     4318, 4318, 4318, 4318, 4318, 4318, 4318, 4318, 4318, 4318,
     4318, 4318, 4318, 4318, 4318, 4318, 3915, 3915, 3915, 4319,
     4320, 3915, 4313, 3915, 4314, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 4313, 3915, 3915, 4314, 3915,
     4321, 4321, 4321, 4321, 4321, 4321, 4321, 4321, 4321, 3915,
     3915, 4322, 4323, 3915, 4324, 4325, 3915, 3915, 3915, 3915,
     3915, 3915, 4326, 3915, 3915, 3915, 4327, 4327, 4328, 4329,

     4330, 4331, 4332, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 4333, 4333, 3915, 4334, 4334, 4334,
     4335, 4336, 4337, 4337, 3915, 4338, 3915, 4339, 4339, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 4313, 3915,
     4314, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     4340, 4341, 3915, 4342, 4342, 3915, 3915, 3915, 3915, 3915,
     4343, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     4344, 3915, 3915, 4345, 4345, 3915, 4346, 3915, 4347, 4348,
     3915, 3915, 4349, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     4350, 4351, 3915, 3915, 3915, 4352, 3915, 3915, 3915, 4353,

     3915, 3915, 3915, 4354, 3915, 3915, 3915, 4355, 3915, 3915,
     3915, 4356, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 4357, 3915, 4358, 3915,
     4359, 3915, 4360, 3915, 3915, 3915, 4361, 4362, 3915, 3915,
     4363, 4364, 3915, 3915, 3915, 3915, 3915, 4365, 4365, 4366,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 4367, 4368, 4369,
     3915, 3915, 3915, 3915, 3915, 4370, 4370, 3915, 3915, 4371,
     3915, 4372, 4373, 4374, 4373, 3915, 4375, 4376, 4377, 4378,
     4379, 3915, 3915, 3915, 3915, 3915, 4380, 3915, 3915, 3915,

     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 4381, 4381, 3915, 4382, 4383,
     4383, 4384, 3915, 3915, 4385, 4385, 3915, 4386, 4383, 4387,
     3915, 3915, 3915, 3915, 3915, 4388, 3915, 3915, 3915, 3915,
     3915, 4389, 3915, 3915, 4390, 4391, 4392, 4392, 4392, 4392,
     4392, 4392, 4392, 4392, 4393, 4393, 4393, 4393, 4393, 4393,
     4393, 4393, 4393, 4393, 4393, 4393, 4393, 4393, 4393, 4393,

     4393, 4393, 4393, 4393, 4393, 4393, 4393, 4393, 4393, 4393,
     4393, 4393, 4393, 4393, 4393, 4393, 3915, 4393, 4393, 4393,
     4393, 4393, 4393, 4393, 4393, 4393, 4393, 4393, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 4394, 4394, 3915, 4394, 4394, 4394, 4394, 3915, 3915,
     4394, 4395, 3915, 4396, 3915, 4397, 4398, 3915, 3915, 3915,
     4399, 3915, 4400, 4401, 4402, 3915, 3915, 3915, 3915, 3915,
     4403, 4403, 3915, 4404, 4404, 4404, 4405, 4406, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 4407, 4408, 4408, 3915, 3915, 3915, 3915, 3915, 4409,

     3915, 3915, 3915, 3915, 4410, 3915, 4411, 3915, 3915, 3915,
     3915, 3915, 4412, 4413, 3915, 3915, 4414, 3915, 3915, 4415,
     3915, 3915, 4416, 3915, 3915, 4417, 3915, 3915, 4418, 3915,
     3915, 3915, 3915, 3915, 4419, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 4420, 3915, 3915, 3915, 3915, 3915, 4421,
     4421, 3915, 3915, 2453, 3915, 4422, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 4423, 4423, 4424, 4425, 4425,
     4426, 3915, 4427, 4427, 4428, 4429, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,

     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 4430, 3915, 4431, 3915, 4432, 3915, 4433, 3915, 4434,
     4434, 4435, 3915, 4436, 3915, 3915, 4437, 4438, 4438, 4438,
     4438, 4438, 4438, 4438, 4438, 4439, 4439, 4439, 4439, 4439,
     4439, 4439, 4439, 4439, 4439, 3915, 3915, 3915, 3915, 4439,
     3915, 3915, 4439, 4439, 4439, 4439, 4439, 4439, 4439, 4439,
     4439, 4439, 4439, 4439, 4439, 4439, 4439, 4439, 4439, 4439,
     4439, 4439, 3915, 3915, 4439, 4439, 4439, 4439, 4439, 4439,

     4439, 4439, 4439, 4439, 4439, 4439, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 4440, 4440, 4440, 4440, 4440,
     4440, 4440, 3915, 3915, 4441, 3915, 4442, 3915, 3915, 3915,
     3915, 4443, 3915, 3915, 3915, 3915, 4444, 4444, 3915, 4445,
     4445, 4445, 4445, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 4446, 4446, 3915, 3915, 3915, 3915, 3915, 3915,
     4447, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 4448, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 4449, 4449, 3915,

     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 4450, 4450, 4451, 4452, 4453, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 4454,
     4454, 4455, 3915, 3915, 3915, 4438, 4438, 4438, 4438, 4438,
     4438, 4438, 4438, 4438, 4439, 4439, 4439, 4439, 4439, 3915,
     3915, 4439, 3915, 4439, 4439, 3915, 3915, 3915, 4439, 4439,

     4439, 4439, 4439, 4439, 4439, 4439, 4439, 4439, 4439, 4439,
     4439, 4439, 4439, 4439, 4439, 4439, 4439, 4439, 3915, 3915,
     4439, 4439, 4439, 4439, 4439, 4439, 4439, 3915, 3915, 3915,
     3915, 4439, 4439, 4439, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 4440, 3915, 4440, 4440, 4440, 3915, 3915, 4440,
     4440, 4441, 3915, 3915, 4443, 3915, 4444, 4445, 4445, 4445,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 4446, 3915,
     4456, 3915, 4448, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 4449, 3915, 3915, 3915, 3915, 3915,

     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 4450,
     3915, 3915, 3915, 4453, 3915, 3915, 3915, 3915, 3915, 2725,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 4438, 4438, 4438, 4438,
     4438, 4438, 4438, 4438, 4439, 4439, 4439, 4439, 4439, 4439,
     3915, 3915, 3915, 3915, 4439, 3915, 3915, 4439, 4439, 3915,
     3915, 3915, 4439, 4439, 4439, 3915, 4439, 4439, 3915, 3915,

     4439, 4439, 3915, 4439, 4439, 4439, 4439, 4439, 3915, 3915,
     4439, 4439, 3915, 3915, 2994, 4439, 3915, 3915, 3915, 4439,
     4439, 4439, 3915, 3915, 4439, 4439, 4439, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 4440, 4440, 3915, 3915, 3915, 3915,
     4440, 4441, 3915, 3915, 4443, 4444, 4445, 4445, 4445, 4457,
     3915, 3915, 3915, 4458, 4446, 3915, 4456, 4459, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 4460, 3915, 3915, 3915, 3915, 3915,
     4453, 3915, 3915, 3915, 3915, 2725, 3915, 3915, 3915, 3915,

     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     4438, 4438, 4438, 4438, 4438, 4438, 3915, 4438, 4439, 4439,
     4439, 4439, 4439, 3915, 3915, 3915, 3915, 4439, 3915, 3915,
     4439, 4439, 3915, 3915, 3915, 3915, 3915, 3915, 4439, 4439,
     4439, 4439, 3915, 3915, 3915, 3915, 4439, 3915, 3915, 4439,
     4439, 4439, 4439, 4439, 3915, 4439, 4439, 3915, 3915, 4439,
     3915, 3915, 3915, 4439, 3915, 3915, 4439, 3915, 3915, 3915,

     3915, 3915, 4440, 4440, 4440, 4441, 3915, 3915, 4443, 4445,
     4445, 4445, 4457, 4461, 3915, 3915, 3915, 4458, 4462, 3915,
     4459, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 4453, 3915, 3915, 2725, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 4438, 4438, 4438, 3915, 4438,
     4438, 4438, 4439, 4439, 3915, 4439, 3915, 3915, 4439, 3915,

     3915, 3915, 3915, 3915, 3915, 3915, 4439, 3915, 4439, 3915,
     3915, 4439, 3915, 4439, 4439, 4439, 3915, 4439, 4439, 4439,
     3915, 3915, 4439, 3915, 3915, 3915, 3915, 3915, 3915, 4439,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 4441, 3915, 3915,
     4443, 4445, 4461, 3915, 4462, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 4453, 3915, 2725, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 4463, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 4438, 4438, 3915, 4438, 3915,

     3915, 4439, 4439, 4439, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 4439, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 4439, 4439, 4439, 4439, 3915, 3915, 4439, 4439, 4439,
     4439, 3915, 3915, 3915, 4439, 3915, 3915, 3915, 3915, 4441,
     3915, 3915, 3915, 4445, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 4453, 2725, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 4463, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 4438, 3915, 3915, 4439,
     3915, 3915, 3915, 3915, 4439, 3915, 3915, 4464, 4465, 4465,

     4439, 4439, 3915, 3915, 3915, 4439, 4439, 4439, 4439, 3915,
     3915, 4439, 3915, 3915, 3915, 4441, 3915, 4445, 4466, 4467,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 2725, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 4438, 4439, 3915, 3915, 3915, 3915, 3915, 4465, 3915,
     4439, 4439, 3915, 4439, 4439, 4439, 3915, 3915, 3915, 3915,
     3915, 3915, 4441, 3915, 4466, 4468, 4467, 4469, 3915, 3915,
     2725, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 4438, 3915, 3915, 3915, 4439, 3915, 3915, 4439, 4439,
     3915, 3915, 3915, 3915, 4441, 3915, 4468, 4469, 2725, 3915,

     3915, 3915, 3915, 3915, 3915, 3915, 4438, 3915, 3915, 3915,
     4439, 4439, 3915, 4441, 3915, 2725, 3915, 3915, 3915, 3915,
     4438, 3915, 3915, 4439, 3915, 3915, 3915, 4441, 3915, 2725,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 4441, 3915, 2725, 3915, 3915, 3915, 3915, 3915, 3915,
     4441, 3915, 2725, 3915, 3915, 3915, 3915, 4441, 3915, 2725,
     3915, 3915, 4441, 3915, 2725, 3915, 3915, 4441, 3915, 2725,
     3915, 3915, 3915, 3915, 4441, 3915, 2725, 3915, 4441, 3915,
     2725, 3915, 4441, 3915, 2725, 3915, 4441, 3915, 2725, 3915,
     4441, 3915, 2725, 3915, 4441, 3915, 2725, 3915, 4441, 3915,

     2725, 3915, 4441, 3915, 2725, 3915, 4441, 3915, 2725, 3915,
     4441, 3915, 2725, 3915, 4441, 3915, 2725, 3915, 4441, 3915,
     2725, 3915, 4441, 3915, 2725, 3915, 4441, 3915, 2725, 3915,
     4441, 3915, 2725, 3915, 4441, 3915, 2725, 3915, 4441, 3915,
     2725, 3915, 4441, 3915, 2725, 3915, 4441, 3915, 2725, 3915,
     4441, 3915, 2725, 3915, 4441, 3915, 2725, 3915, 4441, 3915,
     2725, 3915, 4441, 3915, 2725, 3915, 4441, 3915, 2725, 3915,
     4441, 3915, 2725, 3915, 4441, 3915, 2725, 3915, 4441, 3915,
     2725, 3915, 4441, 3915, 2725, 3915, 4441, 3915, 2725, 3915,
     4441, 3915, 2725, 3915, 4441, 3915, 2725, 3915, 4441, 3915,

     2725, 3915, 4441, 3915, 2725, 3915, 4441, 3915, 2725, 3915,
     4441, 3915, 2725, 3915, 4441, 3915, 2725, 3915, 4441, 3915,
     2725, 3915, 4441, 3915, 2725, 3915, 4441, 3915, 2725, 3915,
     4441, 3915, 2725, 3915, 4441, 3915, 2725, 3915, 4441, 3915,
     2725, 3915, 4441, 3915, 2725, 3915, 4441, 3915, 2725, 3915,
     4441, 3915, 2725, 3915, 4441, 3915, 2725, 3915, 4441, 3915,
     2725, 3915, 4441, 3915, 2725, 3915, 4441, 3915, 2725, 3915,
     4441, 3915, 2725, 3915, 4441, 3915, 2725, 3915, 4441, 3915,
     2725, 3915, 4441, 3915, 2725, 3915, 4441, 3915, 2725, 3915,
     4441, 3915, 2725, 3915, 4441, 3915, 2725, 3915, 4441, 3915,

     2725, 3915, 4441, 3915, 2725, 3915, 4441, 3915, 2725, 3915,
     4441, 3915, 2725, 4441,    0, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,

     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,

     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,

     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,

     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,

     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915
    } ;

static yyconst flex_int16_t yy_nxt[29969] =
    {   0,
     3915, 3915,  263, 3915,  263, 3915,  264,  265,  264,  265,
     1274,  266, 3915,  266, 1274, 1121, 1131, 1132, 3915,  267,
     1122,  267,  262,  262,  263,  262,  262,  262,  264,  265,
      268,  262,  262,  266,  262,  262,  262,  262,  262,  262,
      262,  267,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  262,  262,  262,  262,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,

      269,  269,  262,  262,  262,  269,  271,  272,  271,  271,
     1129,  273,  274, 1272, 1273, 1130,  275,  271,  272,  271,
      271,  263,  273,  274,  276,  324,  325,  275, 1174, 1482,
      326,  327,  328, 1175, 1156,  276,  263, 1156,  329, 1184,
      387,  388, 1433, 1434, 1185,  389,  330,  263,  331, 1121,
      390,  264,  265,  391, 1122, 1124,  266,  277, 1124, 1201,
      392, 1498, 1201, 1482,  267, 1499, 1125, 2674,  277,  262,
      278,  279,  280,  278,  281,  264,  265,  282,  262,  262,
      266,  262,  262,  262,  262,  262,  262,  283,  267,  262,
      262,  262,  262,  262,  284,  285,  262,  262,  262,  262,

      262,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      262,  262,  262,  262,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  287,
      262,  288,  286,  262,  289,  290,  291,  289,  292,  264,
      265,  293,  262,  294,  266,  295,  262,  294,  296,  297,
      296,  262,  298,  262,  262,  262,  262,  262,  299,  294,
      300,  294,  262,  262,  301,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,

      302,  302,  302,  302,  295,  262,  262,  262,  302,  303,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  304,  302,  302,  302,
      302,  302,  302,  287,  262,  292,  302,  305,  305,  306,
      305,  305,  305,  307,  308,  309,  305,  305,  310,  305,
      305,  305,  305,  305,  305,  305,  311,  305,  305,  305,
      305,  305,  312,  313,  305,  305,  305,  305,  305,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  305,  305,
      305,  305,  314,  314,  314,  314,  314,  314,  314,  314,

      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  305,  305,  305,
      314,  305,  305,  306,  305,  305,  305,  307,  308,  315,
      305,  305,  310,  305,  305,  305,  305,  305,  305,  305,
      311,  305,  305,  305,  305,  305,  305,  313,  305,  305,
      305,  305,  305,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  305,  305,  305,  305,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  317,  316,

      316,  318,  305,  305,  316,  263, 1336,  263, 1121,  264,
      265,  264,  265, 1122,  266, 2113,  266, 1164, 1164, 1165,
     1164,  263,  267, 1121,  267,  324,  325, 1188, 1122, 1748,
      326,  327,  328, 1189,  451,  450,  451,  451,  329,  264,
      265, 1166, 1191, 1749,  266, 1121,  330, 2677,  331, 1337,
     1122, 1540,  461, 1541,  319, 1748,  319,  262,  262,  263,
      262,  262,  262,  264,  265,  320,  262,  262,  266,  262,
      321,  262,  262,  262,  262,  262,  267,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,

      322,  322,  322,  322,  322,  322,  322,  322,  262,  262,
      262,  262,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  262,  262,  262,
      322,  332,  333,  334,  332,  333,  332,  335,  336,  337,
      332,  332,  338,  332,  332,  332,  332,  332,  332,  332,
      339,  332,  332,  332,  332,  332,  332,  340,  332,  332,
      332,  332,  332,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  342,  332,  332,  332,  341,  341,  341,  341,

      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  343,  332,  332,  341,  263, 1382,  263, 1121,  345,
      346,  345,  346, 1122,  347, 1383,  347, 1173, 1173, 1173,
     1173,  263,  348,  437,  348,  387,  388,  438,  439, 1777,
      389, 1228,  440, 1230, 1228,  390, 1231,  263,  391, 1121,
      441,  264,  265, 1777, 1122,  392,  266, 1540,  442, 1541,
     1138, 1138, 1138, 1138,  267, 2678,  349, 1139,  349,  350,
      350,  351,  350,  350,  350,  352,  353,  354,  350,  350,
      355,  350,  350,  350,  350,  350,  350,  350,  356,  350,

      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      350,  350,  350,  350,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  358,
      350,  350,  357,  262,  359,  360,  361,  359,  262,  264,
      265,  362,  262,  262,  266,  262,  262,  262,  296,  363,
      296,  262,  298,  262,  262,  262,  262,  262,  364,  285,
      365,  262,  366,  262,  301,  367,  367,  367,  367,  367,

      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  262,  368,  262,  262,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  369,  262,  262,  367,  371,  372,  371,
      371, 1281,  373,  374, 2435, 1286, 1282,  375,  371,  372,
      371,  371, 1334,  373,  374,  376, 1287, 1335,  375,  263,
     1354, 1482, 1129,  380,  265, 1355,  376, 1130,  381,  382,
      263, 1188, 1856,  383,  380,  265,  267, 1189, 1393,  381,
      382, 1393, 1857,  384,  383, 1121, 1191,  267,  437, 1399,

     1122, 1121,  438,  439,  384, 1482, 1122,  440,  263, 1121,
      377, 1777,  478,  479, 1122,  441,  378,  480,  481,  482,
     1777,  377,  379,  442, 1540,  483, 1541,  378, 1127, 1127,
     1127, 1127, 1192,  379,  451,  450,  451,  451, 1371,  264,
      265, 2057, 1420, 1372,  266, 1420, 1128,  385, 1157, 1157,
     1157, 1157,  461, 1401, 1420, 1158, 2058, 1420,  385,  262,
      393,  394,  395,  393,  396,  264,  397,  398,  399,  400,
      266,  401,  262,  400,  402,  403,  402,  404,  405,  406,
      406,  406,  406,  406,  407,  408,  409,  410,  262,  411,
      412,  413,  413,  413,  413,  413,  413,  413,  413,  413,

      413,  413,  413,  413,  414,  413,  413,  413,  413,  413,
      415,  262,  262,  416,  417,  418,  413,  419,  420,  421,
      422,  423,  413,  424,  425,  426,  427,  428,  413,  429,
      413,  430,  431,  432,  433,  434,  413,  413,  413,  435,
      262,  396,  413,  262,  443,  444,  443,  443,  445,  264,
      265,  446,  262,  262,  266,  262,  262,  262,  262,  262,
      262,  262,  267,  262,  262,  262,  262,  262,  447,  262,
      262,  262,  262,  262,  262,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  262,  262,  262,  262,  448,  448,

      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  262,  262,  445,  448,  262,  449,  450,
      451,  449,  262,  264,  452,  453,  262,  262,  266,  454,
      262,  262,  262,  455,  262,  262,  456,  262,  262,  262,
      262,  262,  262,  457,  262,  458,  262,  262,  262,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  460,  262,
      262,  262,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,

      459,  459,  459,  459,  459,  459,  459,  262,  262,  262,
      459,  263, 2680,  263, 1371,  264,  462,  264,  462, 1372,
      266,  463,  266,  463, 1791,  464, 1121,  464,  267, 1265,
      267, 1122, 1265, 1792,  465,  466,  465,  466,  468,  469,
      468,  468, 1396,  470,  471, 1454, 1423, 1397,  472,  473,
      474, 1424, 1454,  475, 1443, 1444,  476,  468,  469,  468,
      468, 1431,  470,  471, 2681, 1438, 1432,  472,  473,  474,
     1439, 2682,  475,  263, 1423,  476,  485,  478,  479, 1441,
      486,  487,  480,  481,  482,  488, 1266, 1267, 1454,  464,
      483,  464,  485,  489,  508, 1455,  486,  487,  509,  510,

      490,  488, 1455,  511,  512, 1127, 1127, 1127, 1127,  489,
     2683,  513, 1280, 1280, 1280, 1280,  490,  508,  514,  515,
      630,  509,  510, 1128,  631,  632,  511,  512, 1274,  633,
      591,  263, 1274,  591,  513,  592,  593,  634, 1455, 1121,
      594,  514,  515,  595, 1122, 1451,  591,  263,  596,  591,
     1452,  592,  593, 2684,  491, 2694,  594, 1445, 1446,  595,
     1167, 1167, 1167, 1167,  596, 1515, 1528, 1168, 1515, 1528,
      491,  467,  492,  493,  492,  492,  467,  470,  471,  494,
      467,  467,  472,  467,  467,  467,  467,  495,  467,  467,
      496,  467,  467,  467,  467,  467,  495,  495,  467,  497,

      467,  467,  467,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  467,  467,  467,  467,  498,  499,  498,  500,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  501,
      502,  498,  498,  503,  504,  505,  498,  506,  498,  498,
      498,  495,  467,  467,  498,  263, 1678, 1679,  263,  517,
      518, 1454,  517,  518,  519, 1662, 2695,  519,  524,  525,
      526,  524,  520,  527,  528,  520, 1448, 1537,  529, 1448,
     1537, 1663,  524,  525,  526,  524,  530,  527,  528, 1449,
     1419, 2696,  529, 1419,  531, 1540, 1391, 1541,  532, 1429,

      530, 1800, 1429, 2697,  521, 1430,  522,  521,  531,  522,
     1801, 1455,  532,  524,  525,  526,  524, 1121,  527,  528,
     2048, 1458, 1122,  529,  524,  525,  526,  524,  263,  527,
      528,  530,  264,  265,  529, 1461, 2055,  266, 2049,  531,
     1462, 1454,  530,  532, 1464,  267, 2270,  533,  534, 1465,
      531,  263, 1121, 1456,  532,  264,  265, 1122, 1457, 2332,
      266,  533,  534, 2236,  524,  525,  526,  524,  267,  527,
      528, 1455,  568, 1121,  529, 1476,  569,  570, 1122, 2237,
     1477,  571,  530, 2698,  572, 1133, 1134, 1134, 1133,  573,
      531, 1455,  533,  535,  536,  524,  525,  526,  524, 1962,

      527,  528, 1135,  533,  535,  529,  568,  566, 1963, 1136,
      569,  570, 1121,  530, 1478,  571, 1479, 1122,  572, 1770,
     1771,  531,  574,  573,  263,  536, 1121, 1482,  264,  265,
      566, 1122, 1480,  266,  606,  607, 1161, 1161, 1161, 1161,
     2179,  267,  263,  533,  537,  263,  264,  265, 2178,  264,
      265,  266,  606,  607,  266, 2214,  574, 1800, 1504,  267,
     1162, 1482,  267, 1504, 1137, 2215, 1262, 1262, 1262, 1262,
      617, 1800,  618, 1263,  533,  537,  262,  262,  263,  262,
      262,  262,  264,  265,  538,  262,  262,  266,  262,  262,
      262,  262,  262,  262,  262,  267,  262,  262,  262,  262,

      262,  262,  539,  262,  262,  262,  262,  262,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  262,  262,  262,
      262,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  541,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  262,  262,  262,  540,
      262,  542,  543,  542,  542,  544,  264,  265,  545,  262,
      262,  266,  262,  262,  262,  262,  262,  262,  262,  267,
      262,  262,  262,  262,  262,  546,  262,  262,  262,  262,
      262,  262,  547,  547,  547,  547,  547,  547,  547,  547,

      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  262,  262,  262,  262,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      262,  262,  544,  547,  549,  550, 1121,  549, 1507,  551,
      552, 1122, 1512, 1508,  553,  560,  550, 1513,  560, 1519,
      551,  561,  554, 1529, 1520,  553,  549,  562, 1530,  549,
      555,  563,  552,  554,  556, 2699,  553, 1134, 1134, 1134,
     1134,  555,  263, 1557,  564,  556,  623,  624, 1558, 1433,
     1434,  625,  555, 1371, 1135,  557,  556, 1636, 1372,  626,

     1636, 1136,  549,  562, 2456,  549,  557,  563,  552,  568,
     1121, 1121,  553,  575,  570, 1122, 1122,  565,  576, 1637,
      564,  572, 1637,  558,  559, 1540,  573, 1541,  555, 2701,
     1638,  627,  556,  628,  558,  559, 2702, 1124,  568, 1540,
     1124, 1541,  575,  570, 2148,  557,  557,  576, 1125, 1569,
      572, 1454, 1569,  565, 1570,  573,  550, 2703, 1121,  574,
      577,  578,  550, 1122, 2089,  553,  577,  578, 2517, 1542,
     2148,  553, 2518,  579, 1219, 1219, 1219, 1219, 2089,  579,
      580,  557,  557, 1543, 1352,  556,  580, 1352,  574,  583,
      584,  556, 1606,  585,  586,  583,  584, 1607,  587,  585,

      586, 1455, 1121, 1615,  587,  598,  588, 1122, 1616,  599,
      600,  598,  588, 1619,  601,  599,  600, 2641, 1620, 1625,
      601,  263,  602, 1777, 1626,  264,  265,  263,  602, 2200,
      266,  264,  265, 2704,  581, 2642,  266, 1777,  267,  589,
      581, 1266, 1267, 2200,  267,  589,  609,  610,  609,  609,
     2705,  611,  612, 1220, 2462,  603,  613,  609,  610,  609,
      609,  603,  611,  612,  614, 1443, 1444,  613, 1160, 1161,
     1161, 1160,  615, 1121,  616,  614, 1124,  263, 1122, 1124,
     2462,  264,  265,  615,  263,  616,  266, 1125,  623,  624,
     1445, 1446, 1162,  625,  267, 1198, 1198, 1198, 1198,  604,

      605,  626,  617,  263,  618,  604,  605,  619,  265, 1965,
     1121, 1121,  266,  620,  621, 1122, 1122,  263, 1966, 1199,
      267,  619,  265, 1200, 1121, 1121,  266,  620,  621, 1122,
     1122, 1965,  630,  627,  267,  628,  631,  632, 1843, 2720,
     1966,  633, 1359, 1359, 1359, 1359, 1844, 1137, 1845,  634,
      262,  262,  263,  262,  262,  262,  264,  265,  635,  262,
      262,  266,  262,  262,  262,  262,  262,  262,  262,  267,
      262,  262,  262,  262,  262,  262,  636,  262,  262,  262,
      262,  262,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,

      637,  262,  262,  262,  262,  637,  637,  637,  638,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  639,  637,  637,  637,
      262,  262,  262,  637,  641, 1849,  641, 1121,  642,  643,
      642,  643, 1122,  644, 1850,  644, 1357, 1357, 1357, 1357,
     1851,  645, 2721,  645,  648,  649,  648,  648, 1121,  650,
      651, 1358, 2722, 1122,  652,  648,  649,  648,  648, 1121,
      650,  651,  653, 1482, 1122,  652,  656,  657,  656,  656,
     1655,  658,  659,  653, 2723, 1656,  660,  692, 1458,  661,
     1121,  693,  694,  662,  663, 1122,  695, 2412, 1121, 1178,

     1178, 1178, 1178, 1661,  696, 2411,  664, 1482, 1668, 2724,
     1179,  654,  646, 1669,  646,  656,  657,  656,  656, 1121,
      658,  659,  654, 1162, 1122,  660,  263,  664,  661, 1121,
      264,  265,  662,  663, 1122,  266, 1730,  263, 1455, 1730,
     1823,  264,  265,  267,  692,  664,  266, 1664,  693,  694,
     1664,  690, 1823,  695,  267, 1731, 1340, 1340, 1340, 1340,
     1665,  696,  690, 1341, 2204, 2205,  664,  262,  262,  263,
      262,  262,  262,  264,  265,  665,  262,  262,  266,  262,
      262,  262,  262,  262,  262,  262,  267,  262,  262,  262,
      262,  262,  262,  666,  262,  262,  262,  262,  262,  667,

      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  262,  262,
      262,  262,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  668,  262,  262,
      667,  262,  262,  263,  262,  262,  262,  264,  265,  669,
      262,  262,  266,  262,  262,  262,  262,  262,  262,  262,
      267,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,

      670,  670,  262,  262,  262,  262,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  262,  262,  262,  670,  262,  262,  263,  262,  262,
      262,  264,  265,  671,  262,  262,  266,  262,  262,  262,
      262,  672,  262,  262,  267,  262,  262,  262,  262,  262,
      262,  672,  262,  262,  262,  262,  262,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  262,  262,  262,  262,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,

      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  262,  262,  262,  673,  262,
      674,  675,  674,  674,  262,  264,  265,  676,  262,  262,
      266,  262,  262,  262,  262,  672,  262,  262,  267,  262,
      262,  262,  262,  262,  262,  672,  262,  262,  262,  262,
      262,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      262,  262,  262,  262,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  262,

      262,  262,  677,  679, 2038,  679, 1121,  680,  681,  680,
      681, 1122,  682, 2039,  682, 1235, 1235, 1235, 1235,  263,
      683,  263,  683,  700,  701,  700,  701, 1121,  702, 1121,
      702, 2727, 1122, 1236, 1122,  717,  703,  717,  703,  718,
      719,  718,  719,  704,  720,  704,  720, 1134, 1134, 1134,
     1134,  729,  721, 1121,  721,  730,  731,  684, 1122,  684,
      732, 1121,  733,  685, 1135,  685, 1122, 1121,  734, 2265,
     2266, 1136, 1122,  686,  687,  686,  687, 1390, 1390, 1390,
     1390,  688,  689,  688,  689,  262,  262,  263,  262,  262,
      262,  264,  265,  697,  262,  262,  266,  262,  262,  262,

      262,  262,  262,  262,  267,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  262,  262,  262,  262,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  262,  262,  262,  698,  705,
      706,  450,  706,  706,  705,  707,  708,  709,  705,  705,
      710,  705,  705,  705,  705,  711,  705,  705,  712,  705,
      705,  705,  705,  705,  705,  713,  705,  705,  705,  705,

      705,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      705,  705,  705,  705,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  715,
      705,  705,  714,  262,  262,  263,  262,  262,  262,  264,
      265,  722,  262,  262,  266,  723,  262,  262,  262,  262,
      262,  262,  267,  262,  262,  262,  262,  262,  724,  725,
      262,  262,  262,  262,  262,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,

      726,  726,  726,  726,  262,  262,  262,  262,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  727,  262,  262,  726,  729, 1121, 1121,
     1744,  730,  731, 1122, 1122, 1745,  732, 2728,  733, 1390,
     1390, 1390, 1390, 2729,  734,  262,  262,  263,  262,  262,
      262,  264,  265,  735,  262,  262,  266,  736,  262,  262,
      262,  737,  262,  262,  267,  262,  262,  262,  262,  262,
      738,  725,  262,  262,  262,  262,  262,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,

      739,  739,  739,  739,  739,  739,  262,  262,  262,  262,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  727,  262,  262,  739,  741,
     1746, 2730,  741,  742,  743, 1747,  742,  743,  744, 1763,
      745,  744, 1737,  745, 1745, 1737,  746,  263, 2731,  746,
      263,  264,  265, 1736,  264,  265,  266,  263, 1746,  266,
     1738,  264,  265, 1764,  267, 1739,  266,  267,  748, 2732,
     1740, 2733,  747,  263,  267,  747,  263,  264,  265,  263,
      264,  265,  266,  264,  265,  266, 1767,  748,  266, 1742,

      267, 1768, 1742,  267, 2450,  263,  267,  755, 1156,  264,
      265, 1156, 2649,  755,  266,  795, 1237, 1237, 1237, 1237,
     2650,  749,  267,  750, 1775, 1743,  263,  751, 2450, 1776,
      264,  265, 2734,  752, 1238,  266,  795,  753,  754, 2219,
      749, 1772,  750,  267, 1772, 2735,  751, 1389, 1390, 1390,
     1389, 2220,  752, 1391, 1773, 2221,  753,  754,  262,  756,
      263,  262,  756,  262,  264,  265,  757,  262,  262,  266,
      758,  262,  262,  262,  262,  262,  262,  267,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,

      759,  759,  759,  759,  759,  759,  759,  759,  759,  262,
      262,  262,  262,  759,  759,  759,  760,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  761,  759,  759,  759,  262,  262,
      262,  759,  262,  262,  263,  262,  262,  262,  264,  265,
      762,  262,  262,  266,  262,  262,  262,  262,  262,  262,
      262,  267,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  262,  262,  262,  262,  763,  763,  763,

      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  262,  262,  262,  763,  263, 1188, 1454, 1156,
      264,  265, 1156, 1189, 1818,  266,  263,  764, 1482, 1819,
      264,  265, 1191,  267, 2736,  266,  263,  764, 2737, 1711,
      264,  265, 1711,  267, 2201,  266, 1712,  796, 1713,  765,
     2265, 2272, 1713,  267, 1235, 1235, 1235, 1235, 2201,  765,
      766,  767, 1482,  768, 1400, 1400, 1400, 1400, 1455, 2738,
      766,  767, 1236,  768,  262,  262,  263,  262,  262,  262,
      264,  265,  769,  262,  262,  266,  262,  262,  262,  262,

      262,  262,  262,  267,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  262,  262,  262,  262,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  262,  262,  262,  770,  262,  262,
      263,  262,  262,  262,  264,  265,  771,  262,  262,  266,
      262,  262,  262,  262,  262,  262,  262,  267,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,

      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  262,
      262,  262,  262,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  262,  262,
      262,  772,  774,  775,  774,  774,  830,  776,  777, 2739,
      831,  832,  778,  779,  780,  833,  834,  781,  782, 1201,
      783, 1228, 1201,  835, 1228, 2740, 2089,  784,  785,  263,
      786,  787,  788,  264,  265, 2090, 1188, 2742,  266,  263,
      796, 2692, 1189,  264,  265, 2463,  267, 1124,  266, 2693,

     1124, 1191,  789,  807,  780,  263,  267,  830, 1125,  264,
      265,  831,  832,  808,  266, 1228,  833,  834, 1228,  807,
     1840, 2463,  267, 1841,  835, 1357, 1357, 1357, 1357,  808,
     1454,  790,  780,  774,  775,  774,  774,  852,  776,  777,
     1358,  853,  854,  778,  779,  780,  855, 1853,  781,  782,
     1854,  783, 1793, 2743,  856, 1793, 1794, 1777,  784,  785,
      857,  786,  787,  788,  263, 2368, 1777,  263,  810,  811,
     1795,  810,  811,  812,  813,  814,  812,  813,  814, 2368,
     1455,  815, 1826,  789,  815,  780, 2744, 1827, 1860,  816,
     1828,  817,  816,  884,  817, 1829, 1861,  885,  886, 2745,

     2200, 1862,  887,  888,  889, 1459, 1459, 1459, 1459, 2200,
      890, 2746,  790,  780,  262,  791,  792,  791,  791,  262,
      264,  265,  793,  262,  262,  266,  262,  262,  262,  262,
      262,  262,  262,  267,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  262,  262,  262,  262,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  262,  262,  262,  794,  262,  797,

      798,  797,  797,  262,  264,  265,  799,  262,  800,  266,
      801,  262,  800,  262,  802,  262,  262,  803,  262,  262,
      262,  262,  262,  262,  804,  262,  805,  262,  262,  262,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  262,
      262,  262,  262,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  262,  262,
      262,  806,  818,  819,  820,  819,  819,  821,  822,  823,
      824,  818,  818,  825,  818,  818,  818,  818,  818,  818,

      818,  826,  818,  818,  818,  818,  818,  827,  818,  818,
      818,  818,  818,  818,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  818,  818,  818,  818,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  818,  818,  821,  828,  263, 2008, 2747,  263,
      264,  265, 2009,  264,  265,  266,  836,  837,  266,  836,
      837, 1420, 1420,  267, 1420, 1420,  267,  840,  841,  840,
      840,  852,  842,  843, 2748,  853,  854,  844,  845,  846,

      855,  840,  841,  840,  840,  847,  842,  843,  856, 2265,
     2266,  844,  845,  846,  857,  838, 2265, 2272,  838,  847,
      840,  841,  840,  840,  966,  842,  843, 2011,  842,  843,
      844,  845, 2012,  844,  840,  841,  840,  840,  847,  842,
      843,  978, 2749, 2750,  844,  845,  849, 1419,  850,  979,
     1419,  980,  847, 1391, 1410, 1410, 1410, 1410, 2751, 2752,
      849, 1411,  850,  262,  262,  263,  262,  262,  262,  264,
      265,  858,  262,  262,  266,  262,  262,  262,  262,  262,
      262,  262,  267,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  859,  859,  859,  859,  859,

      859,  859,  859,  859,  859,  859,  859,  859,  859,  859,
      859,  859,  859,  859,  262,  262,  262,  262,  859,  859,
      859,  859,  859,  859,  859,  859,  859,  859,  859,  859,
      859,  859,  859,  859,  859,  859,  859,  859,  859,  859,
      859,  859,  859,  262,  262,  262,  859,  262,  262,  263,
      262,  262,  262,  264,  265,  860,  262,  262,  266,  262,
      262,  262,  262,  262,  262,  262,  267,  262,  262,  262,
      262,  262,  262,  861,  262,  262,  262,  262,  262,  862,
      862,  862,  862,  862,  862,  862,  862,  862,  862,  862,
      862,  862,  862,  862,  862,  862,  862,  862,  262,  262,

      262,  262,  862,  862,  862,  862,  862,  862,  862,  862,
      862,  862,  862,  862,  862,  862,  862,  862,  862,  862,
      862,  862,  862,  862,  862,  862,  862,  262,  262,  262,
      862,  864, 2753,  864, 1504,  865,  866,  865,  866, 1504,
      867, 1504,  867,  868, 2754,  868, 1504,  864,  869,  864,
      869,  871,  866,  871,  866, 2755,  872, 1515,  872,  868,
     1515,  868, 2201,  874,  869,  874,  869,  875,  876,  875,
      876, 2201,  877, 1429,  877,  878, 1429,  878, 2756, 1430,
      879,  870,  879,  870,  874, 2368,  874, 2087,  881,  876,
      881,  876, 2088,  882, 2368,  882,  878,  870,  878,  870,

      884,  879, 1744,  879,  885,  886, 2757, 1745, 2758,  887,
      888,  889, 2759,  880,  892,  880,  892,  890,  893,  894,
      893,  894, 2222,  895, 2223,  895, 1178, 1178, 1178, 1178,
     2127,  896, 2224,  896,  880,  900,  880, 1179,  900,  901,
      902, 2760,  901,  902,  903,  904,  905,  903,  904,  905,
     1162, 1448,  906,  908, 1448,  906,  908,  909,  910, 2761,
      909,  915,  911, 1763, 1449,  911,  917,  918, 1745,  917,
      912,  919,  920,  912, 2231, 2127,  921,  922,  923, 2232,
     2764,  263, 1181, 1833,  924, 1008, 1009, 2765, 1834, 1835,
     1010, 1836,  897,  898,  897,  898,  917,  918, 1011,  917,

      263,  919,  920, 2127,  517,  518,  921,  922,  923,  519,
      468,  469,  468,  468,  924,  470,  471,  520, 2766, 2767,
      472,  946,  947, 1528, 2369,  475, 1528, 1759,  476, 2369,
     1759,  913,  914, 2369,  913,  914,  926,  927,  926,  926,
     1760,  928,  929, 2369, 1188, 1761,  930,  931,  932,  521,
     1189,  964, 2120, 1743,  933,  468,  469,  468,  468, 1191,
      470,  471,  934, 2768,  935,  472,  946,  947, 2410, 1265,
      475,  263, 1265,  476,  263,  949,  950, 2410,  949,  950,
      951, 1537,  952,  951, 1537,  952, 2769, 2143,  953,  966,
     2143,  953, 1806,  842,  975, 2120, 2771, 2773,  844,  976,

      977, 1141, 1141, 1141, 1141, 1142,  978, 2543, 1143,  936,
      926,  927,  926,  926, 1352,  928,  929, 1352, 2774, 2410,
      930,  931,  932, 2449, 2120, 1136, 1266, 1267,  933,  955,
      956,  955,  955, 2410,  957,  958,  934, 2449,  935,  959,
      960,  961, 2207, 1967,  962, 2208, 1967,  963,  955,  956,
      955,  955, 1967,  957,  958, 1967, 1968, 2775,  959,  960,
      961, 2013, 1569,  962,  966, 1569,  963, 1570,  842,  975,
     1969, 1266, 1267,  844,  976,  977, 1459, 1459, 1459, 1459,
     1832,  978, 1142,  936,  937,  937,  938,  937,  937,  937,
      939,  940,  941,  937,  937,  942,  937,  937,  937,  937,

      937,  937,  937,  943,  937,  937,  937,  937,  937,  937,
      944,  937,  937,  937,  937,  937,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  937,  937,  937,  937,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  944,  937,  937,  945,  263, 1540,
      966, 1541,  517,  518,  967,  968, 1540,  519, 1541,  969,
     1237, 1237, 1237, 1237,  966,  520,  966,  970,  967,  968,
      972,  968, 2165,  969, 2109,  973, 1967, 2109, 1238, 1967,

     1968,  970, 1352,  970,  966, 1352,  966, 1791,  972,  968,
      842,  843, 2054,  973, 1969,  844, 1792,  521, 2110,  964,
      971,  970, 1901,  978, 2393, 1145, 1145, 1145, 1145, 2819,
     2154,  979, 1146,  980,  971,  982,  971, 2165, 1637,  983,
      984, 1637, 1135, 2820,  985,  989,  982,  986,  989, 1638,
      983,  984,  987, 1726,  971,  985, 1726,  992,  990, 1266,
     1267,  993,  994,  987,  988, 2165,  995, 1221, 1221, 1221,
     1221, 2706,  992, 2154,  996,  988,  993,  994, 2835, 1737,
     1727,  995, 1737,  982, 1222,  988,  997,  999, 1000,  996,
     1742, 1224, 1001, 1742,  982, 2706,  988, 1738,  999, 1000,

     1002,  997, 2154, 1001, 1018, 2836, 1148,  997, 1019, 1020,
     1728, 1002, 1003, 1021, 1664,  263, 1743, 1664, 1225, 1079,
     1080, 1022,  997, 1003, 1081,  263, 1082, 1665, 1729, 1079,
     1080, 2837, 1083, 1003, 1081, 2838, 1082, 1474, 1474, 1474,
     1474, 2839, 1083, 2840, 1003,  262,  262,  263,  262,  262,
      262,  264,  265, 1004,  262,  262, 1005,  262,  262,  262,
      262,  262,  262,  262,  267,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006,  262,  262,  262,  262,

     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006,  262,  262,  262, 1006, 1007,
     1007,  263, 1007, 1007, 1007, 1008, 1009, 1012, 1007, 1007,
     1010, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1011, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1007, 1007, 1007, 1007, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,

     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1007,
     1007, 1007, 1013,  262,  262,  263,  262,  262,  262,  264,
      265, 1014,  262,  262, 1015,  262,  262,  262,  262,  262,
      262,  262,  267,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016,  262,  262,  262,  262, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016,  262,  262,  262, 1016, 1017, 1017, 1018,

     1017, 1017, 1017, 1019, 1020, 1023, 1017, 1017, 1021, 1017,
     1017, 1017, 1017, 1017, 1017, 1017, 1022, 1017, 1017, 1017,
     1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1017, 1017,
     1017, 1017, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1017, 1017, 1017,
     1024,  263, 1540,  263, 1541, 1026, 1027, 1026, 1027, 1540,
     1028, 1541, 1028, 1385, 1385, 1385, 1385,  263, 1029,  263,

     1029, 1085, 1086, 1085, 1086, 1386, 1087, 2841, 1087, 1240,
     1240, 1240, 1240, 1090, 1088, 2842, 1088, 1091, 1092, 1090,
     2394, 2843, 1093, 1091, 1092, 2845, 2109, 2846, 1093, 2109,
     1094, 2653, 1030, 1242, 1030, 2847, 1094, 1474, 1474, 1474,
     1474, 1516, 1516, 1516, 1516, 1601, 1601, 1601, 1601, 1031,
     2110, 1031, 1032, 1033, 1034, 1033, 1033, 1032, 1035, 1036,
     1037, 1032, 1032, 1038, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1039, 1032, 1032, 1032, 1032, 1032, 1032, 1040, 1032,
     1032, 1032, 1032, 1032, 1041, 1041, 1041, 1041, 1041, 1041,
     1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041,

     1041, 1041, 1041, 1042, 1032, 1032, 1032, 1041, 1041, 1041,
     1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041,
     1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041,
     1041, 1041, 1032, 1032, 1032, 1041,  262, 1043, 1044, 1043,
     1043,  262,  264,  265, 1045,  262,  262,  266,  262,  262,
      262,  262,  262,  262,  262,  267,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262, 1046, 1046,
     1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046,
     1046, 1046, 1046, 1046, 1046, 1046, 1046,  262,  262,  262,
      262, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046,

     1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046,
     1046, 1046, 1046, 1046, 1046, 1046,  262,  262,  262, 1046,
      263, 2851,  263, 2491, 1048, 1049, 1048, 1049, 2492, 1050,
     1051, 1050, 1051, 1965, 2707, 1096, 1097, 1052, 1096, 1052,
     1098, 1099, 1966, 2143, 1987, 1100, 2143, 1987, 1101, 1150,
     1150, 1150, 1150, 1102, 1240, 1240, 1240, 1240, 2707, 1967,
     1151, 1103, 1967, 2040, 1152, 1104, 1135, 1235, 1235, 1235,
     1235, 1965, 2854, 1136, 1154, 1155, 2004, 2041, 1242, 2004,
     1966, 1563, 1563, 1563, 1563, 1236, 1105, 1053, 1564, 1053,
     1054, 1055, 1056, 1055, 1055, 1057, 1058, 1059, 1060, 1054,

     1054, 1061, 1062, 1063, 1054, 1054, 1054, 1054, 1054, 1064,
     1054, 1054, 1054, 1054, 1054, 1065, 1054, 1054, 1054, 1054,
     1054, 1054, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066,
     1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066,
     1066, 1054, 1054, 1054, 1054, 1066, 1066, 1066, 1066, 1066,
     1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066,
     1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066,
     1054, 1054, 1057, 1066, 1068,  263, 2858, 1068, 1882, 1069,
     1070, 1882, 1883, 2859, 1071, 1068,  263, 1188, 1068, 2860,
     1069, 1070, 1072, 1189, 2861, 1071, 1884, 1373, 1373, 1373,

     1373, 1073, 1191, 1072, 1106, 1097, 2862, 1106, 1885, 1098,
     1099, 2863, 1073, 2593, 1100, 1110, 1374, 1107, 2864, 1111,
     1112, 1113, 1108, 1737, 1114, 2865, 1737, 1115, 2594, 1885,
     1103, 1074, 1116, 2866, 1104, 2468, 1206, 1207, 1207, 1206,
     1117, 1738, 1074, 1208, 1118, 1791, 2867, 1075, 1711, 1076,
     2868, 1711, 2870, 1077, 1792, 1105, 2872, 1713, 1075, 1730,
     1076, 1713, 1730, 2062, 1077, 1118, 1113, 1119, 1110, 1540,
     1119, 1541, 1111, 1112, 1113, 1289, 2871, 1114, 1731, 2871,
     1120, 1178, 1178, 1178, 1178, 1116, 2062, 1161, 1161, 1161,
     1161, 1170, 1179, 1117, 1171, 1711, 2084, 1118, 1711, 1210,

     1275, 1275, 1275, 1275, 1713, 1162, 2084, 1276, 1713, 1277,
     2093, 1162, 1540, 1277, 1541, 1211, 2093, 2097, 1118, 1113,
     1237, 1237, 1237, 1237, 1278, 1291, 1296, 1296, 1296, 1296,
     2097, 1292, 1338, 1338, 1338, 1338, 1293, 1294, 1238, 1295,
     1182, 1338, 1338, 1338, 1338, 1350, 1127, 1127, 1350, 2101,
     1242, 1351, 1298, 1277, 2101, 2105, 1339, 1563, 1563, 1563,
     1563, 2654, 2105, 1128, 1564, 1339, 2874, 2113, 1170, 1163,
     1212, 1212, 1213, 1212, 1163, 1163, 1163, 1214, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 2113, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,

     1163, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
     1163, 1163, 1163, 1163, 1215, 1215, 1215, 1215, 1215, 1215,
     1215, 1215, 1215, 1216, 1215, 1215, 1215, 1215, 1215, 1215,
     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 2762,
     1163, 1163, 1215, 1207, 1207, 1207, 1207, 1540, 2763, 1541,
     1208, 1268, 1268, 1268, 1268, 1269, 2875, 2875, 1270, 1296,
     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 1296, 1296, 1242, 1296, 1296, 1296, 1296,
     2162, 2161, 2876, 1242, 2161, 1298, 2869, 1242, 2877, 1298,

     2163, 1242, 2878, 1298, 1760, 1242, 1730, 1298, 1772, 1730,
     1242, 1772, 1298, 2879, 2162, 2880, 1210, 1296, 1296, 1296,
     1296, 1773, 2881, 1299, 2882, 1731, 2163, 1302, 1408, 1408,
     1408, 1408, 3915, 1239, 1240, 1240, 1239, 1303, 2883, 1241,
     2884, 1242, 1269, 1298, 1296, 1296, 1296, 1296, 1312, 2885,
     2243, 1304, 1409, 2243, 1305, 2529, 2886, 1242, 1296, 1296,
     1296, 1296, 2887, 1243, 1485, 1485, 1485, 1485, 1242, 2888,
     1298, 1127, 1127, 1127, 1127, 1793, 1306, 1244, 1793, 1188,
     1307, 1486, 1242, 1245, 1298, 1189, 2889, 1246, 1247, 1128,
     1248, 1249, 1250, 2172, 1191, 2890, 1251, 1252, 1253, 1254,

     1255, 1308, 1256, 2894, 1257, 1258, 1259, 1260, 1261, 2895,
     2896, 1309, 1296, 1296, 1296, 1296, 2897, 1313, 2898, 1310,
     2899, 1311, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     2900, 1296, 1296, 1296, 1296, 2902, 1242, 2903, 1298, 1296,
     1296, 1296, 1296, 2904, 1967, 2905, 1242, 1967, 1298, 2906,
     1242, 2161, 1298, 1726, 2161, 1242, 1726, 1298, 1296, 1296,
     1296, 1296, 2013, 1242, 1760, 1298, 2907, 1296, 1296, 1296,
     1296, 1296, 1296, 1296, 1296, 2891, 1315, 1188, 2891, 1314,
     1727, 2908, 1242, 1189, 1298, 1296, 1296, 1296, 1296, 1316,
     1317, 1242, 1191, 1298, 1320, 1242, 2909, 1298, 2901, 1318,

     2915, 1296, 1296, 1296, 1296, 1319, 2916, 2917, 2919, 1242,
     1728, 1298, 1296, 1296, 1296, 1296, 1338, 1338, 1338, 1338,
     1343, 1878, 2901, 1344, 1878, 1242, 1323, 1298, 1729, 1321,
     2161, 2922, 1322, 2161, 1324, 2923, 1242, 2182, 1298, 2892,
     1339, 2924, 2892, 1760, 1325, 1347, 1347, 1347, 1347, 2925,
     2893, 1881, 1328, 1403, 1403, 1403, 1403, 1329, 2928, 2926,
     1326, 2929, 2930, 1127, 1127, 1127, 1127, 1330, 2927, 1339,
     1404, 1349, 1881, 2356, 2931, 1331, 2356, 1406, 2627, 1327,
     1332, 1128, 1235, 1235, 1235, 1235, 1237, 1237, 1237, 1237,
     2932, 2934, 1403, 1403, 1403, 1403, 2936, 1343, 2426, 1878,

     1236, 2426, 1878, 2673, 1238, 1360, 1360, 1360, 1360, 1404,
     1408, 1408, 1408, 1408, 2938, 2939, 1406, 1408, 1408, 1408,
     1408, 1413, 2940, 2941, 1414, 1408, 1408, 1408, 1408, 1881,
     2942, 2945, 1361, 2943, 1409, 1427, 1427, 1427, 1427, 2946,
     2944, 1409, 2947, 1435, 1435, 1435, 1435, 1407, 2948, 1409,
     1881, 2949, 2950, 1428, 1470, 1470, 1470, 1470, 2951, 2952,
     1362, 1436, 1363, 1470, 1470, 1470, 1470, 1489, 1489, 1489,
     1489, 2953, 1364, 1365, 2954, 2955, 1366, 1367, 1368, 2956,
     1369, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1127,
     1127, 1127, 1127, 2957, 1235, 1235, 1235, 1235, 1413, 1237,

     1237, 1237, 1237, 1524, 1524, 1524, 1524, 1128, 2958, 2959,
     2961, 1471, 1236, 1522, 1522, 1522, 1522, 1238, 1491, 2963,
     1471, 1127, 1127, 1127, 1127, 2964, 1267, 1526, 2965, 2773,
     1523, 1127, 1127, 1127, 1127, 2966, 1493, 2986, 2987, 1128,
     1493, 1235, 1235, 1235, 1235, 1237, 1237, 1237, 1237, 1128,
     3915, 3915, 3915, 3915, 3013, 1759, 3014, 3915, 1759, 1236,
     3028, 3029, 3030, 1238, 1566, 1566, 1566, 1566, 1760, 1571,
     1571, 1571, 1571, 1761, 3031, 3032, 1572, 1567, 1573, 3034,
     2962, 1743, 1573, 1571, 1571, 1571, 1571, 3035, 3036, 3041,
     1572, 1882, 1573, 3044, 1882, 1954, 1573, 3915, 3915, 3915,

     3915, 3047, 3048, 3049, 3915, 3050, 3915, 3051, 3052, 1955,
     3915, 1571, 1571, 1571, 1571, 3053, 3054, 3056, 1572, 3059,
     1573, 1885, 3060, 3061, 1573, 1235, 1235, 1235, 1235, 1237,
     1237, 1237, 1237, 1575, 1575, 1575, 1575, 1579, 1579, 1579,
     1579, 3062, 1885, 1236, 3062, 3063, 3064, 1238, 1580, 1582,
     1582, 1582, 1582, 1582, 1582, 1582, 1582, 1584, 1584, 1584,
     1584, 1581, 3065, 3066, 1585, 1200, 3067, 1582, 1582, 1582,
     1582, 1587, 3068, 1583, 1588, 2127, 3069, 1583, 1582, 1582,
     1582, 1582, 3070, 1577, 1592, 1592, 1592, 1592, 3071, 3072,
     3073, 1583, 1594, 1594, 1594, 1594, 1593, 1601, 1601, 1601,

     1601, 3074, 1583, 1595, 1604, 1604, 1604, 1604, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 3075, 1596, 1647, 1647,
     1647, 1647, 1605, 1651, 1651, 1651, 1651, 3076, 3077, 1648,
     1651, 1651, 1651, 1651, 1653, 1653, 1653, 1653, 1652, 3078,
     3079, 3080, 1597, 1649, 1540, 1652, 1541, 3081, 1587, 1666,
     1666, 1666, 1666, 3082, 2871, 1670, 1671, 2871, 1672, 3083,
     1673, 3057, 1665, 1674, 1675, 3084, 3085, 1660, 1650, 1693,
     1693, 1693, 1693, 1676, 3086, 1677, 1694, 1693, 1693, 1693,
     1693, 3087, 3088, 3089, 1694, 3055, 1698, 1698, 1698, 1698,
     3090, 1176, 1704, 1704, 1704, 1704, 3092, 1649, 1699, 1705,

     3094, 1700, 1704, 1704, 1704, 1704, 3098, 3099, 3100, 1705,
     1708, 1708, 1708, 1708, 1716, 1716, 1716, 1716, 3101, 1696,
     3102, 1709, 1716, 1716, 1716, 1716, 1750, 1696, 1718, 1718,
     1718, 1718, 3103, 2891, 2892, 1719, 2891, 2892, 1717, 3104,
     1716, 1716, 1716, 1716, 1721, 2893, 1717, 1722, 1716, 1716,
     1716, 1716, 3105, 1751, 1752, 3106, 1753, 3107, 1754, 3108,
     3109, 1755, 1756, 3110, 1717, 3111, 2263, 3112, 1750, 2263,
     3114, 1757, 1717, 1758, 1751, 1752, 3116, 1753, 3117, 1754,
     3120, 3121, 1755, 1756, 1774, 1774, 1774, 1774, 1127, 1127,
     1127, 1127, 1757, 3123, 1758, 3124, 2264, 1773, 1133, 1134,

     1134, 1133, 1766, 3125, 3126, 3127, 1128, 1134, 1134, 1134,
     1134, 1145, 1145, 1145, 1145, 1135, 1711, 2264, 1146, 1711,
     3132, 1721, 1136, 1712, 1135, 1713, 3135, 3136, 1135, 1713,
     3023, 1136, 1138, 1138, 1138, 1138, 3137, 3138, 3139, 1139,
     3915, 3915, 3915, 3915, 3140, 3024, 1840, 3915, 1778, 1778,
     1778, 1778, 1141, 1141, 1141, 1141, 3155, 3159, 2267, 1151,
     3160, 2267, 3163, 1152, 1138, 1138, 1138, 1138, 3188, 3189,
     3190, 1139, 3195, 1154, 1155, 3196, 1136, 1137, 1150, 1150,
     1150, 1150, 3200, 1145, 1145, 1145, 1145, 3201, 1885, 1151,
     1146, 3202, 1148, 1152, 3203, 1135, 1781, 1781, 1781, 1781,

     1135, 3204, 1136, 1154, 1155, 3915, 3915, 3915, 3915, 1885,
     3205, 3208, 3915, 1135, 1783, 1783, 1783, 1783, 3210, 3211,
     3212, 1784, 3915, 1786, 1786, 1786, 1786, 1142, 3213, 3215,
     1143, 1150, 1150, 1150, 1150, 1157, 1157, 1157, 1157, 3216,
     3217, 3218, 1158, 1540, 3220, 1541, 1152, 1136, 1135, 3222,
     1150, 1150, 1150, 1150, 3224, 1136, 1154, 1155, 3225, 3915,
     3223, 1151, 3915, 3223, 1148, 1152, 3915, 1135, 3226, 2435,
     3915, 3915, 3915, 3915, 1136, 1154, 1155, 3915, 2653, 3227,
     1778, 1778, 1778, 1778, 2435, 2127, 3915, 1160, 1161, 1161,
     1160, 1151, 3228, 3229, 3230, 1152, 1161, 1161, 1161, 1161,

     1164, 1164, 1165, 1164, 1142, 1154, 1155, 1164, 1164, 1165,
     1164, 1162, 1167, 1167, 1167, 1167, 3231, 3232, 3062, 1168,
     1162, 3062, 3233, 3234, 1166, 3915, 3915, 3915, 3915, 3235,
     3236, 1166, 3915, 1788, 1788, 1788, 1788, 2456, 1167, 1167,
     1167, 1167, 3237, 2456, 1179, 1168, 1178, 1178, 1178, 1178,
     1173, 1173, 1173, 1173, 3085, 3239, 3240, 1179, 1796, 1796,
     1796, 1796, 1170, 3241, 3242, 1171, 1137, 3243, 3246, 3249,
     1162, 3250, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     3251, 3252, 1162, 1179, 3253, 3254, 3256, 1179, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1162, 3257, 3258, 1179,

     1162, 3259, 3261, 1179, 1198, 1198, 1198, 1198, 1206, 1207,
     1207, 1206, 1162, 3262, 3263, 1208, 1162, 1207, 1207, 1207,
     1207, 3264, 3265, 3266, 1208, 3270, 3277, 3278, 1199, 3915,
     3915, 3915, 3915, 3279, 3283, 3284, 3915, 2739, 1288, 1170,
     1221, 1221, 1221, 1221, 2237, 3297, 3275, 1799, 1221, 1221,
     1221, 1221, 3915, 3915, 3915, 3915, 3298, 1222, 3303, 3915,
     1798, 3276, 3304, 3305, 1224, 1222, 1221, 1221, 1221, 1221,
     3301, 1210, 1224, 3306, 1810, 1810, 1810, 1810, 3321, 3302,
     1210, 1811, 3322, 1222, 3328, 3329, 3332, 1211, 3333, 3334,
     1224, 1825, 1825, 1825, 1825, 3340, 3915, 1262, 1262, 1262,

     1262, 3342, 2640, 3915, 1263, 3344, 3915, 3346, 3915, 1280,
     1280, 1280, 1280, 3347, 1809, 1163, 1212, 1212, 1213, 1212,
     1163, 1163, 1163, 1214, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 3915, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1215, 1215, 1215,
     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
     1215, 1215, 1215, 1215, 1215, 1215, 1163, 1163, 1163, 1163,
     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1216,
     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
     1215, 1215, 1215, 1215, 1215, 2435, 1163, 1163, 1215, 1221,

     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1219, 1219, 1219,
     1219, 1221, 1221, 1221, 1221, 3351, 1222, 2435, 3352, 3353,
     1222, 3354, 3355, 1224, 3356, 2456, 3360, 1224, 1221, 1221,
     1221, 1221, 2456, 3359, 3361, 1224, 3359, 1235, 1235, 1235,
     1235, 1237, 1237, 1237, 1237, 1222, 1831, 1831, 1831, 1831,
     3362, 3363, 1224, 3357, 1225, 1236, 3357, 3364, 3365, 1238,
     3915, 3915, 3915, 3915, 3358, 1809, 3370, 3915, 3371, 3372,
     1242, 1863, 1863, 1863, 1863, 1268, 1268, 1268, 1268, 1225,
     3374, 1265, 3375, 3376, 1265, 3132, 1220, 1830, 1831, 1831,
     1830, 3377, 2068, 1241, 3379, 2068, 2069, 1298, 3380, 1242,

     1865, 1865, 1865, 1865, 1865, 1262, 1262, 1262, 1262, 3383,
     2069, 1242, 1263, 1357, 1357, 1357, 1357, 1243, 1890, 1890,
     1890, 1890, 2070, 1296, 1296, 1296, 1296, 3386, 1358, 1891,
     3387, 1244, 3388, 3389, 3391, 1892, 3392, 1245, 1266, 1267,
     3393, 1246, 1247, 2070, 1248, 1249, 1250, 1242, 3395, 1298,
     1251, 1252, 1253, 1254, 1255, 3405, 1256, 3406, 1257, 1258,
     1259, 1260, 1261, 1275, 1275, 1275, 1275, 3410, 3411, 3412,
     1276, 3413, 1277, 3434, 1862, 3437, 1277, 3915, 3915, 3915,
     3915, 3438, 3439, 3444, 3915, 1882, 3915, 1278, 1882, 3445,
     3915, 1869, 1869, 1869, 1869, 1872, 1872, 1872, 1872, 3446,

     1277, 3915, 1870, 2013, 1277, 2435, 3451, 1873, 1874, 1878,
     3452, 1878, 1878, 1879, 1878, 1885, 1277, 2065, 3453, 1876,
     2065, 1877, 1880, 3454, 1887, 1887, 1887, 1887, 1269, 3455,
     3915, 1270, 1890, 1890, 1890, 1890, 1885, 2166, 2456, 1881,
     3458, 1881, 1840, 1891, 1277, 3436, 3459, 2067, 1242, 1892,
     1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 3460, 3461,
     1881, 1891, 1881, 3447, 3448, 1891, 3447, 1892, 2067, 3462,
     3466, 1892, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890,
     3467, 3359, 3223, 1891, 3359, 3223, 3469, 1891, 3472, 1892,
     3473, 3449, 3450, 1892, 3449, 3478, 3479, 1894, 1296, 1296,

     1296, 1296, 3348, 3349, 3480, 1269, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 1296, 3485, 3486, 1895, 1896, 1905, 1905,
     1905, 1905, 1242, 1897, 1298, 1296, 1296, 1296, 1296, 3405,
     1242, 3301, 1298, 3492, 1242, 1900, 1298, 1296, 1296, 1296,
     1296, 3493, 3456, 1898, 3357, 3456, 1899, 3357, 3494, 1242,
     1832, 1298, 1902, 1903, 3457, 3358, 1904, 1296, 1296, 1296,
     1296, 1242, 1901, 1298, 1296, 1296, 1296, 1296, 2215, 1296,
     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1906, 3513, 3514,
     3515, 1242, 3518, 1298, 1296, 1296, 1296, 1296, 1242, 3519,
     1298, 3521, 3519, 1242, 1907, 1298, 3522, 1242, 2127, 1298,

     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1242, 1908,
     1298, 3523, 1909, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1296, 1910, 3520, 2127, 1242, 3520, 1298, 3524, 1242, 1912,
     1298, 1911, 1296, 1296, 1296, 1296, 3525, 1242, 3085, 1298,
     3526, 1242, 3085, 1298, 3530, 1913, 1914, 1296, 1296, 1296,
     1296, 1296, 1296, 1296, 1296, 3121, 1242, 3533, 1298, 1296,
     1296, 1296, 1296, 1916, 1296, 1296, 1296, 1296, 3534, 3535,
     1917, 1242, 3538, 1298, 1915, 1242, 3539, 1298, 3447, 3448,
     1920, 3447, 1918, 1242, 3456, 1298, 1919, 3456, 1242, 3540,
     1298, 3541, 1296, 1296, 1296, 1296, 3457, 3544, 3545, 1921,

     1296, 1296, 1296, 1296, 1922, 1296, 1296, 1296, 1296, 1926,
     1923, 3544, 1924, 3546, 3547, 1927, 1242, 3561, 1298, 3562,
     1925, 3210, 2127, 3569, 1242, 2068, 1298, 1878, 2068, 1242,
     1878, 1298, 1296, 1296, 1296, 1296, 2127, 1928, 1296, 1296,
     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1929, 1296, 1296, 1296, 1296, 2070, 1242, 1881, 1298, 3085,
     3449, 3450, 1242, 3449, 1298, 3570, 1242, 3085, 1298, 3573,
     1242, 1931, 1298, 1930, 3574, 1242, 2070, 1298, 1881, 1296,
     1296, 1296, 1296, 3575, 1296, 1296, 1296, 1296, 3576, 1296,
     1296, 1296, 1296, 3577, 1934, 1932, 1338, 1338, 1338, 1338,

     1933, 3578, 1935, 1242, 3579, 1298, 1938, 1937, 1242, 3544,
     1298, 3584, 1936, 1242, 3585, 1298, 1296, 1296, 1296, 1296,
     1339, 3594, 1939, 1296, 1296, 1296, 1296, 2127, 3085, 3601,
     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 3395, 3602,
     1242, 3519, 1298, 3520, 3519, 1940, 3520, 1242, 3565, 1298,
     3567, 3605, 1942, 1941, 1242, 3606, 1298, 3541, 1242, 3608,
     1298, 1340, 1340, 1340, 1340, 3609, 3613, 3618, 1341, 3915,
     3915, 3915, 3915, 3576, 3619, 3620, 3915, 3622, 3623, 1943,
     1949, 1949, 1949, 1949, 1340, 1340, 1340, 1340, 1944, 3627,
     3632, 1341, 1347, 1347, 1347, 1347, 3633, 2263, 3639, 1946,

     2263, 1945, 1347, 1347, 1347, 1347, 1349, 1951, 1951, 1951,
     1951, 1343, 2269, 3641, 1344, 2269, 1339, 3620, 1349, 1347,
     1347, 1347, 1347, 2331, 3657, 2270, 1339, 2264, 1349, 3662,
     3667, 1339, 1350, 1127, 1127, 1350, 1878, 2105, 1351, 1878,
     1952, 2101, 2271, 1339, 2097, 1349, 2093, 2664, 2264, 1953,
     1128, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1373,
     1373, 1373, 1373, 2271, 2084, 2661, 1881, 1373, 1373, 1373,
     1373, 1970, 1970, 1970, 1970, 2062, 2658, 1123, 1374, 2657,
     2656, 1385, 1385, 1385, 1385, 1123, 1374, 1881, 1343, 1360,
     1360, 1360, 1360, 1386, 1980, 1980, 1980, 1980, 1983, 1984,

     1984, 1983, 2655, 2652, 1391, 1981, 1984, 1984, 1984, 1984,
     1393, 3915, 2267, 1393, 3915, 2267, 1361, 2651, 3915, 2648,
     1982, 1989, 1989, 1989, 1989, 1990, 1991, 1992, 1990, 1985,
     1985, 1985, 1985, 1985, 1400, 1400, 1400, 1400, 1997, 1997,
     1997, 1997, 1885, 2647, 1362, 1998, 1363, 2646, 1403, 1403,
     1403, 1403, 1403, 1403, 1403, 1403, 1364, 1365, 1183, 2645,
     1366, 1367, 1368, 1885, 1369, 1404, 1183, 3915, 2644, 1404,
     3915, 2643, 1406, 2640, 3915, 2639, 1406, 1403, 1403, 1403,
     1403, 1403, 1403, 1403, 1403, 1408, 1408, 1408, 1408, 1410,
     1410, 1410, 1410, 1186, 1404, 1187, 1411, 2638, 1404, 2637,

     1186, 1406, 2636, 1187, 2635, 1406, 1195, 1995, 1186, 1409,
     3915, 3915, 3915, 3915, 1195, 1202, 1204, 3915, 1410, 1410,
     1410, 1410, 2004, 1202, 1204, 1411, 1408, 1408, 1408, 1408,
     2002, 2002, 2002, 2002, 1413, 2630, 1196, 1414, 1408, 1408,
     1408, 1408, 1987, 1196, 1217, 1420, 1203, 2000, 1420, 2353,
     1409, 1196, 1217, 1203, 1409, 2006, 2006, 2006, 2006, 2622,
     2621, 1203, 1409, 2620, 1865, 1865, 1865, 1865, 1865, 1427,
     1427, 1427, 1427, 1435, 1435, 1435, 1435, 1459, 1459, 1459,
     1459, 1470, 1470, 1470, 1470, 2619, 2267, 1428, 2618, 2267,
     2617, 1436, 1474, 1474, 1474, 1474, 1485, 1485, 1485, 1485,

     1485, 1485, 1485, 1485, 2616, 2023, 2023, 2023, 2023, 2615,
     2614, 1413, 2024, 1486, 2613, 2612, 1885, 1486, 2025, 1485,
     1485, 1485, 1485, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 2611, 1489, 1489, 1489, 1489, 1486, 1885, 1471, 2028,
     2028, 2028, 2028, 1227, 2610, 2609, 2029, 1492, 1492, 1492,
     1492, 2036, 2036, 2036, 2036, 1516, 1516, 1516, 1516, 1227,
     1524, 1524, 1524, 1524, 2608, 1205, 2037, 1227, 1522, 1522,
     1522, 1522, 1205, 1353, 1491, 2607, 2546, 2545, 1491, 2543,
     1205, 1353, 2027, 1491, 1526, 1523, 1524, 1524, 1524, 1524,
     1524, 1524, 1524, 1524, 2064, 2064, 2064, 2064, 2261, 2539,

     2065, 1370, 1493, 2065, 2066, 1563, 1563, 1563, 1563, 1370,
     2532, 1284, 1564, 2066, 1526, 3915, 3915, 3915, 3915, 2531,
     1402, 1466, 3915, 1566, 1566, 1566, 1566, 1284, 1402, 1466,
     2067, 2530, 2528, 2527, 2042, 1284, 1567, 1566, 1566, 1566,
     1566, 1566, 1566, 1566, 1566, 2526, 1571, 1571, 1571, 1571,
     1567, 2067, 2525, 1572, 1567, 1573, 1290, 1481, 1484, 1573,
     3915, 3915, 3915, 3915, 1356, 1481, 1484, 3915, 2524, 3915,
     1488, 1356, 1290, 3915, 1571, 1571, 1571, 1571, 1488, 1356,
     1290, 1572, 2523, 1573, 2522, 2521, 2520, 1573, 1575, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,

     1579, 1579, 1579, 1579, 2519, 2074, 2074, 2074, 2074, 2516,
     1375, 1580, 2075, 1582, 1582, 1582, 1582, 1375, 2076, 1584,
     1584, 1584, 1584, 1494, 1581, 1375, 1585, 3915, 3915, 3915,
     3915, 1494, 1503, 1506, 3915, 2515, 1467, 1583, 1577, 2514,
     1503, 1506, 1577, 1467, 1514, 1521, 1577, 1584, 1584, 1584,
     1584, 1467, 1514, 1521, 1585, 1582, 1582, 1582, 1582, 2080,
     2080, 2080, 2080, 1587, 2513, 2512, 1588, 1582, 1582, 1582,
     1582, 2511, 1592, 1592, 1592, 1592, 2510, 2509, 2508, 1583,
     2507, 1538, 1544, 1583, 1593, 2081, 2081, 2081, 2081, 1538,
     1544, 1583, 1594, 1594, 1594, 1594, 2082, 1601, 1601, 1601,

     1601, 2506, 2505, 1595, 2086, 2086, 2086, 2086, 1604, 1604,
     1604, 1604, 2095, 2095, 2095, 2095, 2504, 1596, 2099, 2099,
     2099, 2099, 2103, 2103, 2103, 2103, 1605, 2107, 2107, 2107,
     2107, 1636, 1495, 1550, 1636, 1639, 1639, 1639, 1639, 1495,
     1587, 1550, 1597, 2115, 2115, 2115, 2115, 1495, 2503, 2502,
     2108, 2108, 2108, 2108, 2108, 1647, 1647, 1647, 1647, 1651,
     1651, 1651, 1651, 2501, 1509, 1552, 1648, 1653, 1653, 1653,
     1653, 1509, 2500, 1552, 1652, 1653, 1653, 1653, 1653, 1509,
     1649, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1693,
     1693, 1693, 1693, 1609, 1665, 1611, 1694, 3915, 3915, 3915,

     3915, 1609, 2499, 1611, 3915, 1650, 1698, 1698, 1698, 1698,
     1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1699, 1643,
     1680, 1700, 1699, 2498, 2497, 1700, 1699, 1643, 1680, 1700,
     2134, 2134, 2134, 2134, 1649, 2135, 2135, 2135, 2135, 1696,
     1698, 1698, 1698, 1698, 1682, 2496, 1517, 3915, 2136, 2136,
     2136, 2136, 1699, 1517, 1684, 1700, 1704, 1704, 1704, 1704,
     1682, 1517, 1684, 1705, 3915, 3915, 3915, 3915, 1682, 2495,
     2494, 3915, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708,
     2493, 2490, 2489, 1709, 2488, 2485, 2484, 1709, 1708, 1708,
     1708, 1708, 1716, 1716, 1716, 1716, 1823, 1545, 1551, 1709,

     1718, 1718, 1718, 1718, 1545, 1551, 1686, 1719, 3915, 3915,
     3915, 3915, 1545, 1551, 1686, 3915, 1717, 1718, 1718, 1718,
     1718, 2481, 2480, 2479, 1719, 1716, 1716, 1716, 1716, 2142,
     2142, 2142, 2142, 1721, 2478, 1688, 1722, 1716, 1716, 1716,
     1716, 1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774, 1717,
     2477, 1688, 1690, 1717, 1773, 1778, 1778, 1778, 1778, 1688,
     1690, 1717, 1778, 1778, 1778, 1778, 1905, 1905, 1905, 1905,
     1152, 1553, 1222, 1151, 2474, 1188, 2181, 1152, 1553, 2465,
     1154, 1155, 2167, 2167, 2167, 2167, 1553, 1154, 1155, 1783,
     1783, 1783, 1783, 1151, 2464, 2461, 1784, 1152, 1781, 1781,

     1781, 1781, 1781, 1781, 1781, 1781, 1136, 1154, 1155, 1697,
     1721, 3915, 3915, 3915, 3915, 1135, 2460, 1697, 3915, 1135,
     1786, 1786, 1786, 1786, 1142, 1906, 1610, 1143, 1778, 1778,
     1778, 1778, 1707, 1610, 1788, 1788, 1788, 1788, 2459, 1151,
     1707, 1610, 1780, 1152, 1136, 1179, 1788, 1788, 1788, 1788,
     1780, 2458, 2457, 1154, 1155, 2456, 2455, 1179, 1178, 1178,
     1178, 1178, 2451, 1796, 1796, 1796, 1796, 1170, 1790, 1179,
     1171, 2448, 1178, 1178, 1178, 1178, 1790, 1271, 1178, 1178,
     1178, 1178, 1162, 1179, 2447, 1271, 2446, 1162, 2445, 1179,
     2183, 2183, 2183, 2183, 2184, 1187, 1162, 2185, 2444, 2139,

     2443, 1142, 1162, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1187, 2130, 1805, 2186, 1810, 1810, 1810, 1810, 1187,
     1222, 1646, 1811, 1683, 1222, 2128, 2441, 1224, 1646, 1805,
     1683, 1224, 3915, 3915, 3915, 3915, 1646, 1805, 1683, 3915,
     2440, 2439, 2438, 2177, 1170, 2176, 1221, 1221, 1221, 1221,
     2191, 2191, 2191, 2191, 2198, 2437, 2436, 1811, 2203, 2203,
     2203, 2203, 2435, 2199, 2199, 2199, 2199, 2434, 2433, 2432,
     1224, 2184, 1863, 1863, 1863, 1863, 2188, 2202, 2203, 2203,
     2202, 1814, 1242, 1241, 1887, 1887, 1887, 1887, 1269, 1612,
     1612, 1270, 1863, 1863, 1863, 1863, 1612, 1814, 1298, 2113,

     2113, 1242, 2428, 2243, 1612, 1814, 2243, 1243, 1242, 2250,
     2250, 2250, 2250, 1685, 2427, 2105, 2251, 2105, 1298, 2101,
     1685, 1244, 1865, 1865, 1865, 1865, 1865, 1245, 1685, 2101,
     1689, 1246, 1247, 1278, 1248, 1249, 1250, 1689, 2097, 2097,
     1251, 1252, 1253, 1254, 1255, 1689, 1256, 1227, 1257, 1258,
     1259, 1260, 1261, 1869, 1869, 1869, 1869, 1970, 1970, 1970,
     1970, 2093, 1277, 1227, 1870, 1269, 1277, 2246, 2246, 2246,
     2246, 1227, 2093, 2413, 2247, 2411, 1277, 2084, 2084, 1577,
     1277, 1872, 1872, 1872, 1872, 2253, 2253, 2253, 2253, 2072,
     2272, 2248, 2266, 1873, 1874, 1284, 2254, 2255, 2255, 2255,

     2255, 2062, 2062, 1284, 2256, 1876, 1277, 2399, 2398, 2257,
     1872, 1872, 1872, 1872, 1887, 1887, 1887, 1887, 1269, 2397,
     1277, 1270, 1873, 1874, 1890, 1890, 1890, 1890, 1890, 1890,
     1890, 1890, 1290, 2396, 1876, 1891, 1877, 2395, 1242, 1891,
     1290, 1890, 1890, 1890, 1890, 1892, 1890, 1890, 1890, 1890,
     1540, 2053, 1891, 1890, 1890, 1890, 1890, 1891, 1892, 2344,
     2344, 2344, 2344, 1892, 1891, 1890, 1890, 1890, 1890, 2392,
     1892, 2391, 1890, 1890, 1890, 1890, 1891, 1890, 1890, 1890,
     1890, 2390, 1892, 1891, 1296, 1296, 1296, 1296, 1891, 1892,
     1890, 1890, 1890, 1890, 1892, 1269, 2277, 1296, 1296, 1296,

     1296, 1891, 2389, 1296, 1296, 1296, 1296, 1892, 1242, 2388,
     1298, 1949, 1949, 1949, 1949, 2278, 2285, 2355, 2355, 2355,
     2355, 1242, 1345, 1298, 1691, 2387, 2279, 1242, 1415, 1298,
     1345, 1691, 2386, 2283, 2385, 2281, 1415, 1349, 2280, 1691,
     2282, 2287, 2286, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 1296, 1296, 2384, 1296, 1296, 1296, 1296,
     2284, 1296, 1296, 1296, 1296, 2166, 1589, 1242, 1682, 1298,
     1688, 1242, 2331, 1298, 1589, 1242, 1682, 1298, 1688, 2166,
     1242, 2382, 1298, 2381, 2379, 1242, 2376, 1298, 1296, 1296,
     1296, 1296, 1296, 1296, 1296, 1296, 2375, 2374, 1296, 1296,

     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     2373, 1714, 1242, 2372, 1298, 2371, 1242, 2288, 1298, 1714,
     2289, 2291, 1242, 2290, 1298, 2014, 1242, 2370, 1298, 2010,
     1242, 2004, 1298, 2292, 1296, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 2004, 1296, 1296, 1296, 1296, 2349, 2349, 2349,
     2349, 2293, 1296, 1296, 1296, 1296, 2361, 1723, 1242, 2360,
     1298, 2294, 1242, 1987, 1298, 1723, 2295, 1242, 2296, 1298,
     1987, 2350, 2353, 2297, 2351, 2348, 1242, 2347, 1298, 2346,
     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 2345, 2298, 1296, 1296, 1296, 1296, 1990, 1991,

     1992, 1990, 2300, 2299, 1242, 1187, 1298, 1805, 1242, 1814,
     1298, 2301, 1242, 1187, 1298, 1805, 2343, 1814, 1242, 2342,
     1298, 1296, 1296, 1296, 1296, 2270, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 2022, 2302,
     1296, 1296, 1296, 1296, 1186, 1242, 2022, 1298, 1196, 2303,
     1242, 1186, 1298, 2341, 1242, 1196, 1298, 2305, 1242, 1186,
     1298, 2304, 2267, 1196, 1242, 2267, 1298, 1296, 1296, 1296,
     1296, 1296, 1296, 1296, 1296, 1203, 1296, 1296, 1296, 1296,
     2306, 2151, 1203, 2307, 1296, 1296, 1296, 1296, 2166, 2151,
     1203, 1242, 1885, 1298, 2340, 1242, 2309, 1298, 2339, 2276,

     1242, 2308, 1298, 1296, 1296, 1296, 1296, 2276, 1242, 2338,
     1298, 1538, 1611, 1885, 2310, 1296, 1296, 1296, 2317, 1538,
     1611, 1205, 2311, 1296, 1296, 1296, 1296, 1242, 1205, 1298,
     2312, 2337, 1296, 1296, 1296, 1296, 1205, 2336, 2335, 1242,
     2187, 1298, 3499, 1296, 1296, 1296, 1296, 1242, 2187, 1298,
     3499, 2313, 2334, 2314, 2333, 2330, 1242, 2315, 1298, 1296,
     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1242, 2316, 1298,
     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 2329, 1242, 1843, 1298, 2275, 1242, 1886, 1298,
     1992, 1991, 1992, 1992, 1242, 1886, 1298, 2318, 1242, 2319,

     1298, 2274, 1242, 1886, 1298, 1949, 1949, 1949, 1949, 2273,
     1296, 1296, 1296, 1296, 2261, 2259, 2320, 1296, 1296, 1296,
     1296, 2245, 1296, 1296, 1296, 1296, 2244, 2242, 2358, 2323,
     2241, 1349, 2322, 2321, 1242, 2240, 1298, 2359, 2359, 2359,
     2359, 1242, 2324, 1298, 2269, 2325, 1242, 2269, 1298, 1951,
     1951, 1951, 1951, 1343, 2239, 2238, 1344, 2270, 2235, 2022,
     1980, 1980, 1980, 1980, 2151, 2234, 2354, 2355, 2355, 2354,
     2332, 1981, 1391, 1339, 2271, 2022, 2233, 2328, 2356, 2230,
     2151, 2356, 2229, 2022, 2326, 2228, 1982, 2227, 2151, 2226,
     2327, 2362, 2362, 2362, 2362, 2271, 2225, 1985, 1985, 1985,

     1985, 1985, 1997, 1997, 1997, 1997, 2218, 2217, 1404, 1998,
     3915, 3915, 3915, 3915, 2216, 1406, 2213, 3915, 1403, 1403,
     1403, 1403, 2002, 2002, 2002, 2002, 1413, 2366, 2212, 1414,
     1343, 2380, 2380, 2380, 2380, 1404, 2367, 2367, 2367, 2367,
     2211, 2210, 1406, 2209, 1816, 2206, 1409, 2023, 2023, 2023,
     2023, 1816, 1823, 1816, 2024, 3915, 3915, 3915, 3915, 1816,
     2025, 1823, 3915, 1485, 1485, 1485, 1485, 2196, 3915, 2028,
     2028, 2028, 2028, 2195, 2194, 2065, 2029, 2364, 2065, 2193,
     1486, 3915, 3915, 3915, 3915, 2192, 1225, 1222, 3915, 2036,
     2036, 2036, 2036, 2383, 2383, 2383, 2383, 2401, 2276, 2068,

     1538, 2166, 2068, 1413, 2037, 2067, 2402, 2402, 2402, 2402,
     2074, 2074, 2074, 2074, 2276, 2181, 1538, 2075, 2404, 2404,
     2404, 2404, 2276, 2076, 1538, 2166, 2067, 2178, 2175, 2070,
     3915, 3915, 3915, 3915, 2174, 2166, 2164, 3915, 2403, 2403,
     2403, 2403, 2406, 3915, 2160, 2080, 2080, 2080, 2080, 1587,
     2070, 2076, 1588, 2081, 2081, 2081, 2081, 2134, 2134, 2134,
     2134, 2408, 1760, 2159, 2082, 2415, 2158, 2157, 2156, 1583,
     2409, 2409, 2409, 2409, 2416, 2416, 2416, 2416, 2418, 2155,
     2426, 2153, 2421, 2426, 2152, 2150, 2424, 2419, 2419, 2419,
     2419, 2422, 2422, 2422, 2422, 2425, 2425, 2425, 2425, 2108,

     2108, 2108, 2108, 2108, 2430, 1698, 1698, 1698, 1698, 2135,
     2135, 2135, 2135, 2431, 2431, 2431, 2431, 1699, 2149, 1749,
     1700, 2136, 2136, 2136, 2136, 1736, 1587, 2136, 2136, 2136,
     2136, 2142, 2142, 2142, 2142, 1721, 1736, 2147, 1722, 2167,
     2167, 2167, 2167, 1611, 1736, 2167, 2167, 2167, 2167, 2146,
     1178, 1178, 1178, 1178, 1152, 1717, 1151, 2145, 2144, 1611,
     1152, 1179, 1734, 1136, 1154, 1155, 1356, 1611, 1732, 1136,
     1154, 1155, 1724, 1356, 1162, 2469, 2469, 2469, 2469, 3214,
     3219, 1356, 2470, 2472, 2472, 2472, 2472, 1221, 1221, 1221,
     1221, 2191, 2191, 2191, 2191, 3214, 3219, 2140, 1811, 2250,

     2250, 2250, 2250, 3214, 3219, 2139, 2251, 2186, 1703, 1703,
     2132, 1224, 1721, 2452, 2452, 2452, 2452, 2452, 2452, 2452,
     2452, 2452, 2452, 2452, 2452, 2452, 2452, 2452, 2452, 2452,
     2452, 2452, 2452, 2453, 2453, 2453, 2453, 2453, 2452, 2452,
     2452, 2452, 2452, 2452, 2452, 2453, 2453, 2453, 2453, 2453,
     2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453,
     2453, 2453, 2453, 2453, 2452, 2452, 2452, 2452, 2453, 2453,
     2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453,
     2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453,
     2453, 2453, 2453, 2452, 2452, 2452, 2454, 1178, 1178, 1178,

     1178, 1178, 1178, 1178, 1178, 2130, 2128, 2126, 1179, 2125,
     2124, 2123, 1179, 2183, 2183, 2183, 2183, 2184, 2122, 2121,
     2185, 1162, 2119, 2118, 2117, 1162, 2472, 2472, 2472, 2472,
     2184, 2116, 2113, 2473, 1823, 2111, 2105, 2186, 1221, 1221,
     1221, 1221, 2101, 2483, 2483, 2483, 2483, 2097, 2093, 2091,
     2186, 2487, 2487, 2487, 2487, 1222, 2253, 2253, 2253, 2253,
     2467, 1613, 1224, 2246, 2246, 2246, 2246, 2254, 2466, 1613,
     2247, 2084, 1277, 1599, 1375, 1242, 1277, 3915, 3915, 3915,
     3915, 1375, 1590, 2078, 3915, 2001, 3915, 2248, 2073, 1375,
     3915, 2072, 2001, 2062, 2184, 2533, 2533, 2533, 2533, 2060,

     2001, 3915, 2059, 2476, 2056, 1467, 2053, 2184, 2486, 2487,
     2487, 2486, 1467, 2051, 1241, 2050, 1277, 2047, 2046, 2535,
     1467, 2536, 3915, 3915, 3915, 3915, 2045, 2044, 2043, 3915,
     3915, 1502, 1242, 2537, 2537, 2537, 2537, 2035, 1243, 2255,
     2255, 2255, 2255, 2034, 2033, 1873, 2256, 2344, 2344, 2344,
     2344, 2257, 1244, 1890, 1890, 1890, 1890, 1876, 1245, 1877,
     2032, 1495, 1246, 1247, 1891, 1248, 1249, 1250, 1495, 2031,
     1892, 1251, 1252, 1253, 1254, 1255, 1495, 1256, 2030, 1257,
     1258, 1259, 1260, 1261, 3915, 3915, 3915, 3915, 2256, 2021,
     2020, 3915, 2019, 2257, 2018, 2017, 3915, 1472, 2016, 2015,

     2540, 2540, 2540, 2540, 2540, 2246, 2246, 2246, 2246, 1450,
     2014, 3058, 2251, 1442, 1277, 1442, 2010, 3058, 1277, 2537,
     2537, 2537, 2537, 1890, 1890, 1890, 1890, 2007, 2004, 2248,
     1416, 1873, 1509, 3058, 1891, 1890, 1890, 1890, 1890, 1509,
     1892, 3058, 1404, 1876, 1996, 1994, 1891, 1509, 1890, 1890,
     1890, 1890, 1892, 1890, 1890, 1890, 1890, 1987, 1277, 1891,
     1890, 1890, 1890, 1890, 1891, 1892, 2344, 2344, 2344, 2344,
     1892, 1891, 1890, 1890, 1890, 1890, 1979, 1892, 1978, 1890,
     1890, 1890, 1890, 1891, 1977, 1296, 1296, 1296, 1296, 1892,
     1891, 1890, 1890, 1890, 1890, 2548, 1892, 1976, 1975, 1974,

     2549, 1973, 1891, 1296, 1296, 1296, 1296, 2550, 1892, 1242,
     1972, 1298, 1296, 1296, 1296, 1296, 2551, 1296, 1296, 1296,
     1296, 1971, 1964, 1961, 2556, 1960, 1959, 1242, 1958, 1298,
     1957, 1296, 1296, 1296, 1296, 2552, 1242, 1956, 1298, 1346,
     2558, 1242, 1948, 1298, 2554, 2553, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 1296, 2557, 1242, 1517, 1298, 1296, 1296,
     1296, 1296, 1947, 1517, 1301, 2555, 1296, 1296, 1296, 1296,
     1242, 1517, 1298, 2559, 1242, 1901, 1298, 1296, 1296, 1296,
     1296, 1889, 1242, 1888, 1298, 2571, 2571, 2571, 2571, 1871,
     1242, 1867, 1298, 1296, 1296, 1296, 1296, 1296, 1296, 1296,

     1296, 1242, 2560, 1298, 1866, 2562, 1859, 1858, 1855, 1242,
     1852, 1298, 1296, 1296, 1296, 1296, 1848, 1242, 2561, 1298,
     1847, 1242, 1545, 1298, 2349, 2349, 2349, 2349, 1846, 1545,
     1842, 2563, 1839, 2564, 1838, 1301, 1242, 1545, 1298, 1837,
     2565, 2566, 2567, 2567, 2567, 2567, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 1832, 2574, 1823, 2572, 2580, 2568, 1821, 2569, 2566,
     2566, 2566, 2566, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 1296, 1296, 2573, 1296, 1296, 1296, 1296,
     1820, 1551, 2566, 2566, 2566, 2566, 1817, 1242, 1551, 1298,

     1225, 1242, 3915, 1298, 1226, 1242, 1551, 1298, 1815, 1813,
     1242, 1807, 1298, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1296, 2566, 2566, 2566, 2570, 1296, 1296, 1296, 1296, 1194,
     1296, 1296, 1296, 1296, 1804, 1553, 2575, 1242, 1803, 1298,
     1802, 1242, 1553, 1298, 1296, 1296, 1296, 1296, 2576, 1242,
     1553, 1298, 2578, 2577, 1242, 1797, 1298, 1296, 1296, 1296,
     1296, 1176, 1296, 1296, 1296, 1296, 1176, 1149, 1242, 1131,
     1298, 1296, 1296, 1296, 1296, 1769, 1296, 1296, 1296, 1296,
     1766, 1242, 1736, 1298, 2581, 1736, 1242, 2579, 1298, 1296,
     1296, 1296, 1296, 1736, 1736, 1242, 2582, 1298, 2583, 2584,

     1242, 1734, 1298, 1733, 1296, 1296, 1296, 1296, 1732, 1296,
     1296, 1296, 1296, 1242, 1724, 1298, 1296, 1296, 1296, 1296,
     1715, 1296, 1296, 1296, 1296, 2585, 1703, 2586, 1242, 1692,
     1298, 1687, 2587, 1242, 1681, 1298, 1296, 1296, 1296, 1296,
     1242, 1660, 1298, 2588, 2589, 1242, 1645, 1298, 1296, 1296,
     1296, 1296, 2349, 2349, 2349, 2349, 1296, 1296, 1296, 1296,
     1242, 1642, 1298, 2590, 1296, 1296, 1296, 1296, 2591, 1641,
     1640, 1635, 1242, 1632, 1298, 1629, 2350, 1624, 2593, 2592,
     1242, 1618, 1298, 1296, 1296, 1296, 1296, 1614, 1242, 1613,
     1298, 2079, 1608, 2594, 1296, 1296, 1296, 1296, 2079, 2595,

     1603, 1599, 1590, 2596, 1578, 1562, 2079, 1242, 1561, 1298,
     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1242, 2597,
     1298, 2598, 1560, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1296, 1559, 1556, 1555, 1242, 1549, 1298, 1548, 1242, 1610,
     1298, 1296, 1296, 1296, 1296, 1547, 1610, 1242, 2599, 1298,
     1546, 1242, 2600, 1298, 1610, 2623, 2623, 2623, 2623, 1536,
     1535, 2601, 1534, 1533, 1532, 1242, 2624, 1298, 2625, 2626,
     2626, 2625, 1531, 1511, 1391, 2603, 1987, 2602, 2626, 2626,
     2626, 2626, 2604, 1502, 1500, 2629, 2629, 2629, 2629, 2362,
     2362, 2362, 2362, 2362, 2362, 2362, 2362, 2380, 2380, 2380,

     2380, 2605, 1403, 1403, 1403, 1403, 1404, 1497, 1496, 1646,
     1404, 2004, 1475, 1406, 2606, 1472, 1646, 1406, 1469, 1404,
     2634, 2634, 2634, 2634, 1646, 1468, 1406, 1485, 1485, 1485,
     1485, 2383, 2383, 2383, 2383, 1450, 2062, 2403, 2403, 2403,
     2403, 1442, 1437, 3566, 1486, 2660, 2660, 2660, 2660, 3566,
     2076, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2084,
     2469, 2469, 2469, 2469, 1426, 3566, 1425, 2470, 2663, 2663,
     2663, 2663, 2093, 3566, 2632, 2406, 2097, 1422, 1416, 2406,
     2101, 2666, 2666, 2666, 2666, 2668, 2668, 2668, 2668, 2670,
     2670, 2670, 2670, 2105, 1399, 1398, 1395, 2113, 2844, 2844,

     2844, 2844, 2672, 2672, 2672, 2672, 2676, 2676, 2676, 2676,
     2685, 2686, 1387, 1384, 1381, 2687, 1380, 1379, 2688, 2689,
     3915, 3915, 3915, 3915, 1378, 1377, 1376, 3915, 2690, 1346,
     2691, 2452, 2452, 2452, 2452, 2452, 2452, 2452, 2452, 2452,
     2452, 2452, 2452, 2452, 2452, 2452, 2452, 2452, 2452, 2452,
     2452, 2453, 2453, 2453, 2453, 2453, 2452, 2452, 2452, 2452,
     2452, 2452, 2452, 2453, 2453, 2453, 2453, 2453, 2453, 2453,
     2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453,
     2453, 2453, 2452, 2452, 2452, 2452, 2453, 2453, 2453, 2453,
     2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453,

     2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453,
     2453, 2452, 2452, 2452, 2454, 2708, 2709, 1301, 1288, 1285,
     2710, 1283, 1234, 2711, 2712, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 2713, 1232, 2714, 1179, 1229, 1226, 1218,
     1179, 2472, 2472, 2472, 2472, 2472, 2472, 2472, 2472, 1162,
     1197, 1194, 1683, 1162, 2718, 2718, 2718, 2718, 2184, 1683,
     1177, 2473, 1176, 2129, 1149, 2186, 3915, 1683, 3915, 2186,
     2129, 1221, 1221, 1221, 1221, 3915, 3915, 2129, 2186, 1685,
     2715, 2726, 2726, 2726, 2726, 2129, 1685, 2716, 1222, 2741,
     2741, 2741, 2741, 3915, 1685, 1224, 2770, 2770, 2770, 2770,

     3915, 3915, 3915, 2247, 3915, 1242, 3915, 2533, 2533, 2533,
     2533, 2853, 2853, 2853, 2853, 3915, 2537, 2537, 2537, 2537,
     2248, 2533, 2533, 2533, 2533, 3915, 3915, 3915, 1873, 3915,
     2719, 2535, 3915, 3915, 3915, 2184, 2725, 2726, 2726, 2725,
     1876, 2256, 1241, 3915, 3915, 2535, 2257, 2536, 3915, 2537,
     2537, 2537, 2537, 2540, 2540, 2540, 2540, 2540, 3915, 3915,
     1242, 1873, 2856, 2856, 2856, 2856, 1243, 3915, 2572, 2256,
     3915, 3915, 3915, 1876, 2257, 1877, 2848, 2848, 2848, 2848,
     1244, 2540, 2540, 2540, 2540, 2540, 1245, 2849, 3915, 1689,
     1246, 1247, 3915, 1248, 1249, 1250, 1689, 3915, 3915, 1251,

     1252, 1253, 1254, 1255, 1689, 1256, 3915, 1257, 1258, 1259,
     1260, 1261, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890,
     3568, 3915, 3915, 1891, 3915, 3915, 3568, 1891, 3915, 1892,
     3915, 3915, 3915, 1892, 1890, 1890, 1890, 1890, 1890, 1890,
     1890, 1890, 3568, 3915, 3915, 1891, 3915, 3915, 2850, 1891,
     3568, 1892, 3915, 3915, 3915, 1892, 1890, 1890, 1890, 1890,
     1890, 1890, 1890, 1890, 3915, 3915, 3915, 1891, 1612, 1612,
     3915, 1891, 3915, 1892, 3915, 1612, 3915, 1892, 1890, 1890,
     1890, 1890, 3915, 1612, 1296, 1296, 1296, 1296, 2776, 1891,
     3915, 3915, 3915, 2777, 3915, 1892, 1890, 1890, 1890, 1890,

     1890, 1890, 1890, 1890, 3915, 3915, 3915, 1891, 1242, 2778,
     1298, 1891, 3915, 1892, 3915, 2780, 3915, 1892, 3915, 2785,
     2918, 2918, 2918, 2918, 2779, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 2623, 2623, 2623, 2623, 2781, 1296, 1296,
     1296, 1296, 3915, 2131, 2624, 1691, 2782, 3915, 3915, 1242,
     2131, 1298, 1691, 1242, 2141, 1298, 3915, 2131, 3915, 2783,
     1691, 2141, 1242, 2784, 1298, 2131, 3915, 3915, 2786, 2141,
     2787, 1296, 1296, 1296, 1296, 2790, 2790, 2790, 2790, 3915,
     1296, 1296, 1296, 1296, 2793, 2793, 2793, 2793, 1296, 1296,
     1296, 1296, 3915, 3915, 3915, 1242, 3915, 1298, 2169, 1242,

     3915, 1298, 3915, 2788, 1242, 2169, 1298, 3915, 1242, 3915,
     1298, 3915, 1242, 2169, 1298, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 3915, 3915, 3915, 2789, 1296, 1296, 1296,
     1296, 2571, 2571, 2571, 2571, 2798, 2798, 2798, 2798, 1242,
     3915, 1298, 3915, 1242, 3915, 1298, 3915, 2794, 3915, 3915,
     3915, 1242, 2792, 1298, 2791, 1242, 3915, 1298, 3915, 1242,
     3915, 1298, 3915, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 3915,
     3915, 3915, 2795, 1296, 1296, 1296, 1296, 1242, 2796, 1298,
     3915, 1242, 3915, 1298, 3915, 1242, 3915, 1298, 3915, 1242,

     3915, 1298, 3915, 2797, 3915, 3915, 3915, 1242, 3915, 1298,
     3915, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 3915, 2800, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 2802, 3915, 1242, 2799, 1298, 2801, 1242,
     3915, 1298, 3915, 1242, 3915, 1298, 2803, 3915, 3915, 1242,
     3915, 1298, 3915, 1242, 3915, 1298, 3915, 1296, 1296, 1296,
     1296, 3915, 1296, 1296, 1296, 1296, 3915, 3915, 3915, 2804,
     1296, 1296, 1296, 1296, 2852, 2853, 2853, 2852, 2806, 3915,
     1391, 1242, 2805, 1298, 3915, 2807, 1242, 3915, 1298, 3915,
     2138, 2138, 2808, 3915, 1242, 3915, 1298, 2138, 2809, 1296,

     1296, 1296, 1296, 3915, 3915, 2138, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 3915, 3915,
     2811, 3915, 2190, 1242, 2190, 1298, 3915, 3915, 2810, 2812,
     1242, 2190, 1298, 3915, 1242, 3915, 1298, 3915, 1242, 2190,
     1298, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 3915,
     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 3915, 3915, 2813, 1242, 1886, 1298, 3915, 1242,
     3915, 1298, 3915, 1886, 1242, 2814, 1298, 3915, 1242, 3915,
     1298, 1886, 1242, 2815, 1298, 2816, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 2817, 3915,

     3915, 3915, 2818, 1296, 1296, 1296, 1296, 3915, 3915, 3915,
     1242, 3915, 1298, 3915, 1242, 2823, 1298, 3915, 1242, 2822,
     1298, 2821, 2828, 2828, 2828, 2828, 3915, 1242, 3915, 1298,
     2830, 2830, 2830, 2830, 3915, 3915, 1296, 1296, 1296, 2831,
     1296, 1296, 1296, 1296, 3915, 2825, 1242, 3915, 1298, 1296,
     1296, 1296, 1296, 2826, 1242, 3915, 1298, 3915, 2827, 2824,
     1242, 3915, 1298, 3915, 1242, 3915, 1298, 1403, 1403, 1403,
     1403, 3915, 3915, 1242, 3915, 1298, 3915, 3915, 3915, 3915,
     2074, 2074, 2074, 2074, 1404, 2180, 3915, 2075, 3915, 3915,
     2180, 1406, 2180, 2076, 3915, 2833, 1178, 1178, 1178, 1178,

     2180, 2829, 2911, 2911, 2911, 2911, 3915, 1179, 3915, 2832,
     3915, 3915, 2834, 1179, 2718, 2718, 2718, 2718, 2184, 3915,
     1162, 2473, 2921, 2921, 2921, 2921, 2912, 1221, 1221, 1221,
     1221, 2933, 2933, 2933, 2933, 3915, 2855, 3915, 2186, 2857,
     2935, 2935, 2935, 2935, 1222, 3915, 1242, 2741, 2741, 2741,
     2741, 1224, 3915, 2910, 2937, 2937, 2937, 2937, 2960, 2960,
     2960, 2960, 2770, 2770, 2770, 2770, 3915, 1816, 3915, 2247,
     2246, 2246, 2246, 2246, 1816, 3915, 1816, 2247, 3915, 1277,
     3915, 2913, 1816, 1277, 2533, 2533, 2533, 2533, 3915, 1890,
     1890, 1890, 1890, 2914, 2248, 2184, 2920, 2921, 2921, 2920,

     1891, 3915, 1241, 3915, 2796, 3915, 1892, 3915, 2535, 3915,
     2791, 1890, 1890, 1890, 1890, 2844, 2844, 2844, 2844, 2797,
     1242, 3915, 1891, 1277, 3915, 3915, 1243, 3915, 1892, 3915,
     1890, 1890, 1890, 1890, 3915, 3915, 3915, 2829, 3915, 3915,
     1244, 1891, 2844, 2844, 2844, 2844, 1245, 1892, 3915, 1375,
     1246, 1247, 3915, 1248, 1249, 1250, 1375, 3915, 3915, 1251,
     1252, 1253, 1254, 1255, 1375, 1256, 3915, 1257, 1258, 1259,
     1260, 1261, 1890, 1890, 1890, 1890, 3915, 2967, 3039, 3039,
     3039, 3039, 3915, 1891, 1890, 1890, 1890, 1890, 3915, 1892,
     2968, 1890, 1890, 1890, 1890, 1891, 1890, 1890, 1890, 1890,

     3915, 1892, 1891, 1890, 1890, 1890, 1890, 1891, 1892, 1296,
     1296, 1296, 1296, 1892, 1891, 1890, 1890, 1890, 1890, 3915,
     1892, 1296, 1296, 1296, 1296, 3915, 1891, 3915, 1296, 1296,
     1296, 1296, 1892, 1242, 2001, 1298, 1467, 3915, 3915, 2969,
     3915, 2001, 2975, 1467, 3915, 1242, 3915, 1298, 2971, 2001,
     3915, 1467, 1242, 2972, 1298, 3915, 2976, 2970, 3915, 2977,
     2973, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 2790,
     2790, 2790, 2790, 1296, 1296, 1296, 1296, 2793, 2793, 2793,
     2793, 2983, 2983, 2983, 2983, 1242, 2974, 1298, 3915, 1242,
     3915, 1298, 2984, 1242, 3915, 1298, 3915, 1242, 3915, 1298,

     3915, 1242, 3915, 1298, 3915, 1242, 3915, 1298, 3915, 1296,
     1296, 1296, 1296, 2798, 2798, 2798, 2798, 1296, 1296, 1296,
     1296, 3915, 2979, 3915, 2978, 2079, 3915, 1245, 1296, 1296,
     1296, 1296, 2079, 1242, 2981, 1298, 1906, 1242, 3915, 1298,
     2079, 1242, 3915, 1298, 3915, 2980, 3915, 3915, 3915, 2982,
     3915, 1260, 1242, 3915, 1298, 2990, 2990, 2990, 2990, 3915,
     2991, 2992, 2992, 2992, 2992, 3915, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 3915, 1242,
     2988, 1298, 2985, 3915, 3915, 1242, 3915, 1298, 3915, 3915,
     1242, 2989, 1298, 3915, 1242, 3915, 1298, 3915, 1242, 3915,

     1298, 2996, 2996, 2996, 2996, 3915, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 1296, 2999, 2999, 2999, 2999, 1296, 1296,
     1296, 1296, 3915, 2993, 3915, 1242, 2141, 1298, 2169, 2994,
     1242, 3915, 1298, 2141, 1242, 2169, 1298, 3915, 3000, 2995,
     1298, 2141, 1242, 2169, 1298, 1296, 1296, 1296, 1296, 3003,
     3003, 3003, 3003, 1296, 1296, 1296, 1296, 3037, 3037, 3037,
     3037, 2997, 3915, 2138, 2138, 2998, 3915, 3915, 3038, 1242,
     2138, 1298, 3915, 1242, 3915, 1298, 3915, 1242, 2138, 1298,
     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 2180, 1296,
     1296, 1296, 1296, 2180, 1375, 2180, 3001, 1296, 1296, 1296,

     1296, 1375, 3915, 2180, 1242, 2190, 1298, 2190, 1242, 1375,
     1298, 3915, 3004, 1242, 2190, 1298, 3915, 3002, 3915, 3915,
     3915, 1242, 2190, 1298, 3009, 3009, 3009, 3009, 1296, 1296,
     1296, 1296, 3915, 3915, 1467, 3005, 3915, 1296, 1296, 1296,
     1296, 1467, 3915, 3006, 3040, 3040, 3040, 3040, 3010, 1467,
     1298, 3915, 1242, 3915, 1298, 3017, 3017, 3017, 3017, 3915,
     3915, 1242, 3007, 1298, 3018, 3018, 3018, 3018, 3011, 3915,
     3008, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1242,
     3915, 1298, 1296, 1296, 1296, 1296, 3915, 3015, 1242, 3915,
     1298, 2828, 2828, 2828, 2828, 1242, 3012, 1298, 3915, 1242,

     3915, 1298, 2830, 2830, 2830, 2830, 1242, 3915, 1298, 3016,
     1296, 1296, 1296, 1296, 3915, 1242, 3915, 1298, 2717, 3915,
     3915, 1296, 1296, 1296, 1296, 2717, 1242, 3915, 1298, 1296,
     1296, 1296, 1296, 2717, 1242, 3021, 1298, 1296, 1296, 1296,
     1296, 3915, 3915, 3019, 3020, 1242, 3915, 1298, 3022, 2848,
     2848, 2848, 2848, 1242, 3915, 1298, 3042, 3043, 3043, 3042,
     2849, 1242, 1391, 1298, 3915, 3915, 3915, 3023, 2848, 2848,
     2848, 2848, 3043, 3043, 3043, 3043, 3915, 3915, 3915, 2849,
     3915, 3915, 3024, 1403, 1403, 1403, 1403, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3026, 1178, 1178, 1178, 1178, 3025,

     1404, 3915, 3027, 3915, 3915, 3915, 1179, 1406, 3915, 2911,
     2911, 2911, 2911, 1221, 1221, 1221, 1221, 3915, 3915, 1162,
     1179, 3033, 3093, 3093, 3093, 3093, 2918, 2918, 2918, 2918,
     1222, 3915, 3915, 2912, 3915, 3915, 3915, 1224, 3045, 3095,
     3095, 3095, 3095, 3096, 3097, 3097, 3096, 3097, 3097, 3097,
     3097, 3915, 3046, 2933, 2933, 2933, 2933, 2935, 2935, 2935,
     2935, 2937, 2937, 2937, 2937, 3915, 3915, 3915, 2716, 3915,
     3915, 1242, 3091, 3113, 3113, 3113, 3113, 3115, 3115, 3115,
     3115, 3118, 3118, 3118, 3118, 3915, 3915, 3915, 2913, 3122,
     3122, 3122, 3122, 3128, 3128, 3128, 3128, 3133, 3133, 3133,

     3133, 3134, 3134, 3134, 3134, 3119, 3915, 1245, 2960, 2960,
     2960, 2960, 3915, 3915, 2981, 3915, 1906, 3129, 3915, 1890,
     1890, 1890, 1890, 3915, 1890, 1890, 1890, 1890, 3915, 2982,
     1891, 1260, 3915, 3915, 3915, 1891, 1892, 3130, 3915, 3915,
     3915, 1892, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890,
     3915, 3915, 3915, 1891, 3915, 3915, 3915, 1891, 3915, 1892,
     3915, 3915, 3915, 1892, 3915, 3131, 1890, 1890, 1890, 1890,
     1890, 1890, 1890, 1890, 3915, 3915, 3915, 1891, 3141, 3142,
     3019, 1891, 3915, 1892, 3915, 3915, 3915, 1892, 3915, 3147,
     3147, 3147, 3147, 1890, 1890, 1890, 1890, 3143, 3915, 3915,

     1891, 3915, 3915, 3915, 1891, 3144, 1892, 3915, 3915, 3915,
     1892, 1296, 1296, 1296, 1296, 3915, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 3915, 1296,
     1296, 1296, 1296, 3915, 1375, 1242, 2717, 1298, 3146, 3145,
     1242, 1375, 1298, 2717, 1242, 3915, 1298, 3915, 1242, 1375,
     1298, 2717, 3148, 1242, 3915, 1298, 3915, 3915, 3149, 3915,
     3151, 3150, 3154, 3154, 3154, 3154, 2983, 2983, 2983, 2983,
     3156, 3156, 3156, 3156, 3915, 3157, 3915, 2984, 3221, 3915,
     3157, 1296, 1296, 1296, 1296, 3221, 1242, 3915, 1298, 3915,
     1242, 3915, 1298, 3221, 3915, 3915, 3152, 1296, 1296, 1296,

     1296, 3915, 3153, 3915, 3915, 1242, 3915, 1298, 1296, 1296,
     1296, 1296, 2990, 2990, 2990, 2990, 3915, 2991, 3915, 3915,
     3915, 1242, 3343, 1298, 3345, 2992, 2992, 2992, 2992, 3343,
     3915, 3345, 1242, 3915, 1298, 3915, 1242, 3343, 1298, 3345,
     3158, 3915, 3167, 3167, 3167, 3167, 3915, 3915, 3915, 1242,
     3915, 1298, 3915, 3915, 1296, 1296, 1296, 1296, 3915, 2996,
     2996, 2996, 2996, 3915, 3915, 3161, 1242, 3915, 3168, 1296,
     1296, 1296, 1296, 3915, 3173, 3173, 3173, 3173, 1242, 3915,
     1298, 3162, 3164, 1242, 3915, 1298, 3199, 3199, 3199, 3199,
     3915, 3915, 3915, 1242, 3915, 1298, 3915, 3165, 1832, 3166,

     2566, 2567, 2567, 2567, 2567, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     1296, 1296, 1296, 1296, 3915, 2568, 3171, 2569, 2566, 2566,
     2566, 2566, 3170, 2999, 2999, 2999, 2999, 3174, 3174, 3174,
     3174, 3915, 3915, 3915, 1242, 3915, 1298, 3175, 3175, 3175,
     3175, 2566, 2566, 2566, 2566, 3169, 3915, 3000, 3915, 1298,
     3915, 1242, 3915, 1298, 3003, 3003, 3003, 3003, 3915, 3915,
     3915, 3010, 3597, 1298, 3176, 3176, 3176, 3176, 3915, 3597,
     2566, 2566, 2566, 2570, 3915, 3172, 3915, 3597, 1242, 3915,
     1298, 1296, 1296, 1296, 1296, 3915, 3915, 3915, 1242, 3915,

     1298, 3178, 3178, 3178, 3178, 1296, 1296, 1296, 1296, 3598,
     1296, 1296, 1296, 1296, 3915, 1242, 3598, 1298, 3009, 3009,
     3009, 3009, 3915, 3915, 3598, 3179, 3915, 1298, 3915, 1242,
     3915, 1298, 3915, 3915, 1242, 3915, 1298, 3185, 3185, 3185,
     3185, 3915, 3010, 3915, 1298, 3180, 3915, 3915, 3177, 3915,
     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 3915, 3915,
     3915, 1832, 3130, 3191, 3191, 3191, 3191, 3915, 3182, 3184,
     3915, 3915, 3915, 3181, 1242, 3915, 1298, 3915, 1242, 3915,
     1298, 3915, 3915, 3183, 3915, 3915, 3915, 3192, 3915, 1298,
     3131, 3017, 3017, 3017, 3017, 3915, 3018, 3018, 3018, 3018,

     1296, 1296, 1296, 1296, 3186, 3193, 3193, 3193, 3193, 1296,
     1296, 1296, 1296, 3915, 3915, 1242, 3915, 1298, 3915, 3187,
     1242, 3915, 1298, 3915, 1242, 3915, 1298, 3915, 3915, 1242,
     3915, 1298, 3915, 1242, 3915, 1298, 1296, 1296, 1296, 1296,
     3198, 3198, 3198, 3198, 3915, 1296, 1296, 1296, 1296, 3915,
     3037, 3037, 3037, 3037, 3039, 3039, 3039, 3039, 3915, 2993,
     1242, 3038, 1298, 3915, 1242, 3915, 1298, 3915, 3194, 1242,
     3915, 1298, 3040, 3040, 3040, 3040, 3037, 3037, 3037, 3037,
     3039, 3039, 3039, 3039, 3915, 3915, 3915, 3038, 3040, 3040,
     3040, 3040, 3206, 3207, 3207, 3206, 3915, 3915, 1391, 3207,

     3207, 3207, 3207, 3915, 2563, 3197, 1403, 1403, 1403, 1403,
     3915, 3915, 3915, 3915, 1221, 1221, 1221, 1221, 3245, 3245,
     3245, 3245, 3915, 1404, 3093, 3093, 3093, 3093, 3915, 3915,
     1406, 1222, 3095, 3095, 3095, 3095, 3915, 3915, 1224, 3247,
     3248, 3248, 3247, 3248, 3248, 3248, 3248, 3255, 3255, 3255,
     3255, 3260, 3260, 3260, 3260, 3113, 3113, 3113, 3113, 3115,
     3115, 3115, 3115, 3209, 3915, 3915, 3915, 1242, 3915, 2637,
     3118, 3118, 3118, 3118, 3173, 3173, 3173, 3173, 3915, 3915,
     3915, 3244, 3267, 3267, 3267, 3267, 3268, 3268, 3268, 3268,
     3122, 3122, 3122, 3122, 3119, 3269, 3269, 3269, 3269, 3271,

     3271, 3271, 3271, 3128, 3128, 3128, 3128, 3915, 3915, 3915,
     3129, 3185, 3185, 3185, 3185, 3280, 3280, 3280, 3280, 3133,
     3133, 3133, 3133, 3272, 3915, 3915, 3915, 3129, 3134, 3134,
     3134, 3134, 3282, 3282, 3282, 3282, 3915, 3915, 3915, 3281,
     3915, 3915, 3915, 3273, 3915, 3915, 3915, 3130, 3285, 3285,
     3285, 3285, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890,
     3915, 3915, 3915, 1891, 3915, 3915, 3915, 1891, 3915, 1892,
     3915, 3274, 3915, 1892, 3915, 3131, 1890, 1890, 1890, 1890,
     3289, 3289, 3289, 3289, 3915, 3915, 3915, 1891, 2129, 3915,
     3915, 1891, 3915, 1892, 3915, 2129, 3915, 1892, 1890, 1890,

     1890, 1890, 2129, 1890, 1890, 1890, 1890, 3915, 3915, 1891,
     2129, 3915, 3915, 3287, 1891, 1892, 3915, 3915, 3915, 3286,
     1892, 3147, 3147, 3147, 3147, 1890, 1890, 1890, 1890, 3915,
     3915, 3915, 1891, 3915, 3915, 3915, 1891, 1296, 1296, 1296,
     1296, 3288, 1892, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 1296, 1296, 3915, 3915, 3290, 3915, 3915,
     3915, 1242, 3915, 1298, 3915, 3915, 3915, 1242, 3291, 1298,
     3915, 1242, 3915, 1298, 3915, 1242, 3915, 1298, 3295, 3295,
     3295, 3295, 3915, 3292, 3154, 3154, 3154, 3154, 3915, 3915,
     3293, 3915, 3915, 3016, 3915, 3156, 3156, 3156, 3156, 3915,

     3157, 3915, 1242, 3915, 1298, 3157, 3915, 3915, 1242, 3915,
     1298, 3915, 3915, 3294, 1296, 1296, 1296, 1296, 3915, 1296,
     1296, 1296, 1296, 3300, 3300, 3300, 3300, 3167, 3167, 3167,
     3167, 1296, 1296, 1296, 1296, 3915, 3915, 3915, 1242, 3915,
     1298, 3915, 3915, 1242, 3915, 1298, 3915, 1242, 3915, 1298,
     3915, 1242, 3915, 3168, 3915, 1242, 3915, 1298, 3308, 3308,
     3308, 3308, 3915, 1296, 1296, 1296, 1296, 3310, 3310, 3310,
     3310, 3173, 3173, 3173, 3173, 3915, 3174, 3174, 3174, 3174,
     3915, 3915, 1242, 3915, 1298, 3296, 3299, 1242, 3915, 1298,
     3915, 3311, 3915, 1298, 3175, 3175, 3175, 3175, 3915, 3307,

     1242, 3915, 1298, 3176, 3176, 3176, 3176, 1296, 1296, 1296,
     1296, 3178, 3178, 3178, 3178, 3915, 3915, 3915, 3010, 3915,
     1298, 3915, 3309, 3313, 3313, 3313, 3313, 1242, 3915, 1298,
     3915, 1242, 3915, 1298, 3915, 3179, 3915, 1298, 1296, 1296,
     1296, 1296, 3915, 1296, 1296, 1296, 1296, 1832, 1296, 1296,
     1296, 1296, 3915, 3915, 3915, 3273, 3317, 3317, 3317, 3317,
     3915, 3915, 1242, 3915, 1298, 3915, 3312, 1242, 3915, 1298,
     3915, 3915, 1242, 3915, 1298, 1296, 1296, 1296, 1296, 3915,
     1242, 3915, 1298, 3274, 3185, 3185, 3185, 3185, 1296, 1296,
     1296, 1296, 3314, 1296, 1296, 1296, 1296, 3915, 3915, 1242,

     3915, 1298, 1296, 1296, 1296, 1296, 3915, 3316, 3315, 3915,
     3915, 3915, 1242, 3915, 1298, 3915, 3915, 1242, 3915, 1298,
     3191, 3191, 3191, 3191, 3915, 3915, 1242, 3915, 1298, 3324,
     3324, 3324, 3324, 3318, 3319, 3915, 3193, 3193, 3193, 3193,
     3327, 3327, 3327, 3327, 3192, 2131, 1298, 1296, 1296, 1296,
     1296, 3915, 2131, 1832, 3198, 3198, 3198, 3198, 3915, 2131,
     1242, 3320, 1298, 3915, 1242, 3915, 1298, 2131, 3915, 3915,
     3323, 1242, 3915, 1298, 3199, 3199, 3199, 3199, 1242, 3915,
     1298, 3335, 3335, 3335, 3335, 3915, 1245, 3336, 3336, 3336,
     3336, 3915, 3915, 3325, 3915, 1906, 3337, 3337, 3337, 3337,

     3915, 3338, 3339, 3339, 3338, 3915, 3330, 1391, 2982, 3915,
     1260, 3326, 3339, 3339, 3339, 3339, 1403, 1403, 1403, 1403,
     3350, 3350, 3350, 3350, 1221, 1221, 1221, 1221, 3245, 3245,
     3245, 3245, 3915, 1404, 3367, 3367, 3367, 3367, 3915, 3331,
     1406, 1222, 3368, 3369, 3369, 3368, 3915, 3915, 1224, 3369,
     3369, 3369, 3369, 3373, 3373, 3373, 3373, 3255, 3255, 3255,
     3255, 3378, 3378, 3378, 3378, 3260, 3260, 3260, 3260, 3381,
     3381, 3381, 3381, 1242, 3915, 3341, 3382, 3382, 3382, 3382,
     3384, 3384, 3384, 3384, 3267, 3267, 3267, 3267, 3268, 3268,
     3268, 3268, 3269, 3269, 3269, 3269, 3915, 3366, 3271, 3271,

     3271, 3271, 3915, 3915, 3385, 3313, 3313, 3313, 3313, 3915,
     3915, 3915, 3129, 3390, 3390, 3390, 3390, 3280, 3280, 3280,
     3280, 3915, 3272, 3324, 3324, 3324, 3324, 3282, 3282, 3282,
     3282, 3394, 3394, 3394, 3394, 3285, 3285, 3285, 3285, 3915,
     3915, 3281, 3273, 1890, 1890, 1890, 1890, 1890, 1890, 1890,
     1890, 3915, 3915, 3915, 1891, 3915, 3915, 3915, 1891, 3915,
     1892, 3915, 3915, 3915, 1892, 3398, 3398, 3398, 3398, 3915,
     3274, 3915, 3289, 3289, 3289, 3289, 1891, 1245, 1890, 1890,
     1890, 1890, 1892, 1891, 3325, 3915, 1906, 3915, 3915, 1891,
     3915, 1296, 1296, 1296, 1296, 1892, 3915, 3915, 3915, 2982,

     3915, 1260, 3326, 3915, 3915, 3915, 3397, 3400, 3400, 3400,
     3400, 3401, 3401, 3401, 3401, 1242, 3396, 1298, 1891, 3915,
     3915, 3915, 1891, 3915, 1892, 3915, 3915, 3915, 1892, 1296,
     1296, 1296, 1296, 3915, 3915, 3915, 3399, 3915, 3915, 3915,
     3402, 3295, 3295, 3295, 3295, 1296, 1296, 1296, 1296, 3407,
     3407, 3407, 3407, 1242, 3915, 1298, 3300, 3300, 3300, 3300,
     3408, 3408, 3408, 3408, 3915, 1242, 3915, 1298, 3915, 1242,
     3915, 1298, 3915, 1242, 3915, 1298, 1296, 1296, 1296, 1296,
     1242, 3915, 1298, 3308, 3308, 3308, 3308, 3915, 3403, 3415,
     3415, 3415, 3416, 3310, 3310, 3310, 3310, 3915, 3915, 3915,

     1242, 3915, 1298, 3915, 3915, 3404, 3915, 1242, 3915, 1298,
     3915, 3915, 3915, 1242, 3915, 1298, 3915, 3311, 3915, 1298,
     3417, 3417, 3417, 3417, 3313, 3313, 3313, 3313, 3915, 3432,
     3432, 3432, 3432, 3324, 3324, 3324, 3324, 3915, 3915, 3409,
     3915, 3915, 3915, 3414, 1832, 3418, 3419, 3419, 3419, 3419,
     3418, 3418, 3418, 3418, 3418, 3418, 3418, 3418, 3418, 3418,
     3418, 3418, 3418, 3418, 3418, 1296, 1296, 1296, 1296, 3915,
     3420, 3418, 3421, 3418, 3418, 3418, 3418, 1296, 1296, 1296,
     1296, 1296, 1296, 1296, 1296, 3335, 3335, 3335, 3335, 1242,
     3915, 1298, 3317, 3317, 3317, 3317, 3418, 3418, 3418, 3418,

     3915, 1242, 3915, 1298, 3915, 1242, 3915, 1298, 3433, 3915,
     3915, 3423, 3426, 3426, 3426, 3426, 1242, 3915, 1298, 3915,
     1296, 1296, 1296, 1296, 3915, 3418, 3418, 3418, 3422, 3915,
     3915, 1296, 1296, 1296, 1296, 3915, 3427, 3915, 1298, 1296,
     1296, 1296, 1296, 3915, 1242, 3424, 1298, 3327, 3327, 3327,
     3327, 3915, 3915, 3425, 3915, 1242, 3428, 1298, 3915, 3915,
     3430, 3915, 3915, 1242, 3915, 1298, 3415, 3415, 3415, 3415,
     3915, 1242, 3915, 1298, 3336, 3336, 3336, 3336, 3337, 3337,
     3337, 3337, 3915, 3915, 3429, 3335, 3335, 3335, 3335, 3915,
     1242, 3915, 1298, 3336, 3336, 3336, 3336, 3337, 3337, 3337,

     3337, 3915, 3915, 3915, 3431, 3915, 3435, 3440, 3441, 3441,
     3440, 3915, 3915, 1391, 3441, 3441, 3441, 3441, 3442, 3442,
     3442, 3442, 3443, 3443, 3443, 3443, 3350, 3350, 3350, 3350,
     1221, 1221, 1221, 1221, 3367, 3367, 3367, 3367, 3915, 1404,
     3464, 3465, 3465, 3464, 3915, 3915, 1406, 1222, 3465, 3465,
     3465, 3465, 3915, 3915, 1224, 3468, 3468, 3468, 3468, 3373,
     3373, 3373, 3373, 3470, 3470, 3470, 3470, 3471, 3471, 3471,
     3471, 3915, 1242, 3378, 3378, 3378, 3378, 3474, 3474, 3474,
     3474, 3381, 3381, 3381, 3381, 3382, 3382, 3382, 3382, 3475,
     3475, 3475, 3476, 3384, 3384, 3384, 3384, 3417, 3417, 3417,

     3417, 3915, 3463, 3477, 3477, 3477, 3477, 3390, 3390, 3390,
     3390, 3481, 3481, 3481, 3481, 3915, 3915, 3385, 3394, 3394,
     3394, 3394, 3475, 3475, 3475, 3475, 1890, 1890, 1890, 1890,
     3488, 3488, 3488, 3488, 3915, 3482, 3915, 1891, 3915, 3915,
     3915, 1891, 3915, 1892, 3915, 3915, 3915, 1892, 3398, 3398,
     3398, 3398, 3915, 3915, 3915, 3483, 3915, 3915, 3915, 1891,
     3489, 3489, 3489, 3489, 3400, 3400, 3400, 3400, 3915, 3915,
     3915, 1891, 3915, 3915, 3915, 1891, 3915, 1892, 3915, 3915,
     3915, 3487, 3915, 3484, 3401, 3401, 3401, 3401, 1296, 1296,
     1296, 1296, 3915, 3915, 3915, 1891, 1296, 1296, 1296, 1296,

     1296, 1296, 1296, 1296, 3491, 3491, 3491, 3491, 3407, 3407,
     3407, 3407, 1242, 3915, 1298, 3408, 3408, 3408, 3408, 3915,
     1242, 3915, 1298, 3915, 1242, 3915, 1298, 1296, 1296, 1296,
     1296, 3915, 1242, 3915, 1298, 3415, 3415, 3415, 3415, 3415,
     3415, 3415, 3415, 3417, 3417, 3417, 3417, 1296, 1296, 1296,
     1296, 1242, 3915, 1298, 3002, 3490, 3915, 3915, 3915, 1242,
     3915, 1298, 3915, 1242, 3915, 1298, 1296, 1296, 1296, 1296,
     3915, 1242, 3915, 1298, 3503, 3503, 3503, 3503, 3505, 3505,
     3505, 3505, 3915, 2572, 3495, 3432, 3432, 3432, 3432, 3915,
     1242, 3915, 1298, 3915, 3409, 3915, 3496, 3915, 3504, 3915,

     1298, 3915, 1832, 3915, 3915, 3915, 3501, 3517, 3517, 3517,
     3517, 3497, 3418, 3419, 3419, 3419, 3419, 3418, 3418, 3418,
     3498, 3418, 3418, 3418, 3418, 3418, 3418, 3418, 3418, 3418,
     3418, 3418, 3442, 3442, 3442, 3442, 3915, 3420, 3418, 3421,
     3418, 3418, 3418, 3418, 3499, 3499, 3499, 3499, 3499, 3499,
     3499, 3499, 3499, 3499, 3499, 3499, 3499, 3499, 3499, 3499,
     3499, 3499, 3499, 3418, 3418, 3418, 3418, 3499, 3499, 3499,
     3499, 3499, 3499, 3499, 3499, 3499, 3499, 3499, 3499, 3499,
     3499, 3499, 3499, 3499, 3499, 3499, 3499, 3499, 3499, 3499,
     3499, 3499, 3418, 3418, 3418, 3500, 1296, 1296, 1296, 1296,

     3426, 3426, 3426, 3426, 1296, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1242, 3915, 1298, 3915, 3427, 3915, 1298, 3915, 1242, 3915,
     1298, 3915, 1242, 3915, 1298, 3915, 1242, 3915, 1298, 3915,
     1242, 3915, 1298, 3915, 3483, 3510, 3510, 3510, 3510, 3915,
     1296, 1296, 1296, 1296, 3508, 3915, 3915, 3915, 3506, 3516,
     3517, 3517, 3516, 3915, 3915, 1391, 3915, 3915, 3915, 3502,
     3915, 3915, 3484, 3507, 1242, 3915, 1298, 3443, 3443, 3443,
     3443, 3527, 3527, 3527, 3527, 3915, 3915, 3915, 3509, 3528,
     3529, 3529, 3528, 3915, 1404, 3915, 3915, 3915, 1222, 3915,

     3915, 1406, 3915, 3915, 3915, 1224, 3915, 3512, 3529, 3529,
     3529, 3529, 3531, 3531, 3531, 3531, 3468, 3468, 3468, 3468,
     3532, 3532, 3532, 3532, 3511, 3470, 3470, 3470, 3470, 3915,
     3915, 3915, 1242, 3471, 3471, 3471, 3471, 3474, 3474, 3474,
     3474, 3475, 3475, 3475, 3475, 3475, 3475, 3475, 3475, 3477,
     3477, 3477, 3477, 3536, 3536, 3536, 3536, 3481, 3481, 3481,
     3481, 3505, 3505, 3505, 3505, 1890, 1890, 1890, 1890, 3488,
     3488, 3488, 3488, 3915, 3915, 3915, 1891, 3537, 3915, 3915,
     1891, 3482, 1892, 3489, 3489, 3489, 3489, 1296, 1296, 1296,
     1296, 3915, 3915, 3915, 1891, 3491, 3491, 3491, 3491, 3915,

     3915, 3483, 3496, 3915, 1296, 1296, 1296, 1296, 3915, 3915,
     3915, 1242, 3915, 1298, 3915, 3915, 3915, 3497, 3548, 3548,
     3548, 3548, 3548, 3548, 3548, 3548, 3915, 3915, 1242, 3484,
     1298, 1296, 1296, 1296, 1296, 3915, 3915, 3915, 3542, 3915,
     1296, 1296, 1296, 1296, 3543, 3550, 3915, 3915, 3915, 3550,
     3503, 3503, 3503, 3503, 3915, 1242, 3915, 1298, 3553, 3553,
     3553, 3553, 3915, 2295, 1242, 3915, 1298, 3505, 3505, 3505,
     3505, 3915, 3915, 3551, 3504, 3915, 1298, 1296, 1296, 1296,
     1296, 3915, 1832, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1296, 3557, 3557, 3557, 3557, 3510, 3510, 3510, 3510, 3915,

     3915, 1242, 3915, 1298, 3915, 3915, 3915, 1242, 3915, 1298,
     3915, 1242, 3552, 1298, 3915, 3558, 3915, 1298, 1296, 1296,
     1296, 1296, 3915, 3554, 3559, 3559, 3559, 3559, 3915, 3563,
     3564, 3564, 3563, 3915, 3556, 1391, 3564, 3564, 3564, 3564,
     3915, 3915, 1242, 3915, 1298, 3527, 3527, 3527, 3527, 3915,
     3915, 3555, 3571, 3572, 3572, 3571, 3572, 3572, 3572, 3572,
     3531, 3531, 3531, 3531, 3532, 3532, 3532, 3532, 3915, 1224,
     3536, 3536, 3536, 3536, 3915, 3915, 3915, 2295, 3915, 3915,
     1242, 3553, 3553, 3553, 3553, 3580, 3580, 3580, 3580, 1890,
     1890, 1890, 1890, 3915, 3537, 1296, 1296, 1296, 1296, 3915,

     1891, 3915, 3915, 3560, 3915, 3915, 1892, 3915, 3915, 3581,
     3583, 3583, 3583, 3583, 3548, 3548, 3548, 3548, 3915, 1242,
     3915, 1298, 3548, 3548, 3548, 3548, 3915, 1296, 1296, 1296,
     1296, 3587, 3587, 3587, 3587, 3553, 3553, 3553, 3553, 3915,
     3915, 3550, 1296, 1296, 1296, 1296, 3915, 3915, 3915, 3550,
     3915, 1242, 3582, 1298, 3330, 3588, 3915, 1298, 3915, 1296,
     1296, 1296, 1296, 3915, 3915, 3915, 1242, 3915, 1298, 1296,
     1296, 1296, 1296, 3915, 3586, 3557, 3557, 3557, 3557, 3915,
     3915, 3915, 3589, 1242, 3915, 1298, 3591, 3591, 3591, 3591,
     3915, 3915, 3915, 1242, 3915, 1298, 3915, 3915, 3915, 3558,

     3915, 1298, 3559, 3559, 3559, 3559, 3592, 3592, 3592, 3592,
     1832, 3595, 3596, 3596, 3595, 3509, 3915, 1391, 3596, 3596,
     3596, 3596, 3599, 3600, 3600, 3599, 3600, 3600, 3600, 3600,
     3915, 3915, 3590, 3603, 3603, 3603, 3603, 3580, 3580, 3580,
     3580, 3591, 3591, 3591, 3591, 1890, 1890, 1890, 1890, 3915,
     1242, 3583, 3583, 3583, 3583, 3915, 1891, 3604, 3915, 3915,
     3915, 3581, 1892, 1296, 1296, 1296, 1296, 3587, 3587, 3587,
     3587, 3610, 3610, 3610, 3610, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 3915, 3915, 3593, 3915, 1242, 3915, 1298,
     3915, 3588, 3915, 1298, 3915, 1832, 3915, 3915, 3915, 1242,

     3915, 1298, 3915, 1242, 3915, 1298, 3915, 3915, 3915, 3552,
     3915, 3915, 3915, 3607, 3915, 3915, 3915, 3611, 3591, 3591,
     3591, 3591, 3592, 3592, 3592, 3592, 3614, 3615, 3615, 3614,
     3915, 3915, 1391, 3615, 3615, 3615, 3615, 3616, 3617, 3617,
     3616, 3617, 3617, 3617, 3617, 3603, 3603, 3603, 3603, 3915,
     3915, 3612, 3610, 3610, 3610, 3610, 1890, 1890, 1890, 1890,
     3610, 3610, 3610, 3610, 3915, 1242, 3915, 1891, 3915, 3604,
     3915, 3915, 3915, 1892, 1296, 1296, 1296, 1296, 3625, 3625,
     3625, 3625, 3628, 3629, 3629, 3628, 3915, 3915, 1391, 3629,
     3629, 3629, 3629, 3630, 3631, 3631, 3630, 3915, 1242, 3915,

     1298, 3915, 3626, 3915, 1298, 3631, 3631, 3631, 3631, 3634,
     3634, 3634, 3634, 3636, 3636, 3636, 3636, 3637, 3637, 3637,
     3637, 3624, 3915, 3621, 1891, 1296, 1296, 1296, 1296, 1242,
     1892, 3915, 3915, 3635, 3625, 3625, 3625, 3625, 3640, 3640,
     3640, 3640, 3642, 3643, 3643, 3642, 3915, 3915, 1391, 1242,
     3915, 1298, 3643, 3643, 3643, 3643, 3915, 3915, 3626, 3915,
     1298, 3915, 1832, 3644, 3645, 3645, 3644, 3645, 3645, 3645,
     3645, 3612, 3646, 3646, 3646, 3646, 3634, 3634, 3634, 3634,
     3640, 3640, 3640, 3640, 3636, 3636, 3636, 3636, 3915, 3915,
     3915, 1242, 3915, 3915, 3915, 1891, 3638, 3915, 3915, 3915,

     3635, 3637, 3637, 3637, 3637, 3647, 3647, 3647, 3647, 3640,
     3640, 3640, 3640, 3649, 3649, 3649, 3649, 3651, 3652, 3652,
     3651, 3915, 3915, 1391, 3652, 3652, 3652, 3652, 3653, 3654,
     3654, 3653, 3654, 3654, 3654, 3654, 3646, 3646, 3646, 3646,
     3650, 3647, 3647, 3647, 3647, 3649, 3649, 3649, 3649, 3655,
     3655, 3655, 3655, 3915, 3656, 3915, 1242, 3915, 3915, 3656,
     3658, 3659, 3659, 3658, 3915, 3915, 1391, 3659, 3659, 3659,
     3659, 3915, 3650, 3660, 3661, 3661, 3660, 3661, 3661, 3661,
     3661, 3915, 3915, 3915, 3648, 3655, 3655, 3655, 3655, 3915,
     3656, 3663, 3664, 3664, 3663, 3656, 3915, 1391, 3915, 3915,

     3915, 1242, 3664, 3664, 3664, 3664, 3665, 3666, 3666, 3665,
     3666, 3666, 3666, 3666, 3668, 3669, 3669, 3668, 3657, 3915,
     1391, 3669, 3669, 3669, 3669, 3670, 3671, 3671, 3670, 3671,
     3671, 3671, 3671, 3915, 1242, 3672, 3672, 3672, 3672, 3915,
     3673, 3675, 3676, 3676, 3675, 3673, 3915, 1391, 3676, 3676,
     3676, 3676, 3915, 1242, 3657, 3677, 3678, 3678, 3677, 3678,
     3678, 3678, 3678, 3674, 3672, 3672, 3672, 3672, 3672, 3672,
     3672, 3672, 3679, 3680, 3680, 3679, 3915, 3915, 1391, 3680,
     3680, 3680, 3680, 1242, 3681, 3682, 3682, 3681, 3682, 3682,
     3682, 3682, 3674, 3915, 3915, 3915, 3674, 3683, 3684, 3684,

     3683, 3915, 3915, 1391, 3684, 3684, 3684, 3684, 3685, 3686,
     3686, 3685, 1242, 3686, 3686, 3686, 3686, 3687, 3688, 3688,
     3687, 3915, 3915, 1391, 3688, 3688, 3688, 3688, 3689, 3690,
     3690, 3689, 3690, 3690, 3690, 3690, 3915, 1242, 3691, 3692,
     3692, 3691, 3915, 3915, 1391, 3692, 3692, 3692, 3692, 3693,
     3694, 3694, 3693, 3915, 3915, 3915, 1242, 3694, 3694, 3694,
     3694, 3695, 3696, 3696, 3695, 3915, 3915, 1391, 3696, 3696,
     3696, 3696, 3697, 3698, 3698, 3697, 3698, 3698, 3698, 3698,
     3915, 1242, 3699, 3700, 3700, 3699, 3915, 3915, 1391, 3700,
     3700, 3700, 3700, 3701, 3702, 3702, 3701, 3915, 3915, 3915,

     1242, 3702, 3702, 3702, 3702, 3703, 3704, 3704, 3703, 3915,
     3915, 1391, 3704, 3704, 3704, 3704, 3705, 3706, 3706, 3705,
     3706, 3706, 3706, 3706, 3915, 1242, 3707, 3708, 3708, 3707,
     3915, 3915, 1391, 3708, 3708, 3708, 3708, 3709, 3710, 3710,
     3709, 3915, 3915, 3915, 1242, 3710, 3710, 3710, 3710, 3711,
     3712, 3712, 3711, 3915, 3915, 1391, 3712, 3712, 3712, 3712,
     3713, 3714, 3714, 3713, 3714, 3714, 3714, 3714, 3915, 1242,
     3715, 3716, 3716, 3715, 3915, 3915, 1391, 3716, 3716, 3716,
     3716, 3717, 3718, 3718, 3717, 3915, 3915, 3915, 1242, 3718,
     3718, 3718, 3718, 3719, 3720, 3720, 3719, 3915, 3915, 1391,

     3720, 3720, 3720, 3720, 3721, 3722, 3722, 3721, 3722, 3722,
     3722, 3722, 3915, 1242, 3723, 3724, 3724, 3723, 3915, 3915,
     1391, 3724, 3724, 3724, 3724, 3725, 3726, 3726, 3725, 3915,
     3915, 3915, 1242, 3726, 3726, 3726, 3726, 3727, 3728, 3728,
     3727, 3915, 3915, 1391, 3728, 3728, 3728, 3728, 3729, 3730,
     3730, 3729, 3730, 3730, 3730, 3730, 3915, 1242, 3731, 3732,
     3732, 3731, 3915, 3915, 1391, 3732, 3732, 3732, 3732, 3733,
     3734, 3734, 3733, 3915, 3915, 3915, 1242, 3734, 3734, 3734,
     3734, 3735, 3736, 3736, 3735, 3915, 3915, 1391, 3736, 3736,
     3736, 3736, 3737, 3738, 3738, 3737, 3738, 3738, 3738, 3738,

     3915, 1242, 3739, 3740, 3740, 3739, 3915, 3915, 1391, 3740,
     3740, 3740, 3740, 3741, 3742, 3742, 3741, 3915, 3915, 3915,
     1242, 3742, 3742, 3742, 3742, 3743, 3744, 3744, 3743, 3915,
     3915, 1391, 3744, 3744, 3744, 3744, 3745, 3746, 3746, 3745,
     3746, 3746, 3746, 3746, 3915, 1242, 3747, 3748, 3748, 3747,
     3915, 3915, 1391, 3748, 3748, 3748, 3748, 3749, 3750, 3750,
     3749, 3915, 3915, 3915, 1242, 3750, 3750, 3750, 3750, 3751,
     3752, 3752, 3751, 3915, 3915, 1391, 3752, 3752, 3752, 3752,
     3753, 3754, 3754, 3753, 3754, 3754, 3754, 3754, 3915, 1242,
     3755, 3756, 3756, 3755, 3915, 3915, 1391, 3756, 3756, 3756,

     3756, 3757, 3758, 3758, 3757, 3915, 3915, 3915, 1242, 3758,
     3758, 3758, 3758, 3759, 3760, 3760, 3759, 3915, 3915, 1391,
     3760, 3760, 3760, 3760, 3761, 3762, 3762, 3761, 3762, 3762,
     3762, 3762, 3915, 1242, 3763, 3764, 3764, 3763, 3915, 3915,
     1391, 3764, 3764, 3764, 3764, 3765, 3766, 3766, 3765, 3915,
     3915, 3915, 1242, 3766, 3766, 3766, 3766, 3767, 3768, 3768,
     3767, 3915, 3915, 1391, 3768, 3768, 3768, 3768, 3769, 3770,
     3770, 3769, 3770, 3770, 3770, 3770, 3915, 1242, 3771, 3772,
     3772, 3771, 3915, 3915, 1391, 3772, 3772, 3772, 3772, 3773,
     3774, 3774, 3773, 3915, 3915, 3915, 1242, 3774, 3774, 3774,

     3774, 3775, 3776, 3776, 3775, 3915, 3915, 1391, 3776, 3776,
     3776, 3776, 3777, 3778, 3778, 3777, 3778, 3778, 3778, 3778,
     3915, 1242, 3779, 3780, 3780, 3779, 3915, 3915, 1391, 3780,
     3780, 3780, 3780, 3781, 3782, 3782, 3781, 3915, 3915, 3915,
     1242, 3782, 3782, 3782, 3782, 3783, 3784, 3784, 3783, 3915,
     3915, 1391, 3784, 3784, 3784, 3784, 3785, 3786, 3786, 3785,
     3786, 3786, 3786, 3786, 3915, 1242, 3787, 3788, 3788, 3787,
     3915, 3915, 1391, 3788, 3788, 3788, 3788, 3789, 3790, 3790,
     3789, 3915, 3915, 3915, 1242, 3790, 3790, 3790, 3790, 3791,
     3792, 3792, 3791, 3915, 3915, 1391, 3792, 3792, 3792, 3792,

     3793, 3794, 3794, 3793, 3794, 3794, 3794, 3794, 3915, 1242,
     3795, 3796, 3796, 3795, 3915, 3915, 1391, 3796, 3796, 3796,
     3796, 3797, 3798, 3798, 3797, 3915, 3915, 3915, 1242, 3798,
     3798, 3798, 3798, 3799, 3800, 3800, 3799, 3915, 3915, 1391,
     3800, 3800, 3800, 3800, 3801, 3802, 3802, 3801, 3802, 3802,
     3802, 3802, 3915, 1242, 3803, 3804, 3804, 3803, 3915, 3915,
     1391, 3804, 3804, 3804, 3804, 3805, 3806, 3806, 3805, 3915,
     3915, 3915, 1242, 3806, 3806, 3806, 3806, 3807, 3808, 3808,
     3807, 3915, 3915, 1391, 3808, 3808, 3808, 3808, 3809, 3810,
     3810, 3809, 3810, 3810, 3810, 3810, 3915, 1242, 3811, 3812,

     3812, 3811, 3915, 3915, 1391, 3812, 3812, 3812, 3812, 3813,
     3814, 3814, 3813, 3915, 3915, 3915, 1242, 3814, 3814, 3814,
     3814, 3815, 3816, 3816, 3815, 3915, 3915, 1391, 3816, 3816,
     3816, 3816, 3817, 3818, 3818, 3817, 3818, 3818, 3818, 3818,
     3915, 1242, 3819, 3820, 3820, 3819, 3915, 3915, 1391, 3820,
     3820, 3820, 3820, 3821, 3822, 3822, 3821, 3915, 3915, 3915,
     1242, 3822, 3822, 3822, 3822, 3823, 3824, 3824, 3823, 3915,
     3915, 1391, 3824, 3824, 3824, 3824, 3825, 3826, 3826, 3825,
     3826, 3826, 3826, 3826, 3915, 1242, 3827, 3828, 3828, 3827,
     3915, 3915, 1391, 3828, 3828, 3828, 3828, 3829, 3830, 3830,

     3829, 3915, 3915, 3915, 1242, 3830, 3830, 3830, 3830, 3831,
     3832, 3832, 3831, 3915, 3915, 1391, 3832, 3832, 3832, 3832,
     3833, 3834, 3834, 3833, 3834, 3834, 3834, 3834, 3915, 1242,
     3835, 3836, 3836, 3835, 3915, 3915, 1391, 3836, 3836, 3836,
     3836, 3837, 3838, 3838, 3837, 3915, 3915, 3915, 1242, 3838,
     3838, 3838, 3838, 3839, 3840, 3840, 3839, 3915, 3915, 1391,
     3840, 3840, 3840, 3840, 3841, 3842, 3842, 3841, 3842, 3842,
     3842, 3842, 3915, 1242, 3843, 3844, 3844, 3843, 3915, 3915,
     1391, 3844, 3844, 3844, 3844, 3845, 3846, 3846, 3845, 3915,
     3915, 3915, 1242, 3846, 3846, 3846, 3846, 3847, 3848, 3848,

     3847, 3915, 3915, 1391, 3848, 3848, 3848, 3848, 3849, 3850,
     3850, 3849, 3850, 3850, 3850, 3850, 3915, 1242, 3851, 3852,
     3852, 3851, 3915, 3915, 1391, 3852, 3852, 3852, 3852, 3853,
     3854, 3854, 3853, 3915, 3915, 3915, 1242, 3854, 3854, 3854,
     3854, 3855, 3856, 3856, 3855, 3915, 3915, 1391, 3856, 3856,
     3856, 3856, 3857, 3858, 3858, 3857, 3858, 3858, 3858, 3858,
     3915, 1242, 3859, 3860, 3860, 3859, 3915, 3915, 1391, 3860,
     3860, 3860, 3860, 3861, 3862, 3862, 3861, 3915, 3915, 3915,
     1242, 3862, 3862, 3862, 3862, 3863, 3864, 3864, 3863, 3915,
     3915, 1391, 3864, 3864, 3864, 3864, 3865, 3866, 3866, 3865,

     3866, 3866, 3866, 3866, 3915, 1242, 3867, 3868, 3868, 3867,
     3915, 3915, 1391, 3868, 3868, 3868, 3868, 3869, 3870, 3870,
     3869, 3915, 3915, 3915, 1242, 3870, 3870, 3870, 3870, 3871,
     3872, 3872, 3871, 3915, 3915, 1391, 3872, 3872, 3872, 3872,
     3873, 3874, 3874, 3873, 3874, 3874, 3874, 3874, 3915, 1242,
     3875, 3876, 3876, 3875, 3915, 3915, 1391, 3876, 3876, 3876,
     3876, 3877, 3878, 3878, 3877, 3915, 3915, 3915, 1242, 3878,
     3878, 3878, 3878, 3879, 3880, 3880, 3879, 3915, 3915, 1391,
     3880, 3880, 3880, 3880, 3881, 3882, 3882, 3881, 3882, 3882,
     3882, 3882, 3915, 1242, 3883, 3884, 3884, 3883, 3915, 3915,

     1391, 3884, 3884, 3884, 3884, 3885, 3886, 3886, 3885, 3915,
     3915, 3915, 1242, 3886, 3886, 3886, 3886, 3887, 3888, 3888,
     3887, 3915, 3915, 1391, 3888, 3888, 3888, 3888, 3889, 3890,
     3890, 3889, 3890, 3890, 3890, 3890, 3915, 1242, 3891, 3892,
     3892, 3891, 3915, 3915, 1391, 3892, 3892, 3892, 3892, 3893,
     3894, 3894, 3893, 3915, 3915, 3915, 1242, 3894, 3894, 3894,
     3894, 3895, 3896, 3896, 3895, 3915, 3915, 1391, 3896, 3896,
     3896, 3896, 3897, 3898, 3898, 3897, 3898, 3898, 3898, 3898,
     3915, 1242, 3899, 3900, 3900, 3899, 3915, 3915, 1391, 3900,
     3900, 3900, 3900, 3901, 3902, 3902, 3901, 3915, 3915, 3915,

     1242, 3902, 3902, 3902, 3902, 3903, 3904, 3904, 3903, 3915,
     3915, 1391, 3904, 3904, 3904, 3904, 3905, 3906, 3906, 3905,
     3906, 3906, 3906, 3906, 3915, 1242, 3907, 3908, 3908, 3907,
     3915, 3915, 1391, 3908, 3908, 3908, 3908, 3909, 3910, 3910,
     3909, 3915, 3915, 3915, 1242, 3910, 3910, 3910, 3910, 3911,
     3912, 3912, 3911, 3915, 3915, 1391, 3912, 3912, 3912, 3912,
     3913, 1268, 1268, 3913, 1268, 1268, 1268, 1268, 3915, 1242,
     3914, 3915, 3915, 3914, 3915, 3915, 1391, 3913, 1268, 1268,
     3913, 3914, 3915, 3915, 3914, 3915, 3915, 1391, 1242,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,

      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,

      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,

      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,

      484,  484,  484,  484,  484,  484,  484,  484,  484,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,

      523,  523,  523,  523,  523,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,

      557,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  597,  608,  608,  608,

      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  622,
      622,  622,  622,  622,  622,  622,  622,  622,  622,  622,
      622,  622,  622,  622,  622,  622,  622,  622,  622,  622,
      622,  622,  622,  622,  622,  622,  622,  622,  622,  622,
      622,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  640,  640,  640,  640,  640,  640,  640,

      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,

      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,

      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,

      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,

      839,  839,  839,  839,  839,  839,  839,  839,  839,  848,
      848,  848,  848,  848,  848,  848,  848,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  848,  848,  848,
      848,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,

      863,  863,  863,  863,  863,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  883,  883,  883,
      883,  883,  883,  883,  883,  883,  883,  883,  883,  883,
      883,  883,  883,  883,  883,  883,  883,  883,  883,  883,
      883,  883,  883,  883,  883,  883,  883,  883,  883,  891,
      891,  891,  891,  891,  891,  891,  891,  891,  891,  891,
      891,  891,  891,  891,  891,  891,  891,  891,  891,  891,
      891,  891,  891,  891,  891,  891,  891,  891,  891,  891,

      891,  899,  899,  899,  899,  899,  899,  899,  899,  899,
      899,  899,  899,  899,  899,  899,  899,  899,  899,  899,
      899,  899,  899,  899,  899,  899,  899,  899,  899,  899,
      899,  899,  899,  907,  907,  907,  907,  907,  907,  907,
      907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
      907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
      907,  907,  907,  907,  907,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  925,  925,  925,

      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  954,  954,  954,  954,  954,  954,  954,

      954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  974,
      974,  974,  974,  974,  974,  974,  974,  974,  974,  974,

      974,  974,  974,  974,  974,  974,  974,  974,  974,  974,
      974,  974,  974,  974,  974,  974,  974,  974,  974,  974,
      974,  981,  981,  981,  981,  981,  981,  981,  981,  981,
      981,  981,  981,  981,  981,  981,  981,  981,  981,  981,
      981,  981,  981,  981,  981,  981,  981,  981,  981,  981,
      981,  981,  981,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,

      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1017,
     1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017,
     1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017,
     1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017,
     1017, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,

     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1047, 1047, 1047, 1047, 1047, 1047, 1047,
     1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047,
     1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047,
     1047, 1047, 1047, 1047, 1047, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,

     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,

     1095, 1095, 1095, 1095, 1095, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1126, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 1126, 3915, 3915, 3915,
     3915, 3915, 1126, 3915, 3915, 3915, 3915, 3915, 3915, 1126,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 1126, 1140, 1140,
     1140, 3915, 3915, 3915, 1140, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     1140, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1140, 1144,

     1144, 1144, 1144, 3915, 3915, 1144, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 1144, 3915, 3915, 3915, 3915,
     3915, 1144, 3915, 3915, 3915, 3915, 3915, 3915, 1144, 1144,
     1147, 1147, 1147, 3915, 3915, 3915, 1147, 3915, 3915, 3915,
     3915, 3915, 3915, 1147, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 1147, 3915, 3915, 3915, 3915, 3915, 3915, 1147,
     1147, 1153, 1153, 1153, 3915, 3915, 3915, 3915, 3915, 3915,
     1153, 3915, 3915, 1153, 1153, 3915, 1153, 1153, 1153, 1153,
     3915, 3915, 3915, 1153, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 1153, 1159, 1159, 1159, 3915, 3915, 3915, 1159, 3915,

     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 1159, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 1159, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 3915, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 3915, 1163, 1163, 1163, 1169, 1169, 1169, 3915, 3915,
     3915, 1169, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 1169, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 1169, 1172, 1172, 1172, 1172,
     3915, 3915, 1172, 3915, 3915, 3915, 3915, 3915, 3915, 3915,

     3915, 3915, 1172, 3915, 3915, 3915, 3915, 3915, 1172, 3915,
     3915, 3915, 3915, 3915, 3915, 1172, 1172, 1180, 1180, 1180,
     3915, 3915, 3915, 3915, 3915, 3915, 1180, 3915, 3915, 3915,
     3915, 3915, 1180, 1180, 3915, 3915, 3915, 3915, 3915, 1180,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 1180, 1190, 3915,
     3915, 3915, 1190, 3915, 1190, 3915, 3915, 1190, 3915, 3915,
     3915, 1190, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1190,
     1193, 1193, 3915, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,

     1193, 1193, 1209, 1209, 1209, 3915, 3915, 3915, 1209, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 1209, 3915, 3915, 3915, 3915, 1209,
     3915, 3915, 1209, 1223, 1223, 1223, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 1223, 3915, 1223, 1223,
     3915, 3915, 3915, 3915, 3915, 1223, 3915, 1223, 3915, 3915,
     3915, 3915, 3915, 1223, 1233, 1233, 3915, 1233, 1233, 1233,
     1233, 1233, 1233, 3915, 1233, 1233, 1233, 1233, 1233, 1233,
     1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233,
     1233, 1233, 1233, 1233, 1233, 1233, 1264, 1264, 1264, 3915,

     3915, 3915, 1264, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1264, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 1264, 1271, 1271, 1271,
     1271, 3915, 3915, 1271, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 1271, 3915, 3915, 3915, 3915, 3915, 1271,
     3915, 3915, 3915, 3915, 3915, 3915, 1271, 1271, 1279, 1279,
     1279, 3915, 3915, 3915, 1279, 1279, 3915, 3915, 3915, 1279,
     3915, 3915, 3915, 3915, 1279, 3915, 3915, 3915, 3915, 3915,
     1279, 3915, 3915, 3915, 1279, 3915, 3915, 3915, 1279, 1297,
     1297, 1297, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,

     3915, 3915, 3915, 3915, 1297, 1297, 3915, 1297, 3915, 3915,
     3915, 1297, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1297,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1333, 1333, 3915, 1333, 1333, 1333, 1333, 1333,
     1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333,
     1333, 3915, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333,
     1333, 1333, 1333, 1333, 1342, 1342, 1342, 3915, 3915, 3915,
     1342, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,

     3915, 3915, 3915, 3915, 3915, 3915, 1342, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 1342, 1345, 1345, 1345, 1345, 3915,
     3915, 1345, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 1345, 3915, 3915, 3915, 3915, 3915, 1345, 3915, 3915,
     3915, 3915, 3915, 3915, 1345, 1345, 1348, 1348, 1348, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 1348, 1348, 3915, 1348, 3915, 3915, 3915, 1348, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 1348, 1388, 1388, 3915,
     3915, 1388, 3915, 3915, 1388, 1388, 3915, 1388, 1388, 1388,
     1388, 1388, 3915, 1388, 1388, 1388, 3915, 1388, 1388, 3915,

     1388, 1388, 1388, 1388, 1388, 3915, 3915, 1388, 1388, 1392,
     1392, 3915, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1394, 1394, 3915, 1394, 1394, 1394, 1394, 1394, 1394,
     3915, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394,
     1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394,
     1394, 1394, 1394, 1405, 1405, 1405, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 1405, 3915, 1405, 1405,
     3915, 3915, 3915, 3915, 3915, 1405, 3915, 3915, 3915, 3915,

     3915, 3915, 3915, 1405, 1412, 1412, 1412, 3915, 3915, 3915,
     1412, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 1412, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 1412, 1415, 1415, 1415, 1415, 3915,
     3915, 1415, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 1415, 3915, 3915, 3915, 3915, 3915, 1415, 3915, 3915,
     3915, 3915, 3915, 3915, 1415, 1415, 1417, 1417, 1417, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 1417, 1417, 3915, 3915, 3915, 3915, 3915, 1417, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 1417, 1418, 1418, 3915,

     1418, 1418, 3915, 3915, 1418, 1418, 3915, 1418, 1418, 1418,
     1418, 1418, 3915, 1418, 1418, 1418, 3915, 1418, 1418, 3915,
     1418, 1418, 3915, 1418, 1418, 3915, 3915, 1418, 1418, 1421,
     1421, 3915, 1421, 1421, 1421, 1421, 1421, 1421, 3915, 1421,
     1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421,
     1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421,
     1421, 1440, 1440, 3915, 1440, 1440, 1440, 1440, 1440, 1440,
     1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440,
     1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440,
     1440, 1440, 1440, 1447, 1447, 3915, 1447, 1447, 1447, 1447,

     1447, 1447, 1447, 1447, 1447, 3915, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1460, 1460, 3915,
     1460, 1460, 3915, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 3915, 1460, 3915, 1460, 1460, 1460, 1460, 1460, 1463,
     1463, 3915, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,

     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1473, 3915, 3915, 3915, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 3915, 1473, 3915, 3915, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1483, 3915, 1483, 3915, 3915, 3915, 3915,
     3915, 3915, 1483, 3915, 1483, 3915, 3915, 3915, 3915, 3915,
     1483, 1487, 1487, 1487, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 1487, 3915, 1487, 3915, 3915, 3915,
     3915, 3915, 3915, 1487, 3915, 3915, 3915, 3915, 3915, 3915,

     3915, 1487, 1490, 1490, 1490, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 1490, 3915, 3915,
     3915, 3915, 3915, 3915, 1490, 3915, 1490, 3915, 3915, 3915,
     3915, 3915, 1490, 1501, 1501, 3915, 1501, 1501, 1501, 1501,
     1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501,
     1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501,
     1501, 1501, 1501, 1501, 1501, 1505, 3915, 3915, 3915, 1505,
     3915, 3915, 3915, 3915, 3915, 3915, 1505, 3915, 3915, 3915,
     3915, 3915, 3915, 1505, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 1505, 1510, 1510, 3915, 1510, 1510, 3915, 1510, 1510,

     1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510,
     1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510,
     1510, 1510, 1510, 1510, 1518, 1518, 1518, 1518, 1518, 1518,
     1518, 1518, 1518, 1518, 1518, 3915, 1518, 1518, 1518, 1518,
     1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518,
     1518, 1518, 1518, 1518, 1518, 1518, 1525, 1525, 1525, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 1525, 1525, 3915, 3915, 3915, 3915, 3915, 1525, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 1525, 1527, 1527, 1527,
     1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 3915, 1527,

     1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527,
     1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1539,
     1539, 3915, 1539, 3915, 3915, 3915, 1539, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 1539, 1554, 1554, 3915, 1554, 1554,
     1554, 1554, 1554, 1554, 3915, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1565, 1565, 1565,
     3915, 3915, 3915, 1565, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1565,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 1565, 1568, 1568,

     1568, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1568,
     3915, 3915, 3915, 1568, 3915, 3915, 3915, 3915, 3915, 3915,
     1568, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1568, 1574,
     1574, 1574, 3915, 3915, 3915, 1574, 1574, 3915, 3915, 3915,
     1574, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 1574, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1574,
     1576, 1576, 1576, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 1576, 3915, 3915, 3915, 3915,
     3915, 3915, 1576, 1576, 3915, 3915, 3915, 3915, 3915, 3915,
     1576, 1586, 1586, 1586, 3915, 3915, 3915, 1586, 3915, 3915,

     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 1586, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 1586, 1589, 1589, 1589, 1589, 3915, 3915, 1589, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1589, 3915,
     3915, 3915, 3915, 3915, 1589, 3915, 3915, 3915, 3915, 3915,
     3915, 1589, 1589, 1591, 1591, 1591, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1591, 1591,
     3915, 3915, 3915, 3915, 3915, 1591, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 1591, 1598, 1598, 3915, 1598, 1598, 1598,
     1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598,

     1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598,
     1598, 1598, 1598, 1598, 1598, 1598, 1600, 3915, 3915, 3915,
     1600, 3915, 3915, 1600, 1600, 3915, 3915, 3915, 1600, 1600,
     1600, 3915, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1602, 1602,
     3915, 1602, 1602, 1602, 1602, 1602, 1602, 3915, 1602, 1602,
     1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602,
     1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602,
     1617, 1617, 3915, 1617, 1617, 1617, 1617, 1617, 1617, 1617,
     1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617,

     1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617,
     1617, 1617, 1621, 1621, 3915, 1621, 1621, 1621, 1621, 1621,
     1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621,
     1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621,
     1621, 1621, 1621, 1621, 1622, 1622, 3915, 1622, 1622, 3915,
     1622, 1622, 1622, 3915, 3915, 3915, 1622, 1622, 1622, 1622,
     1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622,
     1622, 1622, 1622, 1622, 1622, 1622, 1623, 1623, 3915, 1623,
     1623, 1623, 1623, 1623, 1623, 3915, 1623, 1623, 1623, 1623,
     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,

     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1627, 1627,
     3915, 1627, 1627, 3915, 1627, 1627, 1627, 3915, 1627, 1627,
     1627, 1627, 1627, 3915, 1627, 1627, 1627, 1627, 1627, 1627,
     1627, 1627, 1627, 1627, 1627, 1627, 3915, 3915, 1627, 1627,
     1628, 1628, 3915, 1628, 1628, 1628, 1628, 1628, 1628, 3915,
     1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628,
     1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628,
     1628, 1628, 1630, 1630, 3915, 1630, 1630, 3915, 1630, 1630,
     1630, 3915, 3915, 3915, 1630, 1630, 1630, 3915, 1630, 1630,
     1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630,

     1630, 1630, 1630, 1630, 1631, 1631, 3915, 1631, 1631, 1631,
     1631, 1631, 1631, 3915, 1631, 1631, 1631, 1631, 1631, 1631,
     1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631,
     1631, 1631, 1631, 1631, 1631, 1631, 1633, 1633, 3915, 1633,
     1633, 3915, 1633, 1633, 1633, 3915, 1633, 1633, 1633, 1633,
     1633, 3915, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633,
     1633, 1633, 1633, 1633, 3915, 3915, 1633, 1633, 1634, 1634,
     3915, 1634, 1634, 1634, 1634, 1634, 1634, 3915, 1634, 1634,
     1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634,
     1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634,

     1644, 1644, 3915, 1644, 1644, 1644, 1644, 1644, 1644, 3915,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1654, 1654, 3915, 1654, 1654, 3915, 1654, 1654,
     1654, 3915, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 3915, 1654, 1654,
     1654, 1654, 1654, 1654, 1657, 1657, 3915, 1657, 1657, 1657,
     1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657,
     1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657,
     1657, 1657, 1657, 1657, 1657, 1657, 1658, 1658, 3915, 1658,

     1658, 3915, 1658, 1658, 1658, 3915, 3915, 3915, 1658, 1658,
     1658, 3915, 1658, 1658, 1658, 1658, 1658, 1658, 1658, 1658,
     1658, 1658, 1658, 1658, 1658, 1658, 1658, 1658, 1659, 1659,
     3915, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659,
     3915, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659,
     3915, 1659, 1659, 3915, 1659, 1659, 1659, 1659, 1659, 1659,
     1667, 1667, 3915, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 3915, 1667, 1667, 3915, 1667, 1667, 1667, 1667,
     1667, 1667, 1695, 1695, 1695, 3915, 3915, 3915, 1695, 3915,

     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 1695, 1695, 3915, 3915, 3915, 3915,
     3915, 3915, 1695, 1701, 1701, 1701, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 1701, 3915, 1701, 3915, 3915, 1701, 3915,
     3915, 3915, 3915, 3915, 3915, 1701, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 1701, 1702, 1702, 1702, 1702, 1702, 1702,
     1702, 1702, 1702, 1702, 1702, 1702, 1702, 1702, 1702, 1702,
     1702, 1702, 1702, 1702, 1702, 1702, 1702, 1702, 1702, 1702,
     1702, 1702, 1702, 1702, 1702, 1702, 1706, 1706, 1706, 3915,
     3915, 3915, 1706, 3915, 3915, 3915, 3915, 3915, 3915, 3915,

     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1706, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 1706, 1710, 1710, 1710,
     3915, 3915, 3915, 3915, 3915, 3915, 1710, 3915, 3915, 3915,
     3915, 3915, 1710, 3915, 3915, 3915, 3915, 3915, 3915, 1710,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 1710, 1714, 3915,
     3915, 3915, 3915, 3915, 1714, 1714, 3915, 3915, 3915, 1714,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     1714, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1714, 1720,
     1720, 1720, 3915, 3915, 3915, 1720, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,

     3915, 1720, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1720,
     1723, 1723, 1723, 1723, 3915, 3915, 1723, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 1723, 3915, 3915, 3915,
     3915, 3915, 1723, 3915, 3915, 3915, 3915, 3915, 3915, 1723,
     1723, 1725, 1725, 1725, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 1725, 1725, 3915, 3915,
     3915, 3915, 3915, 1725, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 1725, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735,
     1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735,
     1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735,

     1735, 1735, 1735, 1735, 1741, 1741, 3915, 1741, 1741, 1741,
     1741, 1741, 1741, 1741, 1741, 1741, 3915, 1741, 1741, 3915,
     1741, 1741, 1741, 1741, 1741, 1741, 3915, 1741, 1741, 3915,
     1741, 1741, 1741, 1741, 1741, 1741, 1762, 1762, 1762, 1762,
     1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762,
     1762, 1762, 3915, 1762, 1762, 1762, 1762, 1762, 1762, 3915,
     1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762, 1765, 1765,
     3915, 1765, 1765, 1765, 1765, 3915, 1765, 1765, 1765, 1765,
     3915, 1765, 1765, 3915, 1765, 1765, 1765, 3915, 1765, 1765,
     3915, 1765, 1765, 3915, 3915, 1765, 1765, 1765, 1765, 1765,

     1126, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1126,
     3915, 3915, 3915, 3915, 3915, 1126, 3915, 3915, 3915, 3915,
     3915, 3915, 1126, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     1126, 1147, 1147, 1147, 3915, 3915, 3915, 1147, 3915, 3915,
     3915, 3915, 3915, 3915, 1147, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 1147, 3915, 3915, 3915, 3915, 3915, 3915,
     1147, 1147, 1140, 1140, 1140, 3915, 3915, 3915, 1140, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 1140, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 1140, 1779, 1779, 1779, 3915, 3915, 3915, 3915,

     3915, 3915, 1779, 3915, 3915, 1779, 3915, 3915, 1779, 3915,
     1779, 1779, 3915, 3915, 3915, 1779, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 1779, 1153, 1153, 1153, 3915, 3915, 3915,
     3915, 3915, 3915, 1153, 3915, 3915, 1153, 1153, 3915, 1153,
     1153, 1153, 1153, 3915, 3915, 3915, 1153, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 1153, 1782, 1782, 1782, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1782, 3915,
     1782, 3915, 3915, 3915, 3915, 3915, 3915, 1782, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 1782, 1785, 1785, 1785, 3915,
     3915, 3915, 1785, 3915, 3915, 3915, 3915, 3915, 3915, 3915,

     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1785, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 1785, 1159, 1159, 1159,
     3915, 3915, 3915, 1159, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1159,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 1159, 1787, 1787,
     1787, 3915, 3915, 3915, 3915, 3915, 3915, 1787, 3915, 3915,
     1787, 3915, 3915, 1787, 3915, 1787, 1787, 3915, 3915, 3915,
     1787, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1787, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 3915, 1163, 1163, 1163, 1163, 1163, 1163, 1163,

     1163, 1163, 1163, 1163, 1163, 1163, 1163, 3915, 1163, 1163,
     1163, 1169, 1169, 1169, 3915, 3915, 3915, 1169, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 1169, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 1169, 1789, 1789, 1789, 3915, 3915, 3915, 3915, 3915,
     3915, 1789, 3915, 3915, 3915, 3915, 3915, 1789, 3915, 3915,
     3915, 3915, 3915, 3915, 1789, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 1789, 1180, 1180, 1180, 3915, 3915, 3915, 3915,
     3915, 3915, 1180, 3915, 3915, 3915, 3915, 3915, 1180, 1180,
     3915, 3915, 3915, 3915, 3915, 1180, 3915, 3915, 3915, 3915,

     3915, 3915, 3915, 1180, 1190, 3915, 3915, 3915, 1190, 3915,
     1190, 3915, 3915, 1190, 3915, 3915, 3915, 1190, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 1190, 1193, 1193, 3915, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1209, 1209,
     1209, 3915, 3915, 3915, 1209, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     1209, 3915, 3915, 3915, 3915, 1209, 3915, 3915, 1209, 1808,
     1808, 1808, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,

     3915, 3915, 1808, 3915, 1808, 1808, 3915, 3915, 3915, 3915,
     3915, 1808, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1808,
     1223, 1223, 1223, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 1223, 3915, 1223, 1223, 3915, 3915, 3915,
     3915, 3915, 1223, 3915, 1223, 3915, 3915, 3915, 3915, 3915,
     1223, 1812, 1812, 1812, 3915, 3915, 3915, 1812, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 1812, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 1812, 1822, 1822, 3915, 1822, 1822, 1822, 1822, 1822,
     1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822,

     1822, 1822, 1822, 1822, 1822, 1822, 1822, 3915, 1822, 1822,
     1822, 1822, 1822, 1822, 1824, 1824, 3915, 1824, 1824, 1824,
     1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824,
     1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824, 1824,
     1824, 1824, 1824, 1824, 1824, 1824, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1264, 1264,
     1264, 3915, 3915, 3915, 1264, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,

     1264, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1264, 1864,
     1864, 1864, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 1864, 3915, 3915, 1864, 3915, 3915,
     3915, 1864, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1864,
     1297, 1297, 1297, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 1297, 1297, 3915, 1297, 3915,
     3915, 3915, 1297, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     1297, 1868, 1868, 3915, 1868, 1868, 1868, 1868, 1868, 1868,
     1868, 1868, 1868, 1868, 1868, 1868, 1868, 1868, 1868, 1868,
     1868, 1868, 1868, 1868, 1868, 1868, 1868, 1868, 1868, 1868,

     1868, 1868, 1868, 1279, 1279, 1279, 3915, 3915, 3915, 1279,
     1279, 3915, 3915, 3915, 1279, 3915, 3915, 3915, 3915, 1279,
     3915, 3915, 3915, 3915, 3915, 1279, 3915, 3915, 3915, 1279,
     3915, 3915, 3915, 1279, 1875, 1875, 1875, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 1875, 1875, 3915, 3915, 3915, 1875,
     1875, 3915, 1875, 3915, 3915, 3915, 1875, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 1875, 1893, 1893, 1893, 3915, 3915,
     3915, 3915, 3915, 3915, 1893, 3915, 3915, 3915, 1893, 3915,
     1893, 3915, 3915, 3915, 3915, 3915, 3915, 1893, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 1893, 1333, 1333, 3915, 1333,

     1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333,
     1333, 1333, 1333, 1333, 1333, 3915, 1333, 1333, 1333, 1333,
     1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1342, 1342,
     1342, 3915, 3915, 3915, 1342, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     1342, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1342, 1950,
     1950, 1950, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 1950, 3915, 3915, 1950, 3915, 3915,
     3915, 1950, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1950,
     1348, 1348, 1348, 3915, 3915, 3915, 3915, 3915, 3915, 3915,

     3915, 3915, 3915, 3915, 3915, 1348, 1348, 3915, 1348, 3915,
     3915, 3915, 1348, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     1348, 1388, 1388, 3915, 3915, 1388, 3915, 3915, 1388, 1388,
     3915, 1388, 1388, 1388, 1388, 1388, 3915, 1388, 1388, 1388,
     3915, 1388, 1388, 3915, 1388, 1388, 1388, 1388, 1388, 3915,
     3915, 1388, 1388, 1392, 1392, 3915, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1986, 1986, 3915, 1986, 1986,
     1986, 1986, 1986, 1986, 1986, 1986, 1986, 1986, 1986, 1986,

     1986, 1986, 1986, 1986, 1986, 1986, 1986, 1986, 1986, 1986,
     3915, 1986, 1986, 1986, 1986, 1986, 1986, 1988, 1988, 3915,
     1988, 1988, 1988, 1988, 1988, 1988, 1988, 1988, 1988, 1988,
     1988, 1988, 1988, 1988, 1988, 1988, 1988, 1988, 1988, 1988,
     1988, 1988, 1988, 1988, 1988, 1988, 1988, 1988, 1988, 1993,
     1993, 3915, 1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993,
     1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993,
     1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993,
     1993, 1405, 1405, 1405, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 1405, 3915, 1405, 1405, 3915, 3915,

     3915, 3915, 3915, 1405, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 1405, 1999, 1999, 1999, 3915, 3915, 3915, 1999, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 1999, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 1999, 1412, 1412, 1412, 3915, 3915, 3915, 1412,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 1412, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 1412, 1417, 1417, 1417, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1417,
     1417, 3915, 3915, 3915, 3915, 3915, 1417, 3915, 3915, 3915,

     3915, 3915, 3915, 3915, 1417, 1418, 1418, 3915, 1418, 1418,
     3915, 3915, 1418, 1418, 3915, 1418, 1418, 1418, 1418, 1418,
     3915, 1418, 1418, 1418, 3915, 1418, 1418, 3915, 1418, 1418,
     3915, 1418, 1418, 3915, 3915, 1418, 1418, 2003, 2003, 3915,
     2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003,
     2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003,
     2003, 2003, 3915, 2003, 2003, 2003, 2003, 2003, 2003, 2005,
     2005, 3915, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005,
     2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005,
     2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005,

     2005, 1447, 1447, 3915, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 3915, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1460, 1460, 3915, 1460, 1460,
     3915, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 3915,
     1460, 3915, 1460, 1460, 1460, 1460, 1460, 1463, 1463, 3915,

     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1473,
     3915, 3915, 3915, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 3915, 1473, 3915, 3915, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1483, 3915, 1483, 3915, 3915, 3915, 3915, 3915, 3915,
     1483, 3915, 1483, 3915, 3915, 3915, 3915, 3915, 1483, 1487,
     1487, 1487, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 1487, 3915, 1487, 3915, 3915, 3915, 3915, 3915,

     3915, 1487, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1487,
     2026, 2026, 2026, 3915, 3915, 3915, 2026, 3915, 3915, 3915,
     3915, 2026, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 2026, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     2026, 1490, 1490, 1490, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 1490, 3915, 3915, 3915,
     3915, 3915, 3915, 1490, 3915, 1490, 3915, 3915, 3915, 3915,
     3915, 1490, 1488, 1488, 1488, 3915, 3915, 3915, 1488, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 1488, 3915, 3915, 3915, 3915, 3915,

     3915, 3915, 1488, 1501, 1501, 3915, 1501, 1501, 1501, 1501,
     1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501,
     1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501,
     1501, 1501, 1501, 1501, 1501, 1505, 3915, 3915, 3915, 1505,
     3915, 3915, 3915, 3915, 3915, 3915, 1505, 3915, 3915, 3915,
     3915, 3915, 3915, 1505, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 1505, 1510, 1510, 3915, 1510, 1510, 3915, 1510, 1510,
     1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510,
     1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510,
     1510, 1510, 1510, 1510, 1518, 1518, 1518, 1518, 1518, 1518,

     1518, 1518, 1518, 1518, 1518, 3915, 1518, 1518, 1518, 1518,
     1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518,
     1518, 1518, 1518, 1518, 1518, 1518, 1525, 1525, 1525, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 1525, 1525, 3915, 3915, 3915, 3915, 3915, 1525, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 1525, 1527, 1527, 1527,
     1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 3915, 1527,
     1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527,
     1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1539,
     1539, 3915, 1539, 3915, 3915, 3915, 1539, 3915, 3915, 3915,

     3915, 3915, 3915, 3915, 1539, 2052, 3915, 3915, 3915, 3915,
     3915, 3915, 2052, 3915, 3915, 3915, 2052, 2052, 3915, 3915,
     2052, 2052, 3915, 3915, 3915, 2052, 3915, 2052, 2061, 2061,
     3915, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 3915, 2061, 2061, 2061, 2061, 2061, 2061,
     2063, 2063, 3915, 2063, 2063, 2063, 2063, 2063, 2063, 2063,
     2063, 2063, 2063, 2063, 2063, 2063, 2063, 2063, 2063, 2063,
     2063, 2063, 2063, 2063, 2063, 2063, 2063, 2063, 2063, 2063,
     2063, 2063, 1565, 1565, 1565, 3915, 3915, 3915, 1565, 3915,

     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 1565, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 1565, 1568, 1568, 1568, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 1568, 3915, 3915, 3915, 1568, 3915,
     3915, 3915, 3915, 3915, 3915, 1568, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 1568, 1574, 1574, 1574, 3915, 3915, 3915,
     1574, 1574, 3915, 3915, 3915, 1574, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 1574, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 1574, 1576, 1576, 1576, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,

     1576, 3915, 3915, 3915, 3915, 3915, 3915, 1576, 1576, 3915,
     3915, 3915, 3915, 3915, 3915, 1576, 2071, 2071, 3915, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2077, 2077,
     2077, 3915, 3915, 3915, 2077, 3915, 3915, 3915, 3915, 2077,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     2077, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 2077, 1586,
     1586, 1586, 3915, 3915, 3915, 1586, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,

     3915, 1586, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1586,
     1591, 1591, 1591, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 1591, 1591, 3915, 3915, 3915,
     3915, 3915, 1591, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     1591, 1598, 1598, 3915, 1598, 1598, 1598, 1598, 1598, 1598,
     1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598,
     1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598,
     1598, 1598, 1598, 1600, 3915, 3915, 3915, 1600, 3915, 3915,
     1600, 1600, 3915, 3915, 3915, 1600, 1600, 1600, 3915, 1600,
     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,

     1600, 1600, 1600, 1600, 1600, 2083, 2083, 3915, 2083, 2083,
     2083, 2083, 2083, 2083, 2083, 2083, 2083, 2083, 2083, 2083,
     2083, 2083, 2083, 2083, 2083, 2083, 2083, 2083, 2083, 2083,
     3915, 2083, 2083, 2083, 2083, 2083, 2083, 2085, 2085, 3915,
     2085, 2085, 2085, 2085, 2085, 2085, 2085, 2085, 2085, 2085,
     2085, 2085, 2085, 2085, 2085, 2085, 2085, 2085, 2085, 2085,
     2085, 2085, 2085, 2085, 2085, 2085, 2085, 2085, 2085, 1622,
     1622, 3915, 1622, 1622, 3915, 1622, 1622, 1622, 3915, 3915,
     3915, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622,
     1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622,

     1622, 2092, 2092, 3915, 2092, 2092, 2092, 2092, 2092, 2092,
     2092, 2092, 2092, 2092, 2092, 2092, 2092, 2092, 2092, 2092,
     2092, 2092, 2092, 2092, 2092, 2092, 3915, 2092, 2092, 2092,
     2092, 2092, 2092, 2094, 2094, 3915, 2094, 2094, 2094, 2094,
     2094, 2094, 2094, 2094, 2094, 2094, 2094, 2094, 2094, 2094,
     2094, 2094, 2094, 2094, 2094, 2094, 2094, 2094, 2094, 2094,
     2094, 2094, 2094, 2094, 2094, 1627, 1627, 3915, 1627, 1627,
     3915, 1627, 1627, 1627, 3915, 1627, 1627, 1627, 1627, 1627,
     3915, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627,
     1627, 1627, 1627, 3915, 3915, 1627, 1627, 2096, 2096, 3915,

     2096, 2096, 2096, 2096, 2096, 2096, 2096, 2096, 2096, 2096,
     2096, 2096, 2096, 2096, 2096, 2096, 2096, 2096, 2096, 2096,
     2096, 2096, 3915, 2096, 2096, 2096, 2096, 2096, 2096, 2098,
     2098, 3915, 2098, 2098, 2098, 2098, 2098, 2098, 2098, 2098,
     2098, 2098, 2098, 2098, 2098, 2098, 2098, 2098, 2098, 2098,
     2098, 2098, 2098, 2098, 2098, 2098, 2098, 2098, 2098, 2098,
     2098, 1630, 1630, 3915, 1630, 1630, 3915, 1630, 1630, 1630,
     3915, 3915, 3915, 1630, 1630, 1630, 3915, 1630, 1630, 1630,
     1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630,
     1630, 1630, 1630, 2100, 2100, 3915, 2100, 2100, 2100, 2100,

     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 3915, 2100,
     2100, 2100, 2100, 2100, 2100, 2102, 2102, 3915, 2102, 2102,
     2102, 2102, 2102, 2102, 2102, 2102, 2102, 2102, 2102, 2102,
     2102, 2102, 2102, 2102, 2102, 2102, 2102, 2102, 2102, 2102,
     2102, 2102, 2102, 2102, 2102, 2102, 2102, 1633, 1633, 3915,
     1633, 1633, 3915, 1633, 1633, 1633, 3915, 1633, 1633, 1633,
     1633, 1633, 3915, 1633, 1633, 1633, 1633, 1633, 1633, 1633,
     1633, 1633, 1633, 1633, 1633, 3915, 3915, 1633, 1633, 2104,
     2104, 3915, 2104, 2104, 2104, 2104, 2104, 2104, 2104, 2104,

     2104, 2104, 2104, 2104, 2104, 2104, 2104, 2104, 2104, 2104,
     2104, 2104, 2104, 2104, 3915, 2104, 2104, 2104, 2104, 2104,
     2104, 2106, 2106, 3915, 2106, 2106, 2106, 2106, 2106, 2106,
     2106, 2106, 2106, 2106, 2106, 2106, 2106, 2106, 2106, 2106,
     2106, 2106, 2106, 2106, 2106, 2106, 2106, 2106, 2106, 2106,
     2106, 2106, 2106, 2112, 2112, 3915, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112, 3915, 2112,
     2112, 2112, 2112, 2112, 2112, 2114, 2114, 3915, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,

     2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2114, 1654, 1654, 3915,
     1654, 1654, 3915, 1654, 1654, 1654, 3915, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
     1654, 1654, 3915, 1654, 1654, 1654, 1654, 1654, 1654, 1658,
     1658, 3915, 1658, 1658, 3915, 1658, 1658, 1658, 3915, 3915,
     3915, 1658, 1658, 1658, 3915, 1658, 1658, 1658, 1658, 1658,
     1658, 1658, 1658, 1658, 1658, 1658, 1658, 1658, 1658, 1658,
     1658, 1659, 1659, 3915, 1659, 1659, 1659, 1659, 1659, 1659,
     1659, 1659, 1659, 3915, 1659, 1659, 1659, 1659, 1659, 1659,

     1659, 1659, 1659, 3915, 1659, 1659, 3915, 1659, 1659, 1659,
     1659, 1659, 1659, 1667, 1667, 3915, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 3915, 1667, 1667, 3915, 1667,
     1667, 1667, 1667, 1667, 1667, 1695, 1695, 1695, 3915, 3915,
     3915, 1695, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 1695, 1695, 3915,
     3915, 3915, 3915, 3915, 3915, 1695, 2133, 2133, 2133, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 2133, 3915, 2133, 3915,
     3915, 2133, 3915, 3915, 3915, 3915, 3915, 3915, 2133, 3915,

     3915, 3915, 3915, 3915, 3915, 3915, 2133, 1702, 1702, 1702,
     1702, 1702, 1702, 1702, 1702, 1702, 1702, 1702, 1702, 1702,
     1702, 1702, 1702, 1702, 1702, 1702, 1702, 1702, 1702, 1702,
     1702, 1702, 1702, 1702, 1702, 1702, 1702, 1702, 1702, 1701,
     1701, 1701, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1701,
     3915, 1701, 3915, 3915, 1701, 3915, 3915, 3915, 3915, 3915,
     3915, 1701, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1701,
     1706, 1706, 1706, 3915, 3915, 3915, 1706, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 1706, 3915, 3915, 3915, 3915, 3915, 3915, 3915,

     1706, 2137, 2137, 2137, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 2137, 3915, 3915, 3915,
     3915, 3915, 3915, 2137, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 2137, 1710, 1710, 1710, 3915, 3915, 3915, 3915, 3915,
     3915, 1710, 3915, 3915, 3915, 3915, 3915, 1710, 3915, 3915,
     3915, 3915, 3915, 3915, 1710, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 1710, 1720, 1720, 1720, 3915, 3915, 3915, 1720,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 1720, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 1720, 1725, 1725, 1725, 3915, 3915, 3915,

     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1725,
     1725, 3915, 3915, 3915, 3915, 3915, 1725, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 1725, 1735, 1735, 1735, 1735, 1735,
     1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735,
     1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735,
     1735, 1735, 1735, 1735, 1735, 1735, 1735, 1741, 1741, 3915,
     1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 3915,
     1741, 1741, 3915, 1741, 1741, 1741, 1741, 1741, 1741, 3915,
     1741, 1741, 3915, 1741, 1741, 1741, 1741, 1741, 1741, 1762,
     1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762,

     1762, 1762, 1762, 1762, 3915, 3915, 1762, 1762, 1762, 1762,
     1762, 1762, 3915, 1762, 1762, 1762, 1762, 1762, 1762, 1762,
     1762, 1765, 1765, 3915, 1765, 1765, 1765, 1765, 3915, 1765,
     1765, 1765, 1765, 3915, 1765, 1765, 3915, 1765, 1765, 1765,
     3915, 1765, 1765, 3915, 1765, 1765, 3915, 3915, 1765, 1765,
     1765, 1765, 1765, 1779, 1779, 1779, 3915, 3915, 3915, 3915,
     3915, 3915, 1779, 3915, 3915, 1779, 3915, 3915, 1779, 3915,
     1779, 1779, 3915, 3915, 3915, 1779, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 1779, 2168, 2168, 2168, 3915, 3915, 3915,
     3915, 3915, 3915, 2168, 3915, 3915, 2168, 3915, 3915, 2168,

     2168, 2168, 2168, 3915, 3915, 3915, 2168, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 2168, 1782, 1782, 1782, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1782, 3915,
     1782, 3915, 3915, 3915, 3915, 3915, 3915, 1782, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 1782, 1785, 1785, 1785, 3915,
     3915, 3915, 1785, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1785, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 1785, 1780, 1780, 1780,
     1780, 3915, 3915, 1780, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 1780, 3915, 3915, 3915, 3915, 3915, 1780,

     3915, 3915, 3915, 3915, 3915, 3915, 1780, 1780, 1787, 1787,
     1787, 3915, 3915, 3915, 3915, 3915, 3915, 1787, 3915, 3915,
     1787, 3915, 3915, 1787, 3915, 1787, 1787, 3915, 3915, 3915,
     1787, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1787, 1789,
     1789, 1789, 3915, 3915, 3915, 3915, 3915, 3915, 1789, 3915,
     3915, 3915, 3915, 3915, 1789, 3915, 3915, 3915, 3915, 3915,
     3915, 1789, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1789,
     2170, 2170, 2170, 3915, 3915, 3915, 3915, 3915, 3915, 2170,
     3915, 3915, 3915, 3915, 3915, 2170, 2170, 3915, 3915, 3915,
     3915, 3915, 2170, 3915, 3915, 3915, 3915, 3915, 3915, 3915,

     2170, 2171, 2171, 2171, 2171, 2171, 2171, 2171, 2171, 2171,
     2171, 2171, 2171, 3915, 2171, 2171, 3915, 2171, 2171, 2171,
     2171, 2171, 2171, 2171, 2171, 2171, 2171, 2171, 2171, 2171,
     2171, 2171, 2171, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 3915, 2173,
     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
     2173, 2173, 2173, 2173, 2173, 1790, 1790, 1790, 1790, 3915,
     3915, 1790, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 1790, 3915, 3915, 3915, 3915, 3915, 1790, 3915, 3915,
     3915, 3915, 3915, 3915, 1790, 1790, 1180, 1180, 1180, 3915,

     3915, 3915, 3915, 3915, 3915, 1180, 3915, 3915, 3915, 3915,
     3915, 1180, 1180, 3915, 3915, 3915, 3915, 3915, 1180, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 1180, 1190, 3915, 3915,
     3915, 1190, 3915, 1190, 3915, 3915, 1190, 3915, 3915, 3915,
     1190, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1190, 2187,
     2187, 2187, 2187, 3915, 3915, 2187, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 2187, 3915, 3915, 3915, 3915,
     3915, 2187, 3915, 3915, 3915, 3915, 3915, 3915, 2187, 2187,
     1808, 1808, 1808, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 1808, 3915, 1808, 1808, 3915, 3915, 3915,

     3915, 3915, 1808, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     1808, 1812, 1812, 1812, 3915, 3915, 3915, 1812, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 1812, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 1812, 2189, 2189, 2189, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 2189, 2189, 3915,
     3915, 3915, 3915, 3915, 2189, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 2189, 2197, 2197, 3915, 2197, 2197, 2197, 2197,
     2197, 2197, 2197, 2197, 2197, 2197, 2197, 2197, 2197, 2197,
     2197, 2197, 2197, 2197, 2197, 2197, 2197, 2197, 3915, 2197,

     2197, 2197, 2197, 2197, 2197, 1271, 1271, 1271, 1271, 3915,
     3915, 1271, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 1271, 3915, 3915, 3915, 3915, 3915, 1271, 3915, 3915,
     3915, 3915, 3915, 3915, 1271, 1271, 1864, 1864, 1864, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 1864, 3915, 3915, 1864, 3915, 3915, 3915, 1864, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 1864, 1868, 1868, 3915,
     1868, 1868, 1868, 1868, 1868, 1868, 1868, 1868, 1868, 1868,
     1868, 1868, 1868, 1868, 1868, 1868, 1868, 1868, 1868, 1868,
     1868, 1868, 1868, 1868, 1868, 1868, 1868, 1868, 1868, 2249,

     2249, 2249, 3915, 3915, 3915, 2249, 2249, 3915, 3915, 3915,
     2249, 3915, 3915, 3915, 3915, 2249, 3915, 3915, 3915, 3915,
     3915, 2249, 3915, 3915, 3915, 2249, 3915, 3915, 3915, 2249,
     2252, 2252, 2252, 3915, 3915, 3915, 2252, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 2252, 3915, 3915, 3915,
     3915, 3915, 2252, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     2252, 2258, 2258, 2258, 3915, 3915, 3915, 2258, 3915, 3915,
     3915, 2258, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 2258, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 2258, 1875, 1875, 1875, 3915, 3915, 3915, 3915, 3915,

     3915, 3915, 1875, 1875, 3915, 3915, 3915, 1875, 1875, 3915,
     1875, 3915, 3915, 3915, 1875, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 1875, 2260, 3915, 3915, 3915, 3915, 3915, 3915,
     2260, 3915, 3915, 3915, 2260, 2260, 3915, 3915, 2260, 2260,
     3915, 3915, 3915, 2260, 3915, 2260, 2262, 2262, 2262, 2262,
     2262, 2262, 2262, 2262, 2262, 2262, 2262, 2262, 3915, 2262,
     2262, 3915, 2262, 2262, 2262, 2262, 2262, 2262, 2262, 2262,
     2262, 2262, 2262, 2262, 2262, 2262, 2262, 2262, 2268, 2268,
     2268, 2268, 2268, 2268, 2268, 2268, 2268, 2268, 2268, 2268,
     2268, 2268, 2268, 3915, 2268, 2268, 2268, 2268, 2268, 2268,

     2268, 2268, 2268, 2268, 2268, 2268, 2268, 2268, 2268, 2268,
     1893, 1893, 1893, 3915, 3915, 3915, 3915, 3915, 3915, 1893,
     3915, 3915, 3915, 1893, 3915, 1893, 3915, 3915, 3915, 3915,
     3915, 3915, 1893, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     1893, 1297, 1297, 1297, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 1297, 1297, 3915, 1297,
     3915, 3915, 3915, 1297, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 1297, 1950, 1950, 1950, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 1950, 3915, 3915,
     1950, 3915, 3915, 3915, 1950, 3915, 3915, 3915, 3915, 3915,

     3915, 3915, 1950, 1345, 1345, 1345, 1345, 3915, 3915, 1345,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1345,
     3915, 3915, 3915, 3915, 3915, 1345, 3915, 3915, 3915, 3915,
     3915, 3915, 1345, 1345, 2352, 2352, 2352, 2352, 2352, 2352,
     2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352,
     2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352,
     2352, 2352, 2352, 2352, 2352, 2352, 1388, 1388, 1388, 1388,
     1388, 3915, 1388, 1388, 1388, 3915, 1388, 1388, 1388, 1388,
     1388, 3915, 1388, 1388, 1388, 3915, 1388, 1388, 3915, 1388,
     1388, 1388, 1388, 1388, 3915, 3915, 1388, 1388, 1392, 1392,

     3915, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     2357, 2357, 3915, 2357, 2357, 2357, 2357, 2357, 2357, 2357,
     2357, 2357, 2357, 2357, 2357, 2357, 2357, 2357, 2357, 2357,
     2357, 2357, 2357, 2357, 2357, 3915, 2357, 2357, 2357, 2357,
     2357, 2357, 1993, 1993, 3915, 1993, 1993, 1993, 1993, 1993,
     1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993,
     1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993,
     1993, 1993, 1993, 1993, 1999, 1999, 1999, 3915, 3915, 3915,

     1999, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 1999, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 1999, 2363, 2363, 2363, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 2363, 3915,
     2363, 2363, 3915, 3915, 3915, 3915, 3915, 2363, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 2363, 1405, 1405, 1405, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1405,
     3915, 1405, 1405, 3915, 3915, 3915, 3915, 3915, 1405, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 1405, 1415, 1415, 1415,
     1415, 3915, 3915, 1415, 3915, 3915, 3915, 3915, 3915, 3915,

     3915, 3915, 3915, 1415, 3915, 3915, 3915, 3915, 3915, 1415,
     3915, 3915, 3915, 3915, 3915, 3915, 1415, 1415, 2365, 2365,
     3915, 2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365,
     2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365,
     2365, 2365, 2365, 3915, 2365, 2365, 2365, 2365, 2365, 2365,
     1473, 3915, 3915, 3915, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 3915, 1473, 3915, 3915, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 2377, 3915, 2377, 3915, 3915, 3915, 3915, 3915,
     3915, 2377, 3915, 2377, 3915, 3915, 3915, 3915, 3915, 2377,

     2026, 2026, 2026, 3915, 3915, 3915, 2026, 3915, 3915, 3915,
     3915, 2026, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 2026, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     2026, 2378, 2378, 2378, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 2378, 3915, 2378, 3915, 3915, 3915,
     3915, 3915, 3915, 2378, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 2378, 1488, 1488, 1488, 3915, 3915, 3915, 1488, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 1488, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 1488, 2052, 3915, 3915, 3915, 3915, 3915, 3915,

     2052, 3915, 3915, 3915, 2052, 2052, 3915, 3915, 2052, 2052,
     3915, 3915, 3915, 2052, 3915, 2052, 1539, 1539, 3915, 1539,
     3915, 3915, 3915, 1539, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 1539, 2400, 2400, 3915, 2400, 2400, 2400, 2400, 2400,
     2400, 2400, 2400, 2400, 2400, 2400, 2400, 2400, 2400, 2400,
     2400, 2400, 2400, 2400, 2400, 2400, 2400, 3915, 2400, 2400,
     2400, 2400, 2400, 2400, 2071, 2071, 3915, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2077, 2077, 2077, 3915,

     3915, 3915, 2077, 3915, 3915, 3915, 3915, 2077, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 2077, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 2077, 2405, 2405, 2405,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 2405, 2405, 3915, 3915, 3915, 3915, 3915, 2405,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 2405, 1589, 1589,
     1589, 1589, 3915, 3915, 1589, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 1589, 3915, 3915, 3915, 3915, 3915,
     1589, 3915, 3915, 3915, 3915, 3915, 3915, 1589, 1589, 2407,
     2407, 3915, 2407, 2407, 2407, 2407, 2407, 2407, 2407, 2407,

     2407, 2407, 2407, 2407, 2407, 2407, 2407, 2407, 2407, 2407,
     2407, 2407, 2407, 2407, 3915, 2407, 2407, 2407, 2407, 2407,
     2407, 2414, 2414, 3915, 2414, 2414, 2414, 2414, 2414, 2414,
     2414, 2414, 2414, 2414, 2414, 2414, 2414, 2414, 2414, 2414,
     2414, 2414, 2414, 2414, 2414, 2414, 3915, 2414, 2414, 2414,
     2414, 2414, 2414, 2417, 2417, 3915, 2417, 2417, 2417, 2417,
     2417, 2417, 2417, 2417, 2417, 2417, 2417, 2417, 2417, 2417,
     2417, 2417, 2417, 2417, 2417, 2417, 2417, 2417, 3915, 2417,
     2417, 2417, 2417, 2417, 2417, 2420, 2420, 3915, 2420, 2420,
     2420, 2420, 2420, 2420, 2420, 2420, 2420, 2420, 2420, 2420,

     2420, 2420, 2420, 2420, 2420, 2420, 2420, 2420, 2420, 2420,
     3915, 2420, 2420, 2420, 2420, 2420, 2420, 2423, 2423, 3915,
     2423, 2423, 2423, 2423, 2423, 2423, 2423, 2423, 2423, 2423,
     2423, 2423, 2423, 2423, 2423, 2423, 2423, 2423, 2423, 2423,
     2423, 2423, 3915, 2423, 2423, 2423, 2423, 2423, 2423, 1633,
     1633, 3915, 1633, 1633, 3915, 1633, 1633, 1633, 3915, 1633,
     1633, 1633, 1633, 1633, 3915, 1633, 1633, 1633, 1633, 1633,
     1633, 1633, 1633, 1633, 1633, 1633, 1633, 3915, 3915, 1633,
     1633, 2429, 2429, 3915, 2429, 2429, 2429, 2429, 2429, 2429,
     2429, 2429, 2429, 2429, 2429, 2429, 2429, 2429, 2429, 2429,

     2429, 2429, 2429, 2429, 2429, 2429, 3915, 2429, 2429, 2429,
     2429, 2429, 2429, 2442, 2442, 2442, 2442, 2442, 2442, 2442,
     2442, 2442, 2442, 2442, 2442, 2442, 2442, 2442, 2442, 3915,
     2442, 2442, 2442, 2442, 2442, 2442, 3915, 2442, 2442, 2442,
     2442, 2442, 2442, 2442, 2442, 2133, 2133, 2133, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 2133, 3915, 2133, 3915, 3915,
     2133, 3915, 3915, 3915, 3915, 3915, 3915, 2133, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 2133, 2137, 2137, 2137, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 2137, 3915, 3915, 3915, 3915, 3915, 3915, 2137, 3915,

     3915, 3915, 3915, 3915, 3915, 3915, 2137, 1723, 1723, 1723,
     1723, 3915, 3915, 1723, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 1723, 3915, 3915, 3915, 3915, 3915, 1723,
     3915, 3915, 3915, 3915, 3915, 3915, 1723, 1723, 1741, 1741,
     3915, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741,
     3915, 1741, 1741, 3915, 1741, 1741, 1741, 1741, 1741, 1741,
     3915, 1741, 1741, 3915, 1741, 1741, 1741, 1741, 1741, 1741,
     2168, 2168, 2168, 3915, 3915, 3915, 3915, 3915, 3915, 2168,
     3915, 3915, 2168, 3915, 3915, 2168, 2168, 2168, 2168, 3915,
     3915, 3915, 2168, 3915, 3915, 3915, 3915, 3915, 3915, 3915,

     2168, 2170, 2170, 2170, 3915, 3915, 3915, 3915, 3915, 3915,
     2170, 3915, 3915, 3915, 3915, 3915, 2170, 2170, 3915, 3915,
     3915, 3915, 3915, 2170, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 2170, 1180, 1180, 1180, 3915, 3915, 3915, 3915, 3915,
     3915, 1180, 3915, 3915, 3915, 3915, 3915, 1180, 1180, 3915,
     3915, 3915, 3915, 3915, 1180, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 1180, 1190, 3915, 3915, 3915, 1190, 3915, 1190,
     3915, 3915, 1190, 3915, 3915, 3915, 1190, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 1190, 2187, 2187, 2187, 2187, 3915,
     3915, 2187, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,

     3915, 2187, 3915, 3915, 3915, 3915, 3915, 2187, 3915, 3915,
     3915, 3915, 3915, 3915, 2187, 2187, 2471, 2471, 2471, 3915,
     3915, 3915, 2471, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 2471, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 2471, 2475, 2475, 2475,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 2475, 2475, 3915, 3915, 3915, 3915, 3915, 2475,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 2475, 1808, 1808,
     1808, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 1808, 3915, 1808, 1808, 3915, 3915, 3915, 3915, 3915,

     1808, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1808, 2189,
     2189, 2189, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 2189, 2189, 3915, 3915, 3915, 3915,
     3915, 2189, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 2189,
     1812, 1812, 1812, 3915, 3915, 3915, 1812, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 1812, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     1812, 2482, 2482, 3915, 2482, 2482, 2482, 2482, 2482, 2482,
     2482, 2482, 2482, 2482, 2482, 2482, 2482, 2482, 2482, 2482,
     2482, 2482, 2482, 2482, 2482, 2482, 3915, 2482, 2482, 2482,

     2482, 2482, 2482, 2249, 2249, 2249, 3915, 3915, 3915, 2249,
     2249, 3915, 3915, 3915, 2249, 3915, 3915, 3915, 3915, 2249,
     3915, 3915, 3915, 3915, 3915, 2249, 3915, 3915, 3915, 2249,
     3915, 3915, 3915, 2249, 2534, 2534, 2534, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 2534,
     2534, 3915, 2534, 3915, 3915, 3915, 2534, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 2534, 2252, 2252, 2252, 3915, 3915,
     3915, 2252, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 2252, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 2252, 2538, 2538, 2538, 3915,

     3915, 3915, 3915, 3915, 3915, 3915, 2538, 3915, 3915, 3915,
     3915, 2538, 2538, 3915, 2538, 3915, 3915, 3915, 2538, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 2538, 2258, 2258, 2258,
     3915, 3915, 3915, 2258, 3915, 3915, 3915, 2258, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 2258,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 2258, 2541, 3915,
     3915, 3915, 2541, 3915, 3915, 3915, 3915, 2541, 3915, 3915,
     3915, 3915, 3915, 3915, 2541, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 2541, 2260, 3915, 3915, 3915, 3915, 3915, 3915,
     2260, 3915, 3915, 3915, 2260, 2260, 3915, 3915, 2260, 2260,

     3915, 3915, 3915, 2260, 3915, 2260, 2542, 2542, 2542, 2542,
     2542, 2542, 2542, 2542, 2542, 2542, 2542, 2542, 2542, 2542,
     2542, 2542, 2542, 2542, 2542, 2542, 2542, 2542, 2542, 2542,
     2542, 2542, 2542, 2542, 2542, 2542, 2542, 2542, 2544, 2544,
     3915, 2544, 2544, 2544, 2544, 2544, 2544, 2544, 2544, 2544,
     2544, 2544, 2544, 2544, 2544, 2544, 2544, 2544, 2544, 2544,
     2544, 2544, 2544, 2544, 2544, 2544, 2544, 2544, 2544, 2544,
     2547, 2547, 2547, 3915, 3915, 3915, 3915, 3915, 3915, 2547,
     3915, 3915, 3915, 2547, 3915, 2547, 3915, 3915, 3915, 3915,
     3915, 3915, 2547, 3915, 3915, 3915, 3915, 3915, 3915, 3915,

     2547, 1893, 1893, 1893, 3915, 3915, 3915, 3915, 3915, 3915,
     1893, 3915, 3915, 3915, 1893, 3915, 1893, 3915, 3915, 3915,
     3915, 3915, 3915, 1893, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 1893, 1297, 1297, 1297, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 1297, 1297, 3915,
     1297, 3915, 3915, 3915, 1297, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 1297, 2352, 2352, 2352, 2352, 2352, 2352, 2352,
     2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352,
     2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352, 2352,
     2352, 2352, 2352, 2352, 2352, 1388, 1388, 1388, 1388, 1388,

     3915, 1388, 1388, 1388, 3915, 1388, 1388, 1388, 1388, 1388,
     3915, 1388, 1388, 1388, 3915, 1388, 1388, 3915, 1388, 1388,
     1388, 1388, 1388, 3915, 3915, 1388, 1388, 1392, 1392, 3915,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 2628,
     2628, 3915, 2628, 2628, 2628, 2628, 2628, 2628, 2628, 2628,
     2628, 2628, 2628, 2628, 2628, 2628, 2628, 2628, 2628, 2628,
     2628, 2628, 2628, 2628, 3915, 2628, 2628, 2628, 2628, 2628,
     2628, 2631, 2631, 2631, 2631, 2631, 2631, 2631, 2631, 2631,

     2631, 2631, 2631, 2631, 2631, 2631, 2631, 3915, 2631, 2631,
     2631, 2631, 2631, 2631, 3915, 2631, 2631, 2631, 2631, 2631,
     2631, 2631, 2631, 2363, 2363, 2363, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 2363, 3915, 2363, 2363,
     3915, 3915, 3915, 3915, 3915, 2363, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 2363, 1405, 1405, 1405, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 1405, 3915, 1405,
     1405, 3915, 3915, 3915, 3915, 3915, 1405, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 1405, 2633, 2633, 3915, 2633, 2633,
     2633, 2633, 2633, 2633, 2633, 2633, 2633, 2633, 2633, 2633,

     2633, 2633, 2633, 2633, 2633, 2633, 2633, 2633, 2633, 2633,
     3915, 2633, 2633, 2633, 2633, 2633, 2633, 1473, 3915, 3915,
     3915, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 3915,
     1473, 3915, 3915, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 2377,
     3915, 2377, 3915, 3915, 3915, 3915, 3915, 3915, 2377, 3915,
     2377, 3915, 3915, 3915, 3915, 3915, 2377, 2378, 2378, 2378,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     2378, 3915, 2378, 3915, 3915, 3915, 3915, 3915, 3915, 2378,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 2378, 1539, 1539,

     3915, 1539, 3915, 3915, 3915, 1539, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 1539, 2659, 2659, 3915, 2659, 2659, 2659,
     2659, 2659, 2659, 2659, 2659, 2659, 2659, 2659, 2659, 2659,
     2659, 2659, 2659, 2659, 2659, 2659, 2659, 2659, 2659, 3915,
     2659, 2659, 2659, 2659, 2659, 2659, 2405, 2405, 2405, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 2405, 2405, 3915, 3915, 3915, 3915, 3915, 2405, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 2405, 2662, 2662, 3915,
     2662, 2662, 2662, 2662, 2662, 2662, 2662, 2662, 2662, 2662,
     2662, 2662, 2662, 2662, 2662, 2662, 2662, 2662, 2662, 2662,

     2662, 2662, 3915, 2662, 2662, 2662, 2662, 2662, 2662, 2665,
     2665, 3915, 2665, 2665, 2665, 2665, 2665, 2665, 2665, 2665,
     2665, 2665, 2665, 2665, 2665, 2665, 2665, 2665, 2665, 2665,
     2665, 2665, 2665, 2665, 3915, 2665, 2665, 2665, 2665, 2665,
     2665, 2667, 2667, 3915, 2667, 2667, 2667, 2667, 2667, 2667,
     2667, 2667, 2667, 2667, 2667, 2667, 2667, 2667, 2667, 2667,
     2667, 2667, 2667, 2667, 2667, 2667, 3915, 2667, 2667, 2667,
     2667, 2667, 2667, 2669, 2669, 3915, 2669, 2669, 2669, 2669,
     2669, 2669, 2669, 2669, 2669, 2669, 2669, 2669, 2669, 2669,
     2669, 2669, 2669, 2669, 2669, 2669, 2669, 2669, 3915, 2669,

     2669, 2669, 2669, 2669, 2669, 2671, 2671, 3915, 2671, 2671,
     2671, 2671, 2671, 2671, 2671, 2671, 2671, 2671, 2671, 2671,
     2671, 2671, 2671, 2671, 2671, 2671, 2671, 2671, 2671, 2671,
     3915, 2671, 2671, 2671, 2671, 2671, 2671, 1633, 1633, 3915,
     1633, 1633, 1633, 1633, 1633, 1633, 3915, 1633, 1633, 1633,
     1633, 1633, 3915, 1633, 1633, 1633, 1633, 1633, 1633, 1633,
     1633, 1633, 1633, 1633, 1633, 3915, 3915, 1633, 1633, 2675,
     2675, 3915, 2675, 2675, 2675, 2675, 2675, 2675, 2675, 2675,
     2675, 2675, 2675, 2675, 2675, 2675, 2675, 2675, 2675, 2675,
     2675, 2675, 2675, 2675, 3915, 2675, 2675, 2675, 2675, 2675,

     2675, 2679, 2679, 2679, 2679, 2679, 2679, 2679, 2679, 2679,
     2679, 2679, 2679, 2679, 2679, 2679, 2679, 3915, 2679, 2679,
     2679, 2679, 2679, 2679, 3915, 2679, 2679, 2679, 2679, 2679,
     2679, 2679, 2679, 1714, 3915, 3915, 3915, 3915, 3915, 1714,
     1714, 3915, 3915, 3915, 1714, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 1714, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 1714, 1741, 1741, 3915, 1741, 1741, 1741,
     1741, 1741, 1741, 1741, 1741, 1741, 3915, 1741, 1741, 3915,
     1741, 1741, 1741, 1741, 1741, 1741, 3915, 1741, 1741, 3915,
     1741, 1741, 1741, 1741, 1741, 1741, 2700, 2700, 2700, 2700,

     2700, 2700, 2700, 2700, 2700, 2700, 2700, 2700, 2700, 2700,
     2700, 2700, 3915, 2700, 2700, 2700, 2700, 2700, 2700, 3915,
     2700, 2700, 2700, 2700, 2700, 2700, 2700, 2700, 1180, 1180,
     1180, 3915, 3915, 3915, 3915, 3915, 3915, 1180, 3915, 3915,
     3915, 3915, 3915, 1180, 1180, 3915, 3915, 3915, 3915, 3915,
     1180, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1180, 1190,
     3915, 3915, 3915, 1190, 3915, 1190, 3915, 3915, 1190, 3915,
     3915, 3915, 1190, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     1190, 2471, 2471, 2471, 3915, 3915, 3915, 2471, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,

     3915, 3915, 3915, 2471, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 2471, 2475, 2475, 2475, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 2475, 2475, 3915,
     3915, 3915, 3915, 3915, 2475, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 2475, 1808, 1808, 1808, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 1808, 3915, 1808, 1808,
     3915, 3915, 3915, 3915, 3915, 1808, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 1808, 2249, 2249, 2249, 3915, 3915, 3915,
     2249, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     2249, 3915, 3915, 3915, 3915, 3915, 2249, 3915, 3915, 3915,

     3915, 3915, 3915, 3915, 2249, 2534, 2534, 2534, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     2534, 2534, 3915, 2534, 3915, 3915, 3915, 2534, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 2534, 2772, 3915, 3915, 3915,
     3915, 3915, 3915, 2772, 3915, 3915, 3915, 2772, 2772, 3915,
     3915, 2772, 2772, 3915, 3915, 3915, 2772, 3915, 2772, 2538,
     2538, 2538, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 2538,
     3915, 3915, 3915, 3915, 2538, 2538, 3915, 2538, 3915, 3915,
     3915, 2538, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 2538,
     2541, 3915, 3915, 3915, 2541, 3915, 3915, 3915, 3915, 2541,

     3915, 3915, 3915, 3915, 3915, 3915, 2541, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 2541, 2542, 2542, 2542, 2542, 2542,
     2542, 2542, 2542, 2542, 2542, 2542, 2542, 2542, 2542, 2542,
     2542, 2542, 2542, 2542, 2542, 2542, 2542, 2542, 2542, 2542,
     2542, 2542, 2542, 2542, 2542, 2542, 2542, 2544, 2544, 3915,
     2544, 2544, 2544, 2544, 2544, 2544, 2544, 2544, 2544, 2544,
     2544, 2544, 2544, 2544, 2544, 2544, 2544, 2544, 2544, 2544,
     2544, 2544, 2544, 2544, 2544, 2544, 2544, 2544, 2544, 2547,
     2547, 2547, 3915, 3915, 3915, 3915, 3915, 3915, 2547, 3915,
     3915, 3915, 2547, 3915, 2547, 3915, 3915, 3915, 3915, 3915,

     3915, 2547, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 2547,
     1893, 1893, 1893, 3915, 3915, 3915, 3915, 3915, 3915, 1893,
     3915, 3915, 3915, 1893, 3915, 1893, 3915, 3915, 3915, 3915,
     3915, 3915, 1893, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     1893, 1297, 1297, 1297, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 1297, 1297, 3915, 1297,
     3915, 3915, 3915, 1297, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 1297, 1388, 1388, 1388, 1388, 1388, 3915, 1388, 1388,
     1388, 3915, 1388, 1388, 1388, 1388, 1388, 3915, 1388, 1388,
     1388, 3915, 1388, 1388, 3915, 1388, 1388, 1388, 1388, 1388,

     3915, 3915, 1388, 1388, 1392, 1392, 3915, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1405, 1405, 1405, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 1405,
     3915, 1405, 1405, 3915, 3915, 3915, 3915, 3915, 1405, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 1405, 1467, 1467, 1467,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 1467, 3915, 3915, 3915, 3915, 3915, 3915, 1467,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 1467, 1473, 3915,

     3915, 3915, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     3915, 1473, 3915, 3915, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1539, 1539, 3915, 1539, 3915, 3915, 3915, 1539, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 1539, 2077, 2077, 2077, 3915,
     3915, 3915, 2077, 3915, 3915, 3915, 3915, 2077, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 2077, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 2077, 2873, 2873, 3915,
     2873, 2873, 3915, 2873, 2873, 2873, 2873, 2873, 2873, 2873,
     2873, 2873, 2873, 2873, 2873, 2873, 2873, 2873, 2873, 2873,

     2873, 2873, 2873, 2873, 2873, 2873, 2873, 2873, 2873, 1741,
     1741, 3915, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741,
     1741, 3915, 1741, 1741, 3915, 1741, 1741, 1741, 1741, 1741,
     1741, 3915, 1741, 1741, 3915, 1741, 1741, 1741, 1741, 1741,
     1741, 1180, 1180, 1180, 3915, 3915, 3915, 3915, 3915, 3915,
     1180, 3915, 3915, 3915, 3915, 3915, 1180, 1180, 3915, 3915,
     3915, 3915, 3915, 1180, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 1180, 2187, 2187, 2187, 2187, 3915, 3915, 2187, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 2187, 3915,
     3915, 3915, 3915, 3915, 2187, 3915, 3915, 3915, 3915, 3915,

     3915, 2187, 2187, 1808, 1808, 1808, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 1808, 3915, 1808, 1808,
     3915, 3915, 3915, 3915, 3915, 1808, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 1808, 2249, 2249, 2249, 3915, 3915, 3915,
     2249, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 2249, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 2249, 2772, 3915, 3915, 3915, 3915,
     3915, 3915, 2772, 3915, 3915, 3915, 2772, 2772, 3915, 3915,
     2772, 2772, 3915, 3915, 3915, 2772, 3915, 2772, 3238, 3238,
     3238, 3238, 3238, 3238, 3238, 3238, 3238, 3238, 3238, 3238,

     3238, 3238, 3238, 3238, 3915, 3238, 3238, 3238, 3238, 3238,
     3238, 3915, 3238, 3238, 3238, 3238, 3238, 3238, 3238, 3238,
     3418, 3418, 3418, 3418, 3418, 3418, 3418, 3418, 3418, 3418,
     3418, 3418, 3418, 3418, 3418, 3418, 3915, 3418, 3418, 3418,
     3418, 3418, 3418, 3915, 3418, 3418, 3418, 3418, 3418, 3418,
     3418, 3418, 3549, 3549, 3549, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3549, 3915, 3915,
     3915, 3549, 3915, 3915, 3549, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3549,  261, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,

     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915
    } ;

static yyconst flex_int16_t yy_chk[29969] =
    {   0,
        0,    0,    1,    0,    2,    0,    1,    1,    2,    2,
      400,    1,    0,    2,  400,  267,  277,  277,    0,    1,
      267,    2,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    5,    5,    5,    5,
      276,    5,    5,  399,  399,  276,    5,    6,    6,    6,
        6,   19,    6,    6,    5,   19,   19,    6,  298,  667,
       19,   19,   19,  298,  287,    6,   33,  287,   19,  311,
       33,   33,  565,  565,  311,   33,   19,   83,   19,  329,
       33,   83,   83,   33,  329,  269,   83,    5,  269,  333,
       33,  686,  333,  667,   83,  686,  269, 2428,    6,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   15,  442,   16,  339,   15,
       15,   16,   16,  339,   15, 2429,   16,  290,  290,  290,
      290,   20,   15,  348,   16,   20,   20,  316,  348, 1103,
       20,   20,   20,  316,   43,   43,   43,   43,   20,   43,
       43,  290,  316, 1103,   43,  356,   20, 2432,   20,  442,
      356,  759,   43,  759,   15, 1103,   16,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   23,  505,   24,  376,   23,
       23,   24,   24,  376,   23,  505,   24,  296,  296,  296,
      296,   34,   23,   37,   24,   34,   34,   37,   37, 1130,
       34,  369,   37,  378,  369,   34,  378,   84,   34,  391,
       37,   84,   84, 1130,  391,   34,   84, 1538,   37, 1538,
      281,  281,  281,  281,   84, 2433,   23,  281,   24,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   29,   29,   29,
       29,  405,   29,   29, 2434,  409,  405,   29,   30,   30,
       30,   30,  441,   30,   30,   29,  409,  441,   30,   31,
      456, 1481,  461,   31,   31,  456,   30,  461,   31,   31,
       32,  317, 1258,   31,   32,   32,   31,  317,  528,   32,
       32,  528, 1258,   31,   32,  476,  317,   32,   38,  536,

      476,  483,   38,   38,   32, 1481,  483,   38,   49,  489,
       29, 1129,   49,   49,  489,   38,   29,   49,   49,   49,
     1129,   30,   29,   38, 1539,   49, 1539,   30,  271,  271,
      271,  271,  317,   30,   44,   44,   44,   44,  496,   44,
       44, 1547,  552,  496,   44,  552,  271,   31,  288,  288,
      288,  288,   44,  536,  561,  288, 1547,  561,   32,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,

       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,

       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,

       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   45, 2436,   46,  513,   45,   45,   46,   46,  513,
       45,   45,   46,   46, 1174,   45,  520,   46,   45,  397,
       46,  520,  397, 1174,   45,   45,   46,   46,   47,   47,
       47,   47,  530,   47,   47,  597,  554,  530,   47,   47,
       47,  554,  599,   47,  584,  584,   47,   48,   48,   48,
       48,  564,   48,   48, 2437,  573,  564,   48,   48,   48,
      573, 2438,   48,   50,  579,   48,   51,   50,   50,  579,
       51,   51,   50,   50,   50,   51,  397,  397,  600,   45,
       50,   46,   52,   51,   55,  597,   52,   52,   55,   55,

       51,   52,  599,   55,   55,  272,  272,  272,  272,   52,
     2439,   55,  402,  402,  402,  402,   52,   56,   55,   55,
      101,   56,   56,  272,  101,  101,   56,   56, 1274,  101,
       85,   85, 1274,   85,   56,   85,   85,  101,  600,  588,
       85,   56,   56,   85,  588,  596,   86,   86,   85,   86,
      596,   86,   86, 2440,   51, 2445,   86,  589,  589,   86,
      292,  292,  292,  292,   86,  724,  745,  292,  724,  745,
       52,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   57, 1003, 1003,   58,   57,
       57,  601,   58,   58,   57,  988, 2446,   58,   59,   59,
       59,   59,   57,   59,   59,   58,  591,  756,   59,  591,
      756,  988,   60,   60,   60,   60,   59,   60,   60,  591,
      549, 2447,   60,  549,   59, 1543,  549, 1543,   59,  560,

       60, 1184,  560, 2448,   57,  560,   57,   58,   60,   58,
     1184,  601,   60,   61,   61,   61,   61,  614,   61,   61,
     1535,  603,  614,   61,   62,   62,   62,   62,   73,   62,
       62,   61,   73,   73,   62,  626, 1543,   73, 1535,   61,
      626,  602,   62,   61,  634,   73, 2041,   59,   59,  634,
       62,   74,  645,  602,   62,   74,   74,  645,  602, 2041,
       74,   60,   60, 1857,   63,   63,   63,   63,   74,   63,
       63,  603,   75,  653,   63,  663,   75,   75,  653, 1857,
      663,   75,   63, 2450,   75,  278,  278,  278,  278,   75,
       63,  602,   61,   61,   63,   64,   64,   64,   64, 1368,

       64,   64,  278,   62,   62,   64,   76,   73, 1368,  278,
       76,   76,  683,   64,  664,   76,  664,  683,   76, 1118,
     1118,   64,   75,   76,   91,   64,  696, 1483,   91,   91,
       74,  696,  664,   91,   91,   91,  291,  291,  291,  291,
     1801,   91,   92,   63,   63,   95,   92,   92, 1801,   95,
       95,   92,   92,   92,   95, 1841,   76, 1185,  698,   92,
      291, 1483,   95,  698,  278, 1841,  396,  396,  396,  396,
       95, 1185,   95,  396,   64,   64,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,

       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   69,   69,  703,   69,  712,   69,
       69,  703,  721,  712,   69,   70,   70,  721,   70,  734,
       70,   70,   69,  746,  734,   70,   71,   71,  746,   71,
       69,   71,   71,   70,   69, 2451,   71,  279,  279,  279,
      279,   70,   99,  783,   71,   70,   99,   99,  783, 1434,
     1434,   99,   71,  803,  279,   69,   71,  915,  803,   99,

      915,  279,   72,   72, 2455,   72,   70,   72,   72,   77,
      815,  826,   72,   77,   77,  815,  826,   71,   77,  917,
       72,   77,  917,   69,   69,  760,   77,  760,   72, 2457,
      917,   99,   72,   99,   70,   70, 2458, 1123,   78,  761,
     1123,  761,   78,   78, 1748,   71,   71,   78, 1123,  795,
       78, 1453,  795,   72,  795,   78,   79, 2459,  835,   77,
       79,   79,   80,  835, 1607,   79,   80,   80, 2232,  760,
     1748,   80, 2232,   79,  366,  366,  366,  366, 1607,   80,
       79,   72,   72,  761,  452,   79,   80,  452,   78,   81,
       81,   80,  847,   81,   81,   82,   82,  847,   81,   82,

       82, 1453,  856,  869,   82,   87,   81,  856,  869,   87,
       87,   88,   82,  879,   87,   88,   88, 2375,  879,  890,
       88,   89,   87, 1776,  890,   89,   89,   90,   88, 1827,
       89,   90,   90, 2460,   79, 2375,   90, 1776,   89,   81,
       80,  452,  452, 1827,   90,   82,   93,   93,   93,   93,
     2461,   93,   93,  366, 2162,   87,   93,   94,   94,   94,
       94,   88,   94,   94,   93, 1444, 1444,   94,  289,  289,
      289,  289,   93,  896,   93,   94, 1124,   96,  896, 1124,
     2162,   96,   96,   94,  100,   94,   96, 1124,  100,  100,
     1446, 1446,  289,  100,   96,  331,  331,  331,  331,   89,

       89,  100,   96,   97,   96,   90,   90,   97,   97, 1371,
      906,  912,   97,   97,   97,  906,  912,   98, 1371,  331,
       97,   98,   98,  331,  924,  933,   98,   98,   98,  924,
      933, 1423,  102,  100,   98,  100,  102,  102, 1250, 2477,
     1423,  102,  475,  475,  475,  475, 1250,  289, 1250,  102,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,

      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  105, 1254,  106,  943,  105,  105,
      106,  106,  943,  105, 1254,  106,  468,  468,  468,  468,
     1254,  105, 2478,  106,  107,  107,  107,  107,  953,  107,
      107,  468, 2479,  953,  107,  108,  108,  108,  108,  963,
      108,  108,  107, 2022,  963,  108,  109,  109,  109,  109,
      970,  109,  109,  108, 2480,  970,  109,  123, 1455,  109,
      978,  123,  123,  109,  109,  978,  123, 2090,  987,  302,

      302,  302,  302,  987,  123, 2090,  109, 2022,  996, 2481,
      302,  107,  105,  996,  106,  110,  110,  110,  110, 1002,
      110,  110,  108,  302, 1002,  110,  121,  109,  110, 1011,
      121,  121,  110,  110, 1011,  121, 1073,  122, 1455, 1073,
     2482,  122,  122,  121,  124,  110,  122,  989,  124,  124,
      989,  121, 2483,  124,  122, 1073,  445,  445,  445,  445,
      989,  124,  122,  445, 1833, 1833,  110,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,

      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,

      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,

      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,

      117,  117,  117,  119, 1507,  120, 1022,  119,  119,  120,
      120, 1022,  119, 1507,  120,  383,  383,  383,  383,  127,
      119,  128,  120,  127,  127,  128,  128, 1029,  127, 1039,
      128, 2488, 1029,  383, 1039,  131,  127,  132,  128,  131,
      131,  132,  132,  127,  131,  128,  132,  280,  280,  280,
      280,  135,  131, 1052,  132,  135,  135,  119, 1052,  120,
      135, 1064,  135,  119,  280,  120, 1064, 1072,  135, 1881,
     1881,  280, 1072,  119,  119,  120,  120,  525,  525,  525,
      525,  119,  119,  120,  120,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,

      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,

      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,

      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  136, 1083, 1088,
     1101,  136,  136, 1083, 1088, 1101,  136, 2489,  136,  526,
      526,  526,  526, 2490,  136,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,

      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  139,
     1102, 2491,  140,  139,  139, 1102,  140,  140,  139, 1107,
      139,  140, 1090,  140, 1107, 1090,  139,  141, 2492,  140,
      142,  141,  141, 1094,  142,  142,  141,  143, 1108,  142,
     1090,  143,  143, 1108,  141, 1094,  143,  142,  143, 2493,
     1094, 2494,  141,  145,  143,  142,  144,  145,  145,  146,
      144,  144,  145,  146,  146,  144, 1116,  144,  146, 1096,

      145, 1116, 1096,  144, 2148,  161,  146,  145, 1137,  161,
      161, 1137, 2389,  146,  161,  161,  384,  384,  384,  384,
     2389,  143,  161,  143, 1128, 1096,  162,  143, 2148, 1128,
      162,  162, 2495,  143,  384,  162,  162,  143,  143, 1845,
      144, 1119,  144,  162, 1119, 2496,  144,  524,  524,  524,
      524, 1845,  144,  524, 1119, 1845,  144,  144,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,

      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,

      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  151, 1187, 1456, 1156,
      151,  151, 1156, 1187, 1230,  151,  152,  151, 2377, 1230,
      152,  152, 1187,  151, 2497,  152,  163,  152, 2498, 1051,
      163,  163, 1051,  152, 1829,  163, 1051,  163, 1051,  151,
     1885, 1885, 1051,  163,  390,  390,  390,  390, 1829,  152,
      151,  151, 2377,  151,  534,  534,  534,  534, 1456, 2499,
      152,  152,  390,  152,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,

      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,

      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  157,  157,  157,  157,  173,  157,  157, 2500,
      173,  173,  157,  157,  157,  173,  173,  157,  157, 1201,
      157, 1211, 1201,  173, 1211, 2501, 1606,  157,  157,  164,
      157,  157,  157,  164,  164, 1606, 1190, 2503,  164,  167,
      164, 2443, 1190,  167,  167, 2163,  164, 1126,  167, 2443,

     1126, 1190,  157,  167,  157,  168,  167,  174, 1126,  168,
      168,  174,  174,  167,  168, 1228,  174,  174, 1228,  168,
     1248, 2163,  168, 1248,  174,  469,  469,  469,  469,  168,
     1457,  157,  157,  158,  158,  158,  158,  181,  158,  158,
      469,  181,  181,  158,  158,  158,  181, 1256,  158,  158,
     1256,  158, 1175, 2504,  181, 1175, 1175, 1775,  158,  158,
      181,  158,  158,  158,  169, 2009, 1775,  170,  169,  169,
     1175,  170,  170,  169,  169,  169,  170,  170,  170, 2009,
     1457,  169, 1236,  158,  170,  158, 2505, 1236, 1261,  169,
     1238,  169,  170,  195,  170, 1238, 1261,  195,  195, 2506,

     1826, 1261,  195,  195,  195,  609,  609,  609,  609, 1826,
      195, 2507,  158,  158,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  165,  165,

      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,

      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  175, 1428, 2508,  176,
      175,  175, 1428,  176,  176,  175,  175,  175,  176,  176,
      176, 1391, 1430,  175, 1391, 1430,  176,  177,  177,  177,
      177,  182,  177,  177, 2509,  182,  182,  177,  177,  177,

      182,  178,  178,  178,  178,  177,  178,  178,  182, 2264,
     2264,  178,  178,  178,  182,  175, 2271, 2271,  176,  178,
      179,  179,  179,  179,  223,  179,  179, 1436,  223,  223,
      179,  179, 1436,  223,  180,  180,  180,  180,  179,  180,
      180,  223, 2510, 2511,  180,  180,  179, 1419,  179,  223,
     1419,  223,  180, 1419,  544,  544,  544,  544, 2512, 2513,
      180,  544,  180,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,

      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,

      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  187, 2514,  188, 1503,  187,  187,  188,  188, 1503,
      187, 1505,  188,  187, 2515,  188, 1505,  189,  187,  190,
      188,  189,  189,  190,  190, 2516,  189, 1515,  190,  189,
     1515,  190, 1828,  191,  189,  192,  190,  191,  191,  192,
      192, 1828,  191, 1429,  192,  191, 1429,  192, 2517, 1429,
      191,  187,  192,  188,  193, 2008,  194, 1605,  193,  193,
      194,  194, 1605,  193, 2008,  194,  193,  189,  194,  190,

      196,  193, 1744,  194,  196,  196, 2518, 1744, 2519,  196,
      196,  196, 2521,  191,  197,  192,  198,  196,  197,  197,
      198,  198, 1846,  197, 1846,  198,  303,  303,  303,  303,
     1679,  197, 1846,  198,  193,  199,  194,  303,  200,  199,
      199, 2522,  200,  200,  199,  199,  199,  200,  200,  200,
      303, 1448,  199,  201, 1448,  200,  202,  201,  201, 2523,
      202,  202,  201, 1763, 1448,  202,  203,  203, 1763,  203,
      201,  203,  203,  202, 1853, 1679,  203,  203,  203, 1853,
     2525,  233,  303, 1243,  203,  233,  233, 2526, 1243, 1243,
      233, 1243,  197,  197,  198,  198,  204,  204,  233,  204,

      215,  204,  204, 1679,  215,  215,  204,  204,  204,  215,
      209,  209,  209,  209,  204,  209,  209,  215, 2527, 2528,
      209,  209,  209, 1528, 2011,  209, 1528, 1106,  209, 2012,
     1106,  201,  201, 2011,  202,  202,  205,  205,  205,  205,
     1106,  205,  205, 2012, 1192, 1106,  205,  205,  205,  215,
     1192,  215, 1672, 1106,  205,  210,  210,  210,  210, 1192,
      210,  210,  205, 2530,  205,  210,  210,  210, 2087, 1241,
      210,  211, 1241,  210,  212,  211,  211, 2087,  212,  212,
      211, 1537,  211,  212, 1537,  212, 2531, 1731,  211,  221,
     1731,  212, 1192,  221,  221, 1672, 2535, 2536,  221,  221,

      221,  282,  282,  282,  282,  282,  221, 2542,  282,  205,
      206,  206,  206,  206, 1351,  206,  206, 1351, 2543, 2088,
      206,  206,  206, 2147, 1672,  282, 1241, 1241,  206,  213,
      213,  213,  213, 2088,  213,  213,  206, 2147,  206,  213,
      213,  213, 1835, 1441,  213, 1835, 1441,  213,  214,  214,
      214,  214, 1372,  214,  214, 1372, 1372, 2545,  214,  214,
      214, 1441, 1569,  214,  222, 1569,  214, 1569,  222,  222,
     1372, 1351, 1351,  222,  222,  222,  610,  610,  610,  610,
     2568,  222,  282,  206,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,

      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  216, 1542,
      217, 1542,  216,  216,  217,  217, 2054,  216, 2054,  217,
      392,  392,  392,  392,  218,  216,  219,  217,  218,  218,
      219,  219, 1771,  218, 1641,  219, 1424, 1641,  392, 1424,

     1424,  218, 1352,  219,  220, 1352,  224, 2174,  220,  220,
      224,  224, 1542,  220, 1424,  224, 2174,  216, 1641,  216,
      217,  220, 2569,  224, 2054,  283,  283,  283,  283, 2593,
     1753,  224,  283,  224,  218,  225,  219, 1771, 1637,  225,
      225, 1637,  283, 2594,  225,  226,  226,  225,  226, 1637,
      226,  226,  225, 1068,  220,  226, 1068,  227,  226, 1352,
     1352,  227,  227,  226,  225, 1771,  227,  367,  367,  367,
      367, 2462,  228, 1753,  227,  226,  228,  228, 2608, 1736,
     1068,  228, 1736,  229,  367,  225,  227,  229,  229,  228,
     1742,  367,  229, 1742,  230, 2462,  226, 1736,  230,  230,

      229,  228, 1753,  230,  237, 2609,  283,  227,  237,  237,
     1068,  230,  229,  237, 1664,  251, 1742, 1664,  367,  251,
      251,  237,  228,  230,  251,  252,  251, 1664, 1068,  252,
      252, 2610,  251,  229,  252, 2611,  252,  656,  656,  656,
      656, 2612,  252, 2613,  230,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,

      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,

      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  238,  238,  238,

      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  239, 2393,  240, 2393,  239,  239,  240,  240, 2055,
      239, 2055,  240,  512,  512,  512,  512,  253,  239,  254,

      240,  253,  253,  254,  254,  512,  253, 2614,  254,  394,
      394,  394,  394,  255,  253, 2615,  254,  255,  255,  256,
     2055, 2616,  255,  256,  256, 2618, 2109, 2619,  256, 2109,
      255, 2393,  239,  394,  240, 2620,  256,  657,  657,  657,
      657,  725,  725,  725,  725,  840,  840,  840,  840,  239,
     2109,  240,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,

      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,

      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      245, 2622,  246, 2207,  245,  245,  246,  246, 2207,  245,
      245,  246,  246, 2270, 2463,  257,  257,  245,  257,  246,
      257,  257, 2270, 2143, 2628,  257, 2143, 2629,  257,  286,
      286,  286,  286,  257,  395,  395,  395,  395, 2463, 1508,
      286,  257, 1508, 1508,  286,  257,  286,  403,  403,  403,
      403, 2370, 2630,  286,  286,  286, 2633, 1508,  395, 2634,
     2370,  791,  791,  791,  791,  403,  257,  245,  791,  246,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,

      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  249,  249, 2641,  249, 1282,  249,
      249, 1282, 1282, 2642,  249,  250,  250, 2182,  250, 2643,
      250,  250,  249, 2182, 2645,  250, 1282,  497,  497,  497,

      497,  249, 2182,  250,  258,  258, 2646,  258, 1282,  258,
      258, 2647,  250, 2520,  258,  259,  497,  258, 2648,  259,
      259,  259,  258, 1737,  259, 2649, 1737,  259, 2520, 1282,
      258,  249,  259, 2650,  258, 2182,  359,  359,  359,  359,
      259, 1737,  250,  359,  259, 2465, 2651,  249, 1711,  249,
     2652, 1711, 2655,  249, 2465,  258, 2657, 1711,  250, 1727,
      250, 1711, 1727, 2659,  250,  259,  259,  260,  260, 2653,
      260, 2653,  260,  260,  260,  412, 2656,  260, 1727, 2656,
      260,  304,  304,  304,  304,  260, 2660,  293,  293,  293,
      293,  293,  304,  260,  293, 1713, 2662,  260, 1713,  359,

      401,  401,  401,  401, 1713,  304, 2663,  401, 1713,  401,
     2665,  293, 2394,  401, 2394,  359, 2666, 2667,  260,  260,
      408,  408,  408,  408,  401,  412,  413,  413,  413,  413,
     2668,  412,  443,  443,  443,  443,  412,  412,  408,  412,
      304,  444,  444,  444,  444,  449,  449,  449,  449, 2669,
      413,  449,  413,  401, 2670, 2671,  443,  792,  792,  792,
      792, 2394, 2672,  449,  792,  444, 2674, 2675,  293,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360, 2676,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,

      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360, 2524,
      360,  360,  360,  361,  361,  361,  361, 2654, 2524, 2654,
      361,  398,  398,  398,  398,  398, 2677, 2678,  398,  414,
      414,  414,  414,  417,  417,  417,  417,  422,  422,  422,
      422,  418,  418,  418,  418,  398,  419,  419,  419,  419,
     1769, 1764, 2680,  414, 1764,  414, 2654,  417, 2681,  417,

     1769,  422, 2682,  422, 1764,  418, 1730,  418, 1772, 1730,
      419, 1772,  419, 2683, 1769, 2684,  361,  420,  420,  420,
      420, 1772, 2685,  414, 2686, 1730, 1769,  417,  542,  542,
      542,  542,  361,  393,  393,  393,  393,  418, 2687,  393,
     2688,  420,  398,  420,  421,  421,  421,  421,  422, 2689,
     2243,  419,  542, 2243,  419, 2243, 2690,  393,  423,  423,
      423,  423, 2691,  393,  670,  670,  670,  670,  421, 2692,
      421,  450,  450,  450,  450, 1793,  420,  393, 1793, 2468,
      420,  670,  423,  393,  423, 2468, 2693,  393,  393,  450,
      393,  393,  393, 1793, 2468, 2694,  393,  393,  393,  393,

      393,  421,  393, 2697,  393,  393,  393,  393,  393, 2699,
     2701,  421,  424,  424,  424,  424, 2702,  423, 2703,  421,
     2704,  421,  425,  425,  425,  425,  426,  426,  426,  426,
     2705,  427,  427,  427,  427, 2707,  424, 2708,  424,  428,
      428,  428,  428, 2709, 1967, 2710,  425, 1967,  425, 2711,
      426, 2160,  426, 1726, 2160,  427, 1726,  427,  429,  429,
      429,  429, 1967,  428, 2160,  428, 2712,  430,  430,  430,
      430,  431,  431,  431,  431, 2695,  425, 1806, 2695,  424,
     1726, 2713,  429, 1806,  429,  433,  433,  433,  433,  426,
      427,  430, 1806,  430,  428,  431, 2714,  431, 2706,  427,

     2720,  432,  432,  432,  432,  427, 2721, 2722, 2724,  433,
     1726,  433,  434,  434,  434,  434,  446,  446,  446,  446,
      446, 1878, 2706,  446, 1878,  432,  430,  432, 1726,  429,
     2161, 2727,  429, 2161,  431, 2728,  434, 1806,  434, 2696,
      446, 2729, 2696, 2161,  431,  448,  448,  448,  448, 2730,
     2696, 1878,  433,  540,  540,  540,  540,  433, 2732, 2731,
      432, 2733, 2734,  451,  451,  451,  451,  434, 2731,  448,
      540,  448, 1878, 2356, 2735,  434, 2356,  540, 2356,  432,
      434,  451,  455,  455,  455,  455,  466,  466,  466,  466,
     2736, 2738,  541,  541,  541,  541, 2740,  446, 2426, 1879,

      455, 2426, 1879, 2426,  466,  492,  492,  492,  492,  541,
      543,  543,  543,  543, 2743, 2744,  541,  545,  545,  545,
      545,  545, 2745, 2746,  545,  547,  547,  547,  547, 1879,
     2747, 2749,  492, 2748,  543,  559,  559,  559,  559, 2750,
     2748,  545, 2751,  566,  566,  566,  566,  541, 2752,  547,
     1879, 2753, 2754,  559,  648,  648,  648,  648, 2755, 2756,
      492,  566,  492,  649,  649,  649,  649,  673,  673,  673,
      673, 2757,  492,  492, 2758, 2759,  492,  492,  492, 2760,
      492,  674,  674,  674,  674,  675,  675,  675,  675,  706,
      706,  706,  706, 2761,  711,  711,  711,  711,  545,  713,

      713,  713,  713,  739,  739,  739,  739,  706, 2762, 2763,
     2765,  648,  711,  737,  737,  737,  737,  713,  673, 2766,
      649,  774,  774,  774,  774, 2767, 2768,  739, 2769, 2772,
      737,  775,  775,  775,  775, 2775,  674, 2796, 2797,  774,
      675,  781,  781,  781,  781,  784,  784,  784,  784,  775,
      793,  793,  793,  793, 2819, 1759, 2820,  793, 1759,  781,
     2835, 2836, 2838,  784,  794,  794,  794,  794, 1759,  797,
      797,  797,  797, 1759, 2839, 2840,  797,  794,  797, 2842,
     2765, 1759,  797,  798,  798,  798,  798, 2843, 2845, 2851,
      798, 1355,  798, 2854, 1355, 1355,  798,  799,  799,  799,

      799, 2858, 2859, 2860,  799, 2863,  799, 2864, 2865, 1355,
      799,  800,  800,  800,  800, 2866, 2868, 2870,  800, 2872,
      800, 1355, 2873, 2874,  800,  802,  802,  802,  802,  804,
      804,  804,  804,  806,  806,  806,  806,  817,  817,  817,
      817, 2875, 1355,  802, 2875, 2876, 2877,  804,  817,  819,
      819,  819,  819,  820,  820,  820,  820,  821,  821,  821,
      821,  817, 2878, 2879,  821,  817, 2880,  824,  824,  824,
      824,  824, 2881,  819,  824, 2882, 2883,  820,  828,  828,
      828,  828, 2884,  806,  834,  834,  834,  834, 2885, 2886,
     2887,  824,  837,  837,  837,  837,  834,  841,  841,  841,

      841, 2888,  828,  837,  846,  846,  846,  846,  926,  926,
      926,  926,  927,  927,  927,  927, 2889,  837,  952,  952,
      952,  952,  846,  955,  955,  955,  955, 2890, 2894,  952,
      956,  956,  956,  956,  962,  962,  962,  962,  955, 2896,
     2897, 2898,  837,  952, 2869,  956, 2869, 2899,  824,  990,
      990,  990,  990, 2900, 2871,  997,  997, 2871,  997, 2901,
      997, 2871,  990,  997,  997, 2903, 2904,  990,  952, 1033,
     1033, 1033, 1033,  997, 2905,  997, 1033, 1034, 1034, 1034,
     1034, 2906, 2907, 2908, 1034, 2869, 1041, 1041, 1041, 1041,
     2909, 2912, 1043, 1043, 1043, 1043, 2915,  952, 1041, 1043,

     2917, 1041, 1044, 1044, 1044, 1044, 2922, 2923, 2924, 1044,
     1046, 1046, 1046, 1046, 1055, 1055, 1055, 1055, 2925, 1033,
     2926, 1046, 1056, 1056, 1056, 1056, 1104, 1034, 1057, 1057,
     1057, 1057, 2927, 2891, 2892, 1057, 2891, 2892, 1055, 2928,
     1060, 1060, 1060, 1060, 1060, 2892, 1056, 1060, 1066, 1066,
     1066, 1066, 2929, 1104, 1104, 2930, 1104, 2931, 1104, 2932,
     2934, 1104, 1104, 2936, 1060, 2938, 1880, 2939, 1105, 1880,
     2941, 1104, 1066, 1104, 1105, 1105, 2943, 1105, 2944, 1105,
     2946, 2947, 1105, 1105, 1120, 1120, 1120, 1120, 1127, 1127,
     1127, 1127, 1105, 2949, 1105, 2950, 1880, 1120, 1133, 1133,

     1133, 1133, 1120, 2951, 2952, 2953, 1127, 1134, 1134, 1134,
     1134, 1135, 1135, 1135, 1135, 1133, 2444, 1880, 1135, 2444,
     2955, 1060, 1133, 2444, 1134, 2444, 2958, 2959, 1135, 2444,
     2961, 1134, 1138, 1138, 1138, 1138, 2962, 2963, 2964, 1138,
     1139, 1139, 1139, 1139, 2966, 2961, 2981, 1139, 1140, 1140,
     1140, 1140, 1141, 1141, 1141, 1141, 2982, 2986, 1883, 1140,
     2987, 1883, 2991, 1140, 1142, 1142, 1142, 1142, 3013, 3014,
     3015, 1142, 3023, 1140, 1140, 3024, 1141, 1133, 1144, 1144,
     1144, 1144, 3029, 1145, 1145, 1145, 1145, 3030, 1883, 1144,
     1145, 3034, 1135, 1144, 3035, 1144, 1147, 1147, 1147, 1147,

     1145, 3036, 1144, 1144, 1144, 1146, 1146, 1146, 1146, 1883,
     3041, 3044, 1146, 1147, 1148, 1148, 1148, 1148, 3047, 3048,
     3049, 1148, 1146, 1149, 1149, 1149, 1149, 1149, 3050, 3051,
     1149, 1150, 1150, 1150, 1150, 1157, 1157, 1157, 1157, 3052,
     3053, 3054, 1157, 3055, 3056, 3055, 1150, 1149, 1150, 3059,
     1153, 1153, 1153, 1153, 3061, 1150, 1150, 1150, 3063, 3057,
     3060, 1153, 3057, 3060, 1145, 1153, 3057, 1153, 3064, 3065,
     1158, 1158, 1158, 1158, 1153, 1153, 1153, 1158, 3055, 3066,
     1159, 1159, 1159, 1159, 3067, 3068, 1146, 1160, 1160, 1160,
     1160, 1159, 3069, 3070, 3071, 1159, 1161, 1161, 1161, 1161,

     1164, 1164, 1164, 1164, 1149, 1159, 1159, 1165, 1165, 1165,
     1165, 1160, 1167, 1167, 1167, 1167, 3072, 3073, 3062, 1167,
     1161, 3062, 3076, 3077, 1164, 1168, 1168, 1168, 1168, 3078,
     3079, 1165, 1168, 1169, 1169, 1169, 1169, 3080, 1170, 1170,
     1170, 1170, 3081, 3082, 1169, 1170, 1172, 1172, 1172, 1172,
     1173, 1173, 1173, 1173, 3084, 3086, 3087, 1172, 1176, 1176,
     1176, 1176, 1176, 3088, 3089, 1176, 1160, 3090, 3094, 3098,
     1172, 3099, 1178, 1178, 1178, 1178, 1180, 1180, 1180, 1180,
     3100, 3101, 1176, 1178, 3102, 3103, 3105, 1180, 1181, 1181,
     1181, 1181, 1182, 1182, 1182, 1182, 1178, 3106, 3107, 1181,

     1180, 3108, 3110, 1182, 1198, 1198, 1198, 1198, 1206, 1206,
     1206, 1206, 1181, 3111, 3112, 1206, 1182, 1207, 1207, 1207,
     1207, 3114, 3116, 3117, 1207, 3124, 3127, 3130, 1198, 1208,
     1208, 1208, 1208, 3131, 3136, 3137, 1208, 3139, 3140, 1176,
     1209, 1209, 1209, 1209, 3155, 3159, 3126, 1182, 1210, 1210,
     1210, 1210, 1214, 1214, 1214, 1214, 3160, 1209, 3164, 1214,
     1181, 3126, 3165, 3166, 1209, 1210, 1215, 1215, 1215, 1215,
     3163, 1206, 1210, 3168, 1218, 1218, 1218, 1218, 3188, 3163,
     1207, 1218, 3189, 1215, 3195, 3196, 3200, 1206, 3201, 3202,
     1215, 1234, 1234, 1234, 1234, 3208, 1207, 1262, 1262, 1262,

     1262, 3211, 3212, 3213, 1262, 3217, 3218, 3220, 1208, 1280,
     1280, 1280, 1280, 3222, 1210, 1212, 1212, 1212, 1212, 1212,
     1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212,
     1212, 1214, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212,
     1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212,
     1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212,
     1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212,
     1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212,
     1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212,
     1212, 1212, 1212, 1212, 1212, 3225, 1212, 1212, 1212, 1216,

     1216, 1216, 1216, 1217, 1217, 1217, 1217, 1219, 1219, 1219,
     1219, 1221, 1221, 1221, 1221, 3226, 1216, 3227, 3228, 3229,
     1217, 3230, 3231, 1216, 3232, 3235, 3236, 1217, 1223, 1223,
     1223, 1223, 3237, 3234, 3239, 1221, 3234, 1235, 1235, 1235,
     1235, 1237, 1237, 1237, 1237, 1223, 1240, 1240, 1240, 1240,
     3240, 3241, 1223, 3233, 1217, 1235, 3233, 3242, 3243, 1237,
     1263, 1263, 1263, 1263, 3233, 1216, 3249, 1263, 3250, 3251,
     1240, 1264, 1264, 1264, 1264, 1268, 1268, 1268, 1268, 1223,
     3253, 1265, 3254, 3256, 1265, 3257, 1219, 1239, 1239, 1239,
     1239, 3258, 1558, 1239, 3261, 1558, 1558, 1264, 3262, 1268,

     1265, 1265, 1265, 1265, 1265, 1269, 1269, 1269, 1269, 3265,
     1558, 1239, 1269, 1357, 1357, 1357, 1357, 1239, 1290, 1290,
     1290, 1290, 1558, 1271, 1271, 1271, 1271, 3270, 1357, 1290,
     3273, 1239, 3274, 3275, 3277, 1290, 3278, 1239, 1265, 1265,
     3279, 1239, 1239, 1558, 1239, 1239, 1239, 1271, 3284, 1271,
     1239, 1239, 1239, 1239, 1239, 3297, 1239, 3298, 1239, 1239,
     1239, 1239, 1239, 1275, 1275, 1275, 1275, 3302, 3303, 3304,
     1275, 3305, 1275, 3322, 3326, 3328, 1275, 1276, 1276, 1276,
     1276, 3329, 3331, 3342, 1276, 1882, 1276, 1275, 1882, 3346,
     1276, 1277, 1277, 1277, 1277, 1279, 1279, 1279, 1279, 3347,

     1277, 1276, 1277, 1882, 1277, 3351, 3352, 1279, 1279, 1281,
     3353, 1952, 1281, 1281, 1952, 1882, 1275, 2065, 3354, 1279,
     2065, 1279, 1281, 3355, 1285, 1285, 1285, 1285, 1285, 3356,
     1276, 1285, 1291, 1291, 1291, 1291, 1882, 1952, 3360, 1281,
     3361, 1952, 3325, 1291, 1277, 3325, 3362, 2065, 1285, 1291,
     1292, 1292, 1292, 1292, 1293, 1293, 1293, 1293, 3363, 3364,
     1281, 1292, 1952, 3348, 3348, 1293, 3348, 1292, 2065, 3365,
     3370, 1293, 1294, 1294, 1294, 1294, 1295, 1295, 1295, 1295,
     3371, 3359, 3223, 1294, 3359, 3223, 3374, 1295, 3377, 1294,
     3379, 3349, 3349, 1295, 3349, 3387, 3388, 1291, 1296, 1296,

     1296, 1296, 3223, 3223, 3389, 1285, 1297, 1297, 1297, 1297,
     1299, 1299, 1299, 1299, 3392, 3393, 1292, 1292, 1301, 1301,
     1301, 1301, 1296, 1293, 1296, 1302, 1302, 1302, 1302, 3406,
     1297, 3410, 1297, 3411, 1299, 1295, 1299, 1303, 1303, 1303,
     1303, 3412, 3358, 1294, 3357, 3358, 1294, 3357, 3413, 1302,
     3420, 1302, 1299, 1299, 3358, 3357, 1299, 1304, 1304, 1304,
     1304, 1303, 3421, 1303, 1305, 1305, 1305, 1305, 3436, 1306,
     1306, 1306, 1306, 1307, 1307, 1307, 1307, 1301, 3437, 3438,
     3439, 1304, 3444, 1304, 1308, 1308, 1308, 1308, 1305, 3445,
     1305, 3451, 3445, 1306, 1302, 1306, 3452, 1307, 3453, 1307,

     1309, 1309, 1309, 1309, 1310, 1310, 1310, 1310, 1308, 1303,
     1308, 3454, 1304, 1311, 1311, 1311, 1311, 1312, 1312, 1312,
     1312, 1305, 3446, 3455, 1309, 3446, 1309, 3458, 1310, 1306,
     1310, 1305, 1313, 1313, 1313, 1313, 3459, 1311, 3460, 1311,
     3461, 1312, 3462, 1312, 3466, 1307, 1308, 1314, 1314, 1314,
     1314, 1315, 1315, 1315, 1315, 3472, 1313, 3473, 1313, 1316,
     1316, 1316, 1316, 1310, 1317, 1317, 1317, 1317, 3478, 3479,
     1311, 1314, 3483, 1314, 1309, 1315, 3484, 1315, 3447, 3447,
     1312, 3447, 1311, 1316, 3456, 1316, 1311, 3456, 1317, 3485,
     1317, 3486, 1318, 1318, 1318, 1318, 3456, 3492, 3493, 1313,

     1319, 1319, 1319, 1319, 1314, 1320, 1320, 1320, 1320, 1315,
     1314, 3494, 1314, 3496, 3497, 1316, 1318, 3514, 1318, 3515,
     1314, 3518, 3521, 3522, 1319, 2068, 1319, 2263, 2068, 1320,
     2263, 1320, 1321, 1321, 1321, 1321, 3523, 1317, 1322, 1322,
     1322, 1322, 1323, 1323, 1323, 1323, 1324, 1324, 1324, 1324,
     1318, 1325, 1325, 1325, 1325, 2068, 1321, 2263, 1321, 3524,
     3449, 3449, 1322, 3449, 1322, 3525, 1323, 3526, 1323, 3530,
     1324, 1320, 1324, 1319, 3533, 1325, 2068, 1325, 2263, 1326,
     1326, 1326, 1326, 3534, 1327, 1327, 1327, 1327, 3535, 1328,
     1328, 1328, 1328, 3538, 1322, 1321, 1338, 1338, 1338, 1338,

     1321, 3539, 1323, 1326, 3540, 1326, 1325, 1324, 1327, 3545,
     1327, 3546, 1323, 1328, 3547, 1328, 1329, 1329, 1329, 1329,
     1338, 3562, 1325, 1330, 1330, 1330, 1330, 3569, 3570, 3573,
     1331, 1331, 1331, 1331, 1332, 1332, 1332, 1332, 3574, 3575,
     1329, 3519, 1329, 3520, 3519, 1326, 3520, 1330, 3519, 1330,
     3520, 3577, 1328, 1327, 1331, 3578, 1331, 3579, 1332, 3584,
     1332, 1340, 1340, 1340, 1340, 3585, 3594, 3601, 1340, 1341,
     1341, 1341, 1341, 3602, 3605, 3606, 1341, 3608, 3609, 1329,
     1342, 1342, 1342, 1342, 1343, 1343, 1343, 1343, 1330, 3613,
     3618, 1343, 1345, 1345, 1345, 1345, 3619, 1953, 3623, 1332,

     1953, 1331, 1347, 1347, 1347, 1347, 1342, 1346, 1346, 1346,
     1346, 1346, 1884, 3627, 1346, 1884, 1345, 3633, 1345, 1348,
     1348, 1348, 1348, 1953, 3656, 1884, 1347, 1953, 1347, 3657,
     3662, 1346, 1350, 1350, 1350, 1350, 1354, 2423, 1350, 1354,
     1354, 2420, 1884, 1348, 2417, 1348, 2414, 2410, 1953, 1354,
     1350, 1358, 1358, 1358, 1358, 1359, 1359, 1359, 1359, 1361,
     1361, 1361, 1361, 1884, 2407, 2406, 1354, 1373, 1373, 1373,
     1373, 1374, 1374, 1374, 1374, 2400, 2399, 3980, 1361, 2398,
     2397, 1385, 1385, 1385, 1385, 3980, 1373, 1354, 1346, 1360,
     1360, 1360, 1360, 1385, 1386, 1386, 1386, 1386, 1389, 1389,

     1389, 1389, 2395, 2391, 1389, 1386, 1390, 1390, 1390, 1390,
     1393, 3565, 2267, 1393, 3565, 2267, 1360, 2390, 3565, 2388,
     1386, 1395, 1395, 1395, 1395, 1396, 1396, 1396, 1396, 1393,
     1393, 1393, 1393, 1393, 1400, 1400, 1400, 1400, 1404, 1404,
     1404, 1404, 2267, 2387, 1360, 1404, 1360, 2385, 1402, 1402,
     1402, 1402, 1403, 1403, 1403, 1403, 1360, 1360, 3991, 2382,
     1360, 1360, 1360, 2267, 1360, 1402, 3991, 3567, 2381, 1403,
     3567, 2376, 1402, 2374, 3567, 2373, 1403, 1405, 1405, 1405,
     1405, 1407, 1407, 1407, 1407, 1408, 1408, 1408, 1408, 1410,
     1410, 1410, 1410, 3992, 1405, 3993, 1410, 2372, 1407, 2371,

     3992, 1405, 2369, 3993, 2368, 1407, 3996, 1400, 3992, 1408,
     1411, 1411, 1411, 1411, 3996, 3998, 4000, 1411, 1413, 1413,
     1413, 1413, 2365, 3998, 4000, 1413, 1415, 1415, 1415, 1415,
     1416, 1416, 1416, 1416, 1416, 2360, 3997, 1416, 1417, 1417,
     1417, 1417, 2357, 3997, 4003, 1420, 3999, 1407, 1420, 2352,
     1415, 3997, 4003, 3999, 1416, 1422, 1422, 1422, 1422, 2351,
     2348, 3999, 1417, 2347, 1420, 1420, 1420, 1420, 1420, 1427,
     1427, 1427, 1427, 1435, 1435, 1435, 1435, 1459, 1459, 1459,
     1459, 1470, 1470, 1470, 1470, 2346, 2269, 1427, 2345, 2269,
     2343, 1435, 1474, 1474, 1474, 1474, 1484, 1484, 1484, 1484,

     1485, 1485, 1485, 1485, 2342, 1486, 1486, 1486, 1486, 2341,
     2339, 1416, 1486, 1484, 2338, 2337, 2269, 1485, 1486, 1487,
     1487, 1487, 1487, 1488, 1488, 1488, 1488, 1489, 1489, 1489,
     1489, 2336, 1490, 1490, 1490, 1490, 1487, 2269, 1470, 1491,
     1491, 1491, 1491, 4005, 2334, 2333, 1491, 1492, 1492, 1492,
     1492, 1504, 1504, 1504, 1504, 1516, 1516, 1516, 1516, 4005,
     1521, 1521, 1521, 1521, 2330, 4001, 1504, 4005, 1522, 1522,
     1522, 1522, 4001, 4018, 1488, 2329, 2274, 2273, 1489, 2266,
     4001, 4018, 1489, 1490, 1521, 1522, 1524, 1524, 1524, 1524,
     1525, 1525, 1525, 1525, 1555, 1555, 1555, 1555, 2260, 2257,

     1557, 4020, 1492, 1557, 1557, 1563, 1563, 1563, 1563, 4020,
     2248, 4010, 1563, 1557, 1525, 1564, 1564, 1564, 1564, 2245,
     4025, 4037, 1564, 1565, 1565, 1565, 1565, 4010, 4025, 4037,
     1557, 2244, 2242, 2241, 1516, 4010, 1565, 1566, 1566, 1566,
     1566, 1568, 1568, 1568, 1568, 2240, 1571, 1571, 1571, 1571,
     1566, 1557, 2239, 1571, 1568, 1571, 4011, 4040, 4042, 1571,
     1572, 1572, 1572, 1572, 4019, 4040, 4042, 1572, 2238, 1572,
     4044, 4019, 4011, 1572, 1573, 1573, 1573, 1573, 4044, 4019,
     4011, 1573, 2237, 1573, 2236, 2235, 2234, 1573, 1574, 1574,
     1574, 1574, 1575, 1575, 1575, 1575, 1576, 1576, 1576, 1576,

     1579, 1579, 1579, 1579, 2233, 1580, 1580, 1580, 1580, 2231,
     4021, 1579, 1580, 1582, 1582, 1582, 1582, 4021, 1580, 1584,
     1584, 1584, 1584, 4046, 1579, 4021, 1584, 1585, 1585, 1585,
     1585, 4046, 4049, 4051, 1585, 2230, 4038, 1582, 1574, 2229,
     4049, 4051, 1575, 4038, 4054, 4057, 1576, 1587, 1587, 1587,
     1587, 4038, 4054, 4057, 1587, 1589, 1589, 1589, 1589, 1590,
     1590, 1590, 1590, 1590, 2228, 2227, 1590, 1591, 1591, 1591,
     1591, 2226, 1592, 1592, 1592, 1592, 2225, 2224, 2223, 1589,
     2222, 4060, 4062, 1590, 1592, 1593, 1593, 1593, 1593, 4060,
     4062, 1591, 1594, 1594, 1594, 1594, 1593, 1601, 1601, 1601,

     1601, 2221, 2220, 1594, 1603, 1603, 1603, 1603, 1604, 1604,
     1604, 1604, 1624, 1624, 1624, 1624, 2219, 1594, 1629, 1629,
     1629, 1629, 1632, 1632, 1632, 1632, 1604, 1635, 1635, 1635,
     1635, 1636, 4047, 4064, 1636, 1639, 1639, 1639, 1639, 4047,
     1590, 4064, 1594, 1645, 1645, 1645, 1645, 4047, 2218, 2217,
     1636, 1636, 1636, 1636, 1636, 1647, 1647, 1647, 1647, 1651,
     1651, 1651, 1651, 2216, 4052, 4066, 1647, 1652, 1652, 1652,
     1652, 4052, 2215, 4066, 1651, 1653, 1653, 1653, 1653, 4052,
     1647, 1665, 1665, 1665, 1665, 1666, 1666, 1666, 1666, 1693,
     1693, 1693, 1693, 4079, 1665, 4081, 1693, 1694, 1694, 1694,

     1694, 4079, 2214, 4081, 1694, 1647, 1695, 1695, 1695, 1695,
     1697, 1697, 1697, 1697, 1698, 1698, 1698, 1698, 1695, 4093,
     4101, 1695, 1697, 2213, 2212, 1697, 1698, 4093, 4101, 1698,
     1699, 1699, 1699, 1699, 1647, 1703, 1703, 1703, 1703, 1693,
     1701, 1701, 1701, 1701, 4102, 2211, 4055, 1694, 1706, 1706,
     1706, 1706, 1701, 4055, 4104, 1701, 1704, 1704, 1704, 1704,
     4102, 4055, 4104, 1704, 1705, 1705, 1705, 1705, 4102, 2210,
     2209, 1705, 1707, 1707, 1707, 1707, 1708, 1708, 1708, 1708,
     2208, 2206, 2205, 1707, 2204, 2201, 2200, 1708, 1710, 1710,
     1710, 1710, 1716, 1716, 1716, 1716, 2197, 4063, 4065, 1710,

     1718, 1718, 1718, 1718, 4063, 4065, 4106, 1718, 1719, 1719,
     1719, 1719, 4063, 4065, 4106, 1719, 1716, 1721, 1721, 1721,
     1721, 2196, 2195, 2194, 1721, 1723, 1723, 1723, 1723, 1724,
     1724, 1724, 1724, 1724, 2193, 4107, 1724, 1725, 1725, 1725,
     1725, 1773, 1773, 1773, 1773, 1774, 1774, 1774, 1774, 1723,
     2192, 4107, 4109, 1724, 1773, 1778, 1778, 1778, 1778, 4107,
     4109, 1725, 1779, 1779, 1779, 1779, 1905, 1905, 1905, 1905,
     1778, 4067, 2190, 1779, 2186, 2181, 2180, 1779, 4067, 2172,
     1778, 1778, 1780, 1780, 1780, 1780, 4067, 1779, 1779, 1783,
     1783, 1783, 1783, 1780, 2164, 2159, 1783, 1780, 1781, 1781,

     1781, 1781, 1782, 1782, 1782, 1782, 1780, 1780, 1780, 4112,
     1724, 1784, 1784, 1784, 1784, 1781, 2158, 4112, 1784, 1782,
     1786, 1786, 1786, 1786, 1786, 1905, 4080, 1786, 1787, 1787,
     1787, 1787, 4116, 4080, 1788, 1788, 1788, 1788, 2157, 1787,
     4116, 4080, 4130, 1787, 1786, 1788, 1789, 1789, 1789, 1789,
     4130, 2156, 2155, 1787, 1787, 2153, 2152, 1789, 1790, 1790,
     1790, 1790, 2149, 1796, 1796, 1796, 1796, 1796, 4139, 1790,
     1796, 2146, 1798, 1798, 1798, 1798, 4139, 4161, 1799, 1799,
     1799, 1799, 1790, 1798, 2145, 4161, 2144, 1796, 2140, 1799,
     1807, 1807, 1807, 1807, 1807, 4143, 1798, 1807, 2139, 2138,

     2132, 1786, 1799, 1808, 1808, 1808, 1808, 1809, 1809, 1809,
     1809, 4143, 2131, 4144, 1807, 1810, 1810, 1810, 1810, 4143,
     1808, 4095, 1810, 4103, 1809, 2129, 2126, 1808, 4095, 4144,
     4103, 1809, 1811, 1811, 1811, 1811, 4095, 4144, 4103, 1811,
     2125, 2124, 2123, 1799, 1796, 1798, 1812, 1812, 1812, 1812,
     1815, 1815, 1815, 1815, 1825, 2122, 2121, 1815, 1831, 1831,
     1831, 1831, 2119, 1825, 1825, 1825, 1825, 2118, 2117, 2116,
     1812, 1807, 1863, 1863, 1863, 1863, 1809, 1830, 1830, 1830,
     1830, 4153, 1831, 1830, 1832, 1832, 1832, 1832, 1832, 4082,
     4082, 1832, 1864, 1864, 1864, 1864, 4082, 4153, 1863, 2114,

     2112, 1830, 2111, 1865, 4082, 4153, 1865, 1830, 1832, 1871,
     1871, 1871, 1871, 4105, 2110, 2106, 1871, 2104, 1864, 2102,
     4105, 1830, 1865, 1865, 1865, 1865, 1865, 1830, 4105, 2100,
     4108, 1830, 1830, 1871, 1830, 1830, 1830, 4108, 2098, 2096,
     1830, 1830, 1830, 1830, 1830, 4108, 1830, 4154, 1830, 1830,
     1830, 1830, 1830, 1869, 1869, 1869, 1869, 1970, 1970, 1970,
     1970, 2094, 1869, 4154, 1869, 1832, 1869, 1870, 1870, 1870,
     1870, 4154, 2092, 2091, 1870, 2089, 1870, 2085, 2083, 2072,
     1870, 1872, 1872, 1872, 1872, 1873, 1873, 1873, 1873, 2071,
     2070, 1870, 2067, 1872, 1872, 4166, 1873, 1874, 1874, 1874,

     1874, 2063, 2061, 4166, 1874, 1872, 1869, 2060, 2059, 1874,
     1875, 1875, 1875, 1875, 1887, 1887, 1887, 1887, 1887, 2058,
     1870, 1887, 1875, 1875, 1890, 1890, 1890, 1890, 1893, 1893,
     1893, 1893, 4168, 2057, 1875, 1890, 1875, 2056, 1887, 1893,
     4168, 1894, 1894, 1894, 1894, 1893, 1895, 1895, 1895, 1895,
     2053, 2052, 1894, 1896, 1896, 1896, 1896, 1895, 1894, 1973,
     1973, 1973, 1973, 1895, 1896, 1897, 1897, 1897, 1897, 2051,
     1896, 2050, 1898, 1898, 1898, 1898, 1897, 1899, 1899, 1899,
     1899, 2049, 1897, 1898, 1902, 1902, 1902, 1902, 1899, 1898,
     1900, 1900, 1900, 1900, 1899, 1887, 1894, 1903, 1903, 1903,

     1903, 1900, 2048, 1904, 1904, 1904, 1904, 1900, 1902, 2047,
     1902, 1949, 1949, 1949, 1949, 1895, 1902, 1984, 1984, 1984,
     1984, 1903, 4173, 1903, 4110, 2046, 1896, 1904, 4186, 1904,
     4173, 4110, 2045, 1899, 2044, 1898, 4186, 1949, 1897, 4110,
     1898, 1904, 1903, 1907, 1907, 1907, 1907, 1908, 1908, 1908,
     1908, 1909, 1909, 1909, 1909, 2043, 1910, 1910, 1910, 1910,
     1900, 1911, 1911, 1911, 1911, 2040, 4227, 1907, 4255, 1907,
     4259, 1908, 2039, 1908, 4227, 1909, 4255, 1909, 4259, 2038,
     1910, 2034, 1910, 2033, 2027, 1911, 2020, 1911, 1912, 1912,
     1912, 1912, 1913, 1913, 1913, 1913, 2019, 2018, 1914, 1914,

     1914, 1914, 1915, 1915, 1915, 1915, 1916, 1916, 1916, 1916,
     2017, 4269, 1912, 2016, 1912, 2015, 1913, 1907, 1913, 4269,
     1908, 1910, 1914, 1909, 1914, 2014, 1915, 2013, 1915, 2010,
     1916, 2005, 1916, 1911, 1917, 1917, 1917, 1917, 1918, 1918,
     1918, 1918, 2003, 1919, 1919, 1919, 1919, 1978, 1978, 1978,
     1978, 1912, 1920, 1920, 1920, 1920, 1996, 4273, 1917, 1995,
     1917, 1913, 1918, 1988, 1918, 4273, 1914, 1919, 1915, 1919,
     1986, 1978, 1982, 1916, 1979, 1977, 1920, 1976, 1920, 1975,
     1921, 1921, 1921, 1921, 1922, 1922, 1922, 1922, 1923, 1923,
     1923, 1923, 1974, 1917, 1924, 1924, 1924, 1924, 1990, 1990,

     1990, 1990, 1919, 1918, 1921, 4293, 1921, 4294, 1922, 4301,
     1922, 1920, 1923, 4293, 1923, 4294, 1972, 4301, 1924, 1971,
     1924, 1925, 1925, 1925, 1925, 1969, 1926, 1926, 1926, 1926,
     1927, 1927, 1927, 1927, 1928, 1928, 1928, 1928, 4335, 1921,
     1929, 1929, 1929, 1929, 4141, 1925, 4335, 1925, 4146, 1922,
     1926, 4141, 1926, 1964, 1927, 4146, 1927, 1924, 1928, 4141,
     1928, 1923, 1954, 4146, 1929, 1954, 1929, 1930, 1930, 1930,
     1930, 1931, 1931, 1931, 1931, 4147, 1932, 1932, 1932, 1932,
     1925, 4366, 4147, 1926, 1933, 1933, 1933, 1933, 1954, 4366,
     4147, 1930, 1954, 1930, 1963, 1931, 1928, 1931, 1962, 4390,

     1932, 1927, 1932, 1934, 1934, 1934, 1934, 4390, 1933, 1961,
     1933, 4407, 4412, 1954, 1929, 1935, 1935, 1935, 1935, 4407,
     4412, 4148, 1930, 1936, 1936, 1936, 1936, 1934, 4148, 1934,
     1931, 1960, 1937, 1937, 1937, 1937, 4148, 1959, 1958, 1935,
     4427, 1935, 4464, 1938, 1938, 1938, 1938, 1936, 4427, 1936,
     4464, 1932, 1957, 1933, 1956, 1948, 1937, 1933, 1937, 1939,
     1939, 1939, 1939, 1940, 1940, 1940, 1940, 1938, 1934, 1938,
     1941, 1941, 1941, 1941, 1942, 1942, 1942, 1942, 1943, 1943,
     1943, 1943, 1947, 1939, 1906, 1939, 1892, 1940, 4167, 1940,
     1992, 1992, 1992, 1992, 1941, 4167, 1941, 1936, 1942, 1937,

     1942, 1889, 1943, 4167, 1943, 1950, 1950, 1950, 1950, 1888,
     1944, 1944, 1944, 1944, 1877, 1876, 1938, 1945, 1945, 1945,
     1945, 1867, 1946, 1946, 1946, 1946, 1866, 1862, 1989, 1941,
     1861, 1950, 1940, 1939, 1944, 1860, 1944, 1989, 1989, 1989,
     1989, 1945, 1942, 1945, 1955, 1943, 1946, 1955, 1946, 1951,
     1951, 1951, 1951, 1951, 1859, 1858, 1951, 1955, 1856, 4198,
     1980, 1980, 1980, 1980, 4277, 1855, 1983, 1983, 1983, 1983,
     1955, 1980, 1983, 1951, 1955, 4198, 1854, 1946, 1985, 1852,
     4277, 1985, 1851, 4198, 1944, 1850, 1980, 1849, 4277, 1848,
     1945, 1999, 1999, 1999, 1999, 1955, 1847, 1985, 1985, 1985,

     1985, 1985, 1997, 1997, 1997, 1997, 1844, 1843, 1999, 1997,
     1998, 1998, 1998, 1998, 1842, 1999, 1840, 1998, 2000, 2000,
     2000, 2000, 2002, 2002, 2002, 2002, 2002, 2006, 1839, 2002,
     1951, 2030, 2030, 2030, 2030, 2000, 2006, 2006, 2006, 2006,
     1838, 1837, 2000, 1836, 4155, 1834, 2002, 2023, 2023, 2023,
     2023, 4155, 1824, 4155, 2023, 2024, 2024, 2024, 2024, 4155,
     2023, 1822, 2024, 2026, 2026, 2026, 2026, 1821, 2024, 2028,
     2028, 2028, 2028, 1820, 1819, 2066, 2028, 2000, 2066, 1818,
     2026, 2029, 2029, 2029, 2029, 1817, 1816, 1814, 2029, 2036,
     2036, 2036, 2036, 2037, 2037, 2037, 2037, 2064, 4316, 2069,

     4340, 2066, 2069, 2002, 2036, 2066, 2064, 2064, 2064, 2064,
     2074, 2074, 2074, 2074, 4316, 1805, 4340, 2074, 2077, 2077,
     2077, 2077, 4316, 2074, 4340, 2069, 2066, 1800, 1797, 2069,
     2075, 2075, 2075, 2075, 1795, 1777, 1770, 2075, 2076, 2076,
     2076, 2076, 2077, 2075, 1761, 2080, 2080, 2080, 2080, 2080,
     2069, 2076, 2080, 2081, 2081, 2081, 2081, 2134, 2134, 2134,
     2134, 2086, 1760, 1758, 2081, 2095, 1757, 1756, 1755, 2080,
     2086, 2086, 2086, 2086, 2095, 2095, 2095, 2095, 2099, 1754,
     2108, 1752, 2103, 2108, 1751, 1750, 2107, 2099, 2099, 2099,
     2099, 2103, 2103, 2103, 2103, 2107, 2107, 2107, 2107, 2108,

     2108, 2108, 2108, 2108, 2115, 2133, 2133, 2133, 2133, 2135,
     2135, 2135, 2135, 2115, 2115, 2115, 2115, 2133, 1749, 1743,
     2133, 2136, 2136, 2136, 2136, 1740, 2080, 2137, 2137, 2137,
     2137, 2142, 2142, 2142, 2142, 2142, 1739, 1738, 2142, 2167,
     2167, 2167, 2167, 4350, 1735, 2168, 2168, 2168, 2168, 1734,
     2170, 2170, 2170, 2170, 2167, 2142, 2168, 1733, 1732, 4350,
     2168, 2170, 1729, 2167, 2167, 2167, 4175, 4350, 1728, 2168,
     2168, 2168, 1717, 4175, 2170, 2184, 2184, 2184, 2184, 4457,
     4458, 4175, 2184, 2187, 2187, 2187, 2187, 2189, 2189, 2189,
     2189, 2191, 2191, 2191, 2191, 4457, 4458, 1715, 2191, 2250,

     2250, 2250, 2250, 4457, 4458, 1714, 2250, 2187, 1702, 1696,
     1692, 2189, 2142, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2176, 2176, 2176,

     2176, 2177, 2177, 2177, 2177, 1688, 1682, 1678, 2176, 1677,
     1676, 1675, 2177, 2183, 2183, 2183, 2183, 2183, 1674, 1673,
     2183, 2176, 1671, 1670, 1663, 2177, 2185, 2185, 2185, 2185,
     2185, 1662, 1644, 2185, 2199, 1642, 1634, 2183, 2188, 2188,
     2188, 2188, 1631, 2199, 2199, 2199, 2199, 1628, 1623, 1613,
     2185, 2203, 2203, 2203, 2203, 2188, 2253, 2253, 2253, 2253,
     2177, 1612, 2188, 2246, 2246, 2246, 2246, 2253, 2176, 1611,
     2246, 1602, 2246, 1598, 4176, 2203, 2246, 2247, 2247, 2247,
     2247, 4176, 1583, 1581, 2247, 4185, 2247, 2246, 1578, 4176,
     2247, 1577, 4185, 1554, 2183, 2249, 2249, 2249, 2249, 1549,

     4185, 2247, 1548, 2188, 1546, 4195, 1541, 2185, 2202, 2202,
     2202, 2202, 4195, 1540, 2202, 1536, 2246, 1534, 1533, 2249,
     4195, 2249, 2251, 2251, 2251, 2251, 1532, 1531, 1523, 2251,
     2247, 1501, 2202, 2252, 2252, 2252, 2252, 1500, 2202, 2255,
     2255, 2255, 2255, 1499, 1498, 2252, 2255, 2335, 2335, 2335,
     2335, 2255, 2202, 2276, 2276, 2276, 2276, 2252, 2202, 2252,
     1497, 4203, 2202, 2202, 2276, 2202, 2202, 2202, 4203, 1496,
     2276, 2202, 2202, 2202, 2202, 2202, 4203, 2202, 1493, 2202,
     2202, 2202, 2202, 2202, 2256, 2256, 2256, 2256, 2258, 1482,
     1480, 2256, 1479, 2258, 1478, 1472, 2256, 1471, 1469, 1468,

     2258, 2258, 2258, 2258, 2258, 2259, 2259, 2259, 2259, 1449,
     1445, 4456, 2259, 1443, 2259, 1442, 1433, 4456, 2259, 2261,
     2261, 2261, 2261, 2277, 2277, 2277, 2277, 1425, 1421, 2259,
     1409, 2261, 4206, 4456, 2277, 2278, 2278, 2278, 2278, 4206,
     2277, 4456, 1406, 2261, 1401, 1398, 2278, 4206, 2279, 2279,
     2279, 2279, 2278, 2280, 2280, 2280, 2280, 1394, 2259, 2279,
     2281, 2281, 2281, 2281, 2280, 2279, 2344, 2344, 2344, 2344,
     2280, 2281, 2282, 2282, 2282, 2282, 1384, 2281, 1383, 2283,
     2283, 2283, 2283, 2282, 1382, 2285, 2285, 2285, 2285, 2282,
     2283, 2284, 2284, 2284, 2284, 2277, 2283, 1381, 1380, 1379,

     2278, 1378, 2284, 2287, 2287, 2287, 2287, 2279, 2284, 2285,
     1377, 2285, 2286, 2286, 2286, 2286, 2280, 2288, 2288, 2288,
     2288, 1376, 1369, 1367, 2285, 1366, 1365, 2287, 1364, 2287,
     1363, 2289, 2289, 2289, 2289, 2281, 2286, 1362, 2286, 1339,
     2287, 2288, 1337, 2288, 2283, 2282, 2290, 2290, 2290, 2290,
     2291, 2291, 2291, 2291, 2286, 2289, 4208, 2289, 2292, 2292,
     2292, 2292, 1336, 4208, 1300, 2284, 2293, 2293, 2293, 2293,
     2290, 4208, 2290, 2288, 2291, 1298, 2291, 2294, 2294, 2294,
     2294, 1287, 2292, 1286, 2292, 2296, 2296, 2296, 2296, 1278,
     2293, 1267, 2293, 2298, 2298, 2298, 2298, 2304, 2304, 2304,

     2304, 2294, 2289, 2294, 1266, 2291, 1260, 1259, 1257, 2296,
     1255, 2296, 2297, 2297, 2297, 2297, 1253, 2298, 2290, 2298,
     1252, 2304, 4214, 2304, 2349, 2349, 2349, 2349, 1251, 4214,
     1249, 2292, 1247, 2293, 1246, 1245, 2297, 4214, 2297, 1244,
     2294, 2295, 2295, 2295, 2295, 2295, 2295, 2295, 2295, 2295,
     2295, 2295, 2295, 2295, 2295, 2295, 2295, 2295, 2295, 2295,
     2295, 1242, 2298, 1233, 2296, 2304, 2295, 1232, 2295, 2295,
     2295, 2295, 2295, 2299, 2299, 2299, 2299, 2300, 2300, 2300,
     2300, 2302, 2302, 2302, 2302, 2297, 2301, 2301, 2301, 2301,
     1231, 4215, 2295, 2295, 2295, 2295, 1229, 2299, 4215, 2299,

     1227, 2300, 1226, 2300, 1225, 2302, 4215, 2302, 1224, 1222,
     2301, 1199, 2301, 2303, 2303, 2303, 2303, 2305, 2305, 2305,
     2305, 2295, 2295, 2295, 2295, 2306, 2306, 2306, 2306, 1193,
     2307, 2307, 2307, 2307, 1191, 4216, 2299, 2303, 1189, 2303,
     1188, 2305, 4216, 2305, 2308, 2308, 2308, 2308, 2300, 2306,
     4216, 2306, 2302, 2301, 2307, 1177, 2307, 2309, 2309, 2309,
     2309, 1166, 2310, 2310, 2310, 2310, 1162, 1136, 2308, 1132,
     2308, 2312, 2312, 2312, 2312, 1117, 2311, 2311, 2311, 2311,
     1115, 2309, 1093, 2309, 2305, 1092, 2310, 2303, 2310, 2313,
     2313, 2313, 2313, 1091, 1089, 2312, 2306, 2312, 2307, 2308,

     2311, 1076, 2311, 1075, 2314, 2314, 2314, 2314, 1074, 2315,
     2315, 2315, 2315, 2313, 1065, 2313, 2316, 2316, 2316, 2316,
     1053, 2317, 2317, 2317, 2317, 2309, 1042, 2310, 2314, 1031,
     2314, 1015, 2311, 2315, 1005, 2315, 2318, 2318, 2318, 2318,
     2316,  986, 2316, 2312, 2313, 2317,  942, 2317, 2319, 2319,
     2319, 2319, 2340, 2340, 2340, 2340, 2320, 2320, 2320, 2320,
     2318,  936, 2318, 2314, 2321, 2321, 2321, 2321, 2315,  935,
      934,  911, 2319,  903, 2319,  895, 2340,  887, 2317, 2316,
     2320,  878, 2320, 2322, 2322, 2322, 2322,  868, 2321,  862,
     2321, 4226,  857, 2317, 2323, 2323, 2323, 2323, 4226, 2318,

      844,  838,  827, 2319,  816,  788, 4226, 2322,  787, 2322,
     2324, 2324, 2324, 2324, 2325, 2325, 2325, 2325, 2323, 2320,
     2323, 2321,  786, 2326, 2326, 2326, 2326, 2327, 2327, 2327,
     2327,  785,  782,  778, 2324,  768, 2324,  767, 2325, 4233,
     2325, 2328, 2328, 2328, 2328,  766, 4233, 2326, 2322, 2326,
      765, 2327, 2323, 2327, 4233, 2353, 2353, 2353, 2353,  754,
      753, 2323,  752,  751,  750, 2328, 2353, 2328, 2354, 2354,
     2354, 2354,  749,  718, 2354, 2325, 2359, 2324, 2355, 2355,
     2355, 2355, 2326,  693,  687, 2359, 2359, 2359, 2359, 2362,
     2362, 2362, 2362, 2363, 2363, 2363, 2363, 2380, 2380, 2380,

     2380, 2327, 2364, 2364, 2364, 2364, 2362,  685,  684, 4247,
     2363, 2367,  661, 2362, 2328,  654, 4247, 2363,  639, 2364,
     2367, 2367, 2367, 2367, 4247,  638, 2364, 2378, 2378, 2378,
     2378, 2383, 2383, 2383, 2383,  595, 2402, 2403, 2403, 2403,
     2403,  583,  572, 4466, 2378, 2402, 2402, 2402, 2402, 4466,
     2403, 2404, 2404, 2404, 2404, 2405, 2405, 2405, 2405, 2409,
     2469, 2469, 2469, 2469,  556, 4466,  555, 2469, 2409, 2409,
     2409, 2409, 2416, 4466, 2364, 2404, 2419,  553,  546, 2405,
     2422, 2416, 2416, 2416, 2416, 2419, 2419, 2419, 2419, 2422,
     2422, 2422, 2422, 2425,  532,  531,  529, 2431, 2617, 2617,

     2617, 2617, 2425, 2425, 2425, 2425, 2431, 2431, 2431, 2431,
     2441, 2441,  515,  506,  504, 2441,  503,  502, 2441, 2441,
     2470, 2470, 2470, 2470,  501,  500,  499, 2470, 2441,  447,
     2441, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453,
     2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453,
     2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453,
     2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453,
     2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453,
     2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453,
     2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453,

     2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453,
     2453, 2453, 2453, 2453, 2453, 2464, 2464,  415,  411,  407,
     2464,  406,  381, 2464, 2464, 2466, 2466, 2466, 2466, 2467,
     2467, 2467, 2467, 2464,  379, 2464, 2466,  377,  368,  364,
     2467, 2472, 2472, 2472, 2472, 2475, 2475, 2475, 2475, 2466,
      330,  319, 4254, 2467, 2474, 2474, 2474, 2474, 2474, 4254,
      301, 2474,  299, 4256,  284, 2472,  261, 4254,    0, 2475,
     4256, 2476, 2476, 2476, 2476,    0,    0, 4256, 2474, 4257,
     2466, 2487, 2487, 2487, 2487, 4256, 4257, 2467, 2476, 2502,
     2502, 2502, 2502,    0, 4257, 2476, 2532, 2532, 2532, 2532,

        0,    0,    0, 2532,    0, 2487,    0, 2533, 2533, 2533,
     2533, 2626, 2626, 2626, 2626,    0, 2537, 2537, 2537, 2537,
     2532, 2534, 2534, 2534, 2534,    0,    0,    0, 2537,    0,
     2476, 2533,    0,    0,    0, 2474, 2486, 2486, 2486, 2486,
     2537, 2540, 2486,    0,    0, 2534, 2540, 2534,    0, 2538,
     2538, 2538, 2538, 2540, 2540, 2540, 2540, 2540,    0,    0,
     2486, 2538, 2637, 2637, 2637, 2637, 2486,    0, 2502, 2541,
        0,    0,    0, 2538, 2541, 2538, 2621, 2621, 2621, 2621,
     2486, 2541, 2541, 2541, 2541, 2541, 2486, 2621,    0, 4258,
     2486, 2486,    0, 2486, 2486, 2486, 4258,    0,    0, 2486,

     2486, 2486, 2486, 2486, 4258, 2486,    0, 2486, 2486, 2486,
     2486, 2486, 2547, 2547, 2547, 2547, 2548, 2548, 2548, 2548,
     4467,    0,    0, 2547,    0,    0, 4467, 2548,    0, 2547,
        0,    0,    0, 2548, 2549, 2549, 2549, 2549, 2550, 2550,
     2550, 2550, 4467,    0,    0, 2549,    0,    0, 2621, 2550,
     4467, 2549,    0,    0,    0, 2550, 2551, 2551, 2551, 2551,
     2552, 2552, 2552, 2552,    0,    0,    0, 2551, 4234, 4234,
        0, 2552,    0, 2551,    0, 4234,    0, 2552, 2553, 2553,
     2553, 2553,    0, 4234, 2556, 2556, 2556, 2556, 2548, 2553,
        0,    0,    0, 2549,    0, 2553, 2554, 2554, 2554, 2554,

     2555, 2555, 2555, 2555,    0,    0,    0, 2554, 2556, 2550,
     2556, 2555,    0, 2554,    0, 2552,    0, 2555,    0, 2556,
     2723, 2723, 2723, 2723, 2551, 2557, 2557, 2557, 2557, 2558,
     2558, 2558, 2558, 2623, 2623, 2623, 2623, 2553, 2559, 2559,
     2559, 2559,    0, 4260, 2623, 4261, 2553,    0,    0, 2557,
     4260, 2557, 4261, 2558, 4272, 2558,    0, 4260,    0, 2554,
     4261, 4272, 2559, 2555, 2559, 4260,    0,    0, 2557, 4272,
     2558, 2560, 2560, 2560, 2560, 2561, 2561, 2561, 2561,    0,
     2562, 2562, 2562, 2562, 2563, 2563, 2563, 2563, 2564, 2564,
     2564, 2564,    0,    0,    0, 2560,    0, 2560, 4284, 2561,

        0, 2561,    0, 2559, 2562, 4284, 2562,    0, 2563,    0,
     2563,    0, 2564, 4284, 2564, 2565, 2565, 2565, 2565, 2567,
     2567, 2567, 2567,    0,    0,    0, 2560, 2570, 2570, 2570,
     2570, 2571, 2571, 2571, 2571, 2573, 2573, 2573, 2573, 2565,
        0, 2565,    0, 2567,    0, 2567,    0, 2564,    0,    0,
        0, 2570, 2562, 2570, 2561, 2571,    0, 2571,    0, 2573,
        0, 2573,    0, 2574, 2574, 2574, 2574, 2575, 2575, 2575,
     2575, 2576, 2576, 2576, 2576, 2577, 2577, 2577, 2577,    0,
        0,    0, 2565, 2578, 2578, 2578, 2578, 2574, 2571, 2574,
        0, 2575,    0, 2575,    0, 2576,    0, 2576,    0, 2577,

        0, 2577,    0, 2571,    0,    0,    0, 2578,    0, 2578,
        0, 2579, 2579, 2579, 2579, 2580, 2580, 2580, 2580, 2581,
     2581, 2581, 2581,    0, 2575, 2582, 2582, 2582, 2582, 2583,
     2583, 2583, 2583, 2577,    0, 2579, 2574, 2579, 2576, 2580,
        0, 2580,    0, 2581,    0, 2581, 2578,    0,    0, 2582,
        0, 2582,    0, 2583,    0, 2583,    0, 2584, 2584, 2584,
     2584,    0, 2585, 2585, 2585, 2585,    0,    0,    0, 2579,
     2586, 2586, 2586, 2586, 2625, 2625, 2625, 2625, 2581,    0,
     2625, 2584, 2580, 2584,    0, 2582, 2585,    0, 2585,    0,
     4270, 4270, 2582,    0, 2586,    0, 2586, 4270, 2583, 2587,

     2587, 2587, 2587,    0,    0, 4270, 2588, 2588, 2588, 2588,
     2589, 2589, 2589, 2589, 2590, 2590, 2590, 2590,    0,    0,
     2585,    0, 4302, 2587, 4302, 2587,    0,    0, 2584, 2586,
     2588, 4302, 2588,    0, 2589,    0, 2589,    0, 2590, 4302,
     2590, 2591, 2591, 2591, 2591, 2592, 2592, 2592, 2592,    0,
     2595, 2595, 2595, 2595, 2596, 2596, 2596, 2596, 2597, 2597,
     2597, 2597,    0,    0, 2587, 2591, 4315, 2591,    0, 2592,
        0, 2592,    0, 4315, 2595, 2588, 2595,    0, 2596,    0,
     2596, 4315, 2597, 2589, 2597, 2590, 2598, 2598, 2598, 2598,
     2599, 2599, 2599, 2599, 2600, 2600, 2600, 2600, 2591,    0,

        0,    0, 2592, 2601, 2601, 2601, 2601,    0,    0,    0,
     2598,    0, 2598,    0, 2599, 2597, 2599,    0, 2600, 2596,
     2600, 2595, 2602, 2602, 2602, 2602,    0, 2601,    0, 2601,
     2603, 2603, 2603, 2603,    0,    0, 2604, 2604, 2604, 2604,
     2605, 2605, 2605, 2605,    0, 2599, 2602,    0, 2602, 2606,
     2606, 2606, 2606, 2600, 2603,    0, 2603,    0, 2601, 2598,
     2604,    0, 2604,    0, 2605,    0, 2605, 2632, 2632, 2632,
     2632,    0,    0, 2606,    0, 2606, 2638, 2638, 2638, 2638,
     2661, 2661, 2661, 2661, 2632, 4295,    0, 2661,    0,    0,
     4295, 2632, 4295, 2661,    0, 2605, 2715, 2715, 2715, 2715,

     4295, 2602, 2716, 2716, 2716, 2716,    0, 2715,    0, 2604,
        0,    0, 2606, 2716, 2718, 2718, 2718, 2718, 2718,    0,
     2715, 2718, 2726, 2726, 2726, 2726, 2716, 2719, 2719, 2719,
     2719, 2737, 2737, 2737, 2737,    0, 2632,    0, 2718, 2638,
     2739, 2739, 2739, 2739, 2719,    0, 2726, 2741, 2741, 2741,
     2741, 2719,    0, 2715, 2742, 2742, 2742, 2742, 2764, 2764,
     2764, 2764, 2770, 2770, 2770, 2770,    0, 4303,    0, 2770,
     2771, 2771, 2771, 2771, 4303,    0, 4303, 2771,    0, 2771,
        0, 2716, 4303, 2771, 2773, 2773, 2773, 2773,    0, 2776,
     2776, 2776, 2776, 2719, 2771, 2718, 2725, 2725, 2725, 2725,

     2776,    0, 2725,    0, 2741,    0, 2776,    0, 2773,    0,
     2737, 2777, 2777, 2777, 2777, 2837, 2837, 2837, 2837, 2741,
     2725,    0, 2777, 2771,    0,    0, 2725,    0, 2777,    0,
     2778, 2778, 2778, 2778,    0,    0,    0, 2764,    0,    0,
     2725, 2778, 2844, 2844, 2844, 2844, 2725, 2778,    0, 4321,
     2725, 2725,    0, 2725, 2725, 2725, 4321,    0,    0, 2725,
     2725, 2725, 2725, 2725, 4321, 2725,    0, 2725, 2725, 2725,
     2725, 2725, 2779, 2779, 2779, 2779,    0, 2777, 2847, 2847,
     2847, 2847,    0, 2779, 2780, 2780, 2780, 2780,    0, 2779,
     2778, 2781, 2781, 2781, 2781, 2780, 2782, 2782, 2782, 2782,

        0, 2780, 2781, 2783, 2783, 2783, 2783, 2782, 2781, 2785,
     2785, 2785, 2785, 2782, 2783, 2784, 2784, 2784, 2784,    0,
     2783, 2786, 2786, 2786, 2786,    0, 2784,    0, 2787, 2787,
     2787, 2787, 2784, 2785, 4330, 2785, 4333,    0,    0, 2779,
        0, 4330, 2785, 4333,    0, 2786,    0, 2786, 2781, 4330,
        0, 4333, 2787, 2782, 2787,    0, 2786, 2780,    0, 2787,
     2783, 2788, 2788, 2788, 2788, 2789, 2789, 2789, 2789, 2790,
     2790, 2790, 2790, 2792, 2792, 2792, 2792, 2793, 2793, 2793,
     2793, 2794, 2794, 2794, 2794, 2788, 2784, 2788,    0, 2789,
        0, 2789, 2794, 2790,    0, 2790,    0, 2792,    0, 2792,

        0, 2793,    0, 2793,    0, 2794,    0, 2794,    0, 2795,
     2795, 2795, 2795, 2798, 2798, 2798, 2798, 2799, 2799, 2799,
     2799,    0, 2789,    0, 2788, 4347,    0, 2793, 2800, 2800,
     2800, 2800, 4347, 2795, 2793, 2795, 2793, 2798,    0, 2798,
     4347, 2799,    0, 2799,    0, 2792,    0,    0,    0, 2793,
        0, 2793, 2800,    0, 2800, 2801, 2801, 2801, 2801,    0,
     2801, 2802, 2802, 2802, 2802,    0, 2803, 2803, 2803, 2803,
     2804, 2804, 2804, 2804, 2805, 2805, 2805, 2805,    0, 2801,
     2799, 2801, 2795,    0,    0, 2802,    0, 2802,    0,    0,
     2803, 2800, 2803,    0, 2804,    0, 2804,    0, 2805,    0,

     2805, 2806, 2806, 2806, 2806,    0, 2807, 2807, 2807, 2807,
     2808, 2808, 2808, 2808, 2809, 2809, 2809, 2809, 2810, 2810,
     2810, 2810,    0, 2803,    0, 2806, 4363, 2806, 4368, 2804,
     2807,    0, 2807, 4363, 2808, 4368, 2808,    0, 2809, 2805,
     2809, 4363, 2810, 4368, 2810, 2811, 2811, 2811, 2811, 2812,
     2812, 2812, 2812, 2813, 2813, 2813, 2813, 2846, 2846, 2846,
     2846, 2807,    0, 4362, 4362, 2808,    0,    0, 2846, 2811,
     4362, 2811,    0, 2812,    0, 2812,    0, 2813, 4362, 2813,
     2814, 2814, 2814, 2814, 2815, 2815, 2815, 2815, 4371, 2816,
     2816, 2816, 2816, 4371, 4394, 4371, 2810, 2817, 2817, 2817,

     2817, 4394,    0, 4371, 2814, 4378, 2814, 4378, 2815, 4394,
     2815,    0, 2813, 2816, 4378, 2816,    0, 2811,    0,    0,
        0, 2817, 4378, 2817, 2818, 2818, 2818, 2818, 2821, 2821,
     2821, 2821,    0,    0, 4403, 2814,    0, 2822, 2822, 2822,
     2822, 4403,    0, 2815, 2850, 2850, 2850, 2850, 2818, 4403,
     2818,    0, 2821,    0, 2821, 2823, 2823, 2823, 2823,    0,
        0, 2822, 2816, 2822, 2824, 2824, 2824, 2824, 2818,    0,
     2817, 2825, 2825, 2825, 2825, 2826, 2826, 2826, 2826, 2823,
        0, 2823, 2827, 2827, 2827, 2827,    0, 2821, 2824,    0,
     2824, 2828, 2828, 2828, 2828, 2825, 2818, 2825,    0, 2826,

        0, 2826, 2830, 2830, 2830, 2830, 2827,    0, 2827, 2822,
     2831, 2831, 2831, 2831,    0, 2828,    0, 2828, 4426,    0,
        0, 2832, 2832, 2832, 2832, 4426, 2830,    0, 2830, 2833,
     2833, 2833, 2833, 4426, 2831, 2826, 2831, 2834, 2834, 2834,
     2834,    0,    0, 2824, 2825, 2832,    0, 2832, 2827, 2841,
     2841, 2841, 2841, 2833,    0, 2833, 2852, 2852, 2852, 2852,
     2841, 2834, 2852, 2834,    0,    0,    0, 2831, 2848, 2848,
     2848, 2848, 2853, 2853, 2853, 2853,    0,    0,    0, 2848,
        0,    0, 2831, 2855, 2855, 2855, 2855, 2857, 2857, 2857,
     2857,    0,    0,    0, 2833, 2910, 2910, 2910, 2910, 2832,

     2855,    0, 2834,    0,    0,    0, 2910, 2855,    0, 2911,
     2911, 2911, 2911, 2914, 2914, 2914, 2914,    0,    0, 2910,
     2911, 2841, 2916, 2916, 2916, 2916, 2918, 2918, 2918, 2918,
     2914,    0,    0, 2911,    0,    0,    0, 2914, 2855, 2919,
     2919, 2919, 2919, 2920, 2920, 2920, 2920, 2921, 2921, 2921,
     2921,    0, 2857, 2933, 2933, 2933, 2933, 2935, 2935, 2935,
     2935, 2937, 2937, 2937, 2937,    0,    0,    0, 2910,    0,
        0, 2921, 2914, 2940, 2940, 2940, 2940, 2942, 2942, 2942,
     2942, 2945, 2945, 2945, 2945,    0,    0,    0, 2911, 2948,
     2948, 2948, 2948, 2954, 2954, 2954, 2954, 2956, 2956, 2956,

     2956, 2957, 2957, 2957, 2957, 2945,    0, 2935, 2960, 2960,
     2960, 2960,    0,    0, 2935,    0, 2935, 2954,    0, 2967,
     2967, 2967, 2967,    0, 2968, 2968, 2968, 2968,    0, 2935,
     2967, 2935,    0,    0,    0, 2968, 2967, 2954,    0,    0,
        0, 2968, 2969, 2969, 2969, 2969, 2970, 2970, 2970, 2970,
        0,    0,    0, 2969,    0,    0,    0, 2970,    0, 2969,
        0,    0,    0, 2970,    0, 2954, 2971, 2971, 2971, 2971,
     2972, 2972, 2972, 2972,    0,    0,    0, 2971, 2967, 2968,
     2957, 2972,    0, 2971,    0,    0,    0, 2972,    0, 2973,
     2973, 2973, 2973, 2974, 2974, 2974, 2974, 2969,    0,    0,

     2973,    0,    0,    0, 2974, 2970, 2973,    0,    0,    0,
     2974, 2975, 2975, 2975, 2975,    0, 2976, 2976, 2976, 2976,
     2977, 2977, 2977, 2977, 2978, 2978, 2978, 2978,    0, 2979,
     2979, 2979, 2979,    0, 4440, 2975, 4451, 2975, 2972, 2971,
     2976, 4440, 2976, 4451, 2977,    0, 2977,    0, 2978, 4440,
     2978, 4451, 2974, 2979,    0, 2979,    0,    0, 2975,    0,
     2977, 2976, 2980, 2980, 2980, 2980, 2983, 2983, 2983, 2983,
     2984, 2984, 2984, 2984,    0, 2984,    0, 2983, 4459,    0,
     2984, 2985, 2985, 2985, 2985, 4459, 2980,    0, 2980,    0,
     2983,    0, 2983, 4459,    0,    0, 2978, 2988, 2988, 2988,

     2988,    0, 2979,    0,    0, 2985,    0, 2985, 2989, 2989,
     2989, 2989, 2990, 2990, 2990, 2990,    0, 2990,    0,    0,
        0, 2988, 4461, 2988, 4462, 2992, 2992, 2992, 2992, 4461,
        0, 4462, 2989,    0, 2989,    0, 2990, 4461, 2990, 4462,
     2985,    0, 2993, 2993, 2993, 2993,    0,    0,    0, 2992,
        0, 2992,    0,    0, 2995, 2995, 2995, 2995,    0, 2996,
     2996, 2996, 2996,    0,    0, 2988, 2993,    0, 2993, 2997,
     2997, 2997, 2997,    0, 3000, 3000, 3000, 3000, 2995,    0,
     2995, 2989, 2992, 2996,    0, 2996, 3028, 3028, 3028, 3028,
        0,    0,    0, 2997,    0, 2997,    0, 2992, 3000, 2992,

     2994, 2994, 2994, 2994, 2994, 2994, 2994, 2994, 2994, 2994,
     2994, 2994, 2994, 2994, 2994, 2994, 2994, 2994, 2994, 2994,
     2998, 2998, 2998, 2998,    0, 2994, 2997, 2994, 2994, 2994,
     2994, 2994, 2995, 2999, 2999, 2999, 2999, 3001, 3001, 3001,
     3001,    0,    0,    0, 2998,    0, 2998, 3002, 3002, 3002,
     3002, 2994, 2994, 2994, 2994, 2994,    0, 2999,    0, 2999,
        0, 3001,    0, 3001, 3003, 3003, 3003, 3003,    0,    0,
        0, 3002, 4468, 3002, 3004, 3004, 3004, 3004,    0, 4468,
     2994, 2994, 2994, 2994,    0, 2998,    0, 4468, 3003,    0,
     3003, 3005, 3005, 3005, 3005,    0,    0,    0, 3004,    0,

     3004, 3006, 3006, 3006, 3006, 3007, 3007, 3007, 3007, 4469,
     3008, 3008, 3008, 3008,    0, 3005, 4469, 3005, 3009, 3009,
     3009, 3009,    0,    0, 4469, 3006,    0, 3006,    0, 3007,
        0, 3007,    0,    0, 3008,    0, 3008, 3010, 3010, 3010,
     3010,    0, 3009,    0, 3009, 3006,    0,    0, 3005,    0,
     3011, 3011, 3011, 3011, 3012, 3012, 3012, 3012,    0,    0,
        0, 3010, 3009, 3016, 3016, 3016, 3016,    0, 3007, 3008,
        0,    0,    0, 3006, 3011,    0, 3011,    0, 3012,    0,
     3012,    0,    0, 3007,    0,    0,    0, 3016,    0, 3016,
     3009, 3017, 3017, 3017, 3017,    0, 3018, 3018, 3018, 3018,

     3020, 3020, 3020, 3020, 3011, 3021, 3021, 3021, 3021, 3022,
     3022, 3022, 3022,    0,    0, 3017,    0, 3017,    0, 3012,
     3018,    0, 3018,    0, 3020,    0, 3020,    0,    0, 3021,
        0, 3021,    0, 3022,    0, 3022, 3025, 3025, 3025, 3025,
     3026, 3026, 3026, 3026,    0, 3027, 3027, 3027, 3027,    0,
     3031, 3031, 3031, 3031, 3032, 3032, 3032, 3032,    0, 3020,
     3025, 3031, 3025,    0, 3026,    0, 3026,    0, 3022, 3027,
        0, 3027, 3033, 3033, 3033, 3033, 3037, 3037, 3037, 3037,
     3039, 3039, 3039, 3039,    0,    0,    0, 3037, 3040, 3040,
     3040, 3040, 3042, 3042, 3042, 3042,    0,    0, 3042, 3043,

     3043, 3043, 3043,    0, 3027, 3025, 3045, 3045, 3045, 3045,
     3046, 3046, 3046, 3046, 3091, 3091, 3091, 3091, 3092, 3092,
     3092, 3092,    0, 3045, 3093, 3093, 3093, 3093,    0,    0,
     3045, 3091, 3095, 3095, 3095, 3095,    0,    0, 3091, 3096,
     3096, 3096, 3096, 3097, 3097, 3097, 3097, 3104, 3104, 3104,
     3104, 3109, 3109, 3109, 3109, 3113, 3113, 3113, 3113, 3115,
     3115, 3115, 3115, 3045,    0,    0,    0, 3097,    0, 3046,
     3118, 3118, 3118, 3118, 3119, 3119, 3119, 3119,    0,    0,
        0, 3091, 3120, 3120, 3120, 3120, 3121, 3121, 3121, 3121,
     3122, 3122, 3122, 3122, 3118, 3123, 3123, 3123, 3123, 3125,

     3125, 3125, 3125, 3128, 3128, 3128, 3128,    0,    0,    0,
     3121, 3129, 3129, 3129, 3129, 3132, 3132, 3132, 3132, 3133,
     3133, 3133, 3133, 3125,    0,    0,    0, 3128, 3134, 3134,
     3134, 3134, 3135, 3135, 3135, 3135,    0,    0,    0, 3132,
        0,    0,    0, 3125,    0,    0,    0, 3128, 3138, 3138,
     3138, 3138, 3141, 3141, 3141, 3141, 3142, 3142, 3142, 3142,
        0,    0,    0, 3141,    0,    0,    0, 3142,    0, 3141,
        0, 3125,    0, 3142,    0, 3128, 3143, 3143, 3143, 3143,
     3144, 3144, 3144, 3144,    0,    0,    0, 3143, 4358,    0,
        0, 3144,    0, 3143,    0, 4358,    0, 3144, 3145, 3145,

     3145, 3145, 4358, 3146, 3146, 3146, 3146,    0,    0, 3145,
     4358,    0,    0, 3142, 3146, 3145,    0,    0,    0, 3141,
     3146, 3147, 3147, 3147, 3147, 3148, 3148, 3148, 3148,    0,
        0,    0, 3147,    0,    0,    0, 3148, 3149, 3149, 3149,
     3149, 3143, 3148, 3150, 3150, 3150, 3150, 3151, 3151, 3151,
     3151, 3152, 3152, 3152, 3152,    0,    0, 3145,    0,    0,
        0, 3149,    0, 3149,    0,    0,    0, 3150, 3146, 3150,
        0, 3151,    0, 3151,    0, 3152,    0, 3152, 3153, 3153,
     3153, 3153,    0, 3148, 3154, 3154, 3154, 3154,    0,    0,
     3150,    0,    0, 3151,    0, 3156, 3156, 3156, 3156,    0,

     3156,    0, 3153,    0, 3153, 3156,    0,    0, 3154,    0,
     3154,    0,    0, 3152, 3158, 3158, 3158, 3158,    0, 3161,
     3161, 3161, 3161, 3162, 3162, 3162, 3162, 3167, 3167, 3167,
     3167, 3169, 3169, 3169, 3169,    0,    0,    0, 3158,    0,
     3158,    0,    0, 3161,    0, 3161,    0, 3162,    0, 3162,
        0, 3167,    0, 3167,    0, 3169,    0, 3169, 3170, 3170,
     3170, 3170,    0, 3171, 3171, 3171, 3171, 3172, 3172, 3172,
     3172, 3173, 3173, 3173, 3173,    0, 3174, 3174, 3174, 3174,
        0,    0, 3170,    0, 3170, 3158, 3161, 3171,    0, 3171,
        0, 3172,    0, 3172, 3175, 3175, 3175, 3175,    0, 3169,

     3174,    0, 3174, 3176, 3176, 3176, 3176, 3177, 3177, 3177,
     3177, 3178, 3178, 3178, 3178,    0,    0,    0, 3175,    0,
     3175,    0, 3171, 3179, 3179, 3179, 3179, 3176,    0, 3176,
        0, 3177,    0, 3177,    0, 3178,    0, 3178, 3180, 3180,
     3180, 3180,    0, 3181, 3181, 3181, 3181, 3179, 3182, 3182,
     3182, 3182,    0,    0,    0, 3178, 3183, 3183, 3183, 3183,
        0,    0, 3180,    0, 3180,    0, 3177, 3181,    0, 3181,
        0,    0, 3182,    0, 3182, 3184, 3184, 3184, 3184,    0,
     3183,    0, 3183, 3178, 3185, 3185, 3185, 3185, 3186, 3186,
     3186, 3186, 3180, 3187, 3187, 3187, 3187,    0,    0, 3184,

        0, 3184, 3190, 3190, 3190, 3190,    0, 3182, 3181,    0,
        0,    0, 3186,    0, 3186,    0,    0, 3187,    0, 3187,
     3191, 3191, 3191, 3191,    0,    0, 3190,    0, 3190, 3192,
     3192, 3192, 3192, 3184, 3186,    0, 3193, 3193, 3193, 3193,
     3194, 3194, 3194, 3194, 3191, 4359, 3191, 3197, 3197, 3197,
     3197,    0, 4359, 3192, 3198, 3198, 3198, 3198,    0, 4359,
     3193, 3187, 3193,    0, 3194,    0, 3194, 4359,    0,    0,
     3190, 3197,    0, 3197, 3199, 3199, 3199, 3199, 3198,    0,
     3198, 3203, 3203, 3203, 3203,    0, 3193, 3204, 3204, 3204,
     3204,    0,    0, 3193,    0, 3193, 3205, 3205, 3205, 3205,

        0, 3206, 3206, 3206, 3206,    0, 3197, 3206, 3193,    0,
     3193, 3193, 3207, 3207, 3207, 3207, 3209, 3209, 3209, 3209,
     3224, 3224, 3224, 3224, 3244, 3244, 3244, 3244, 3245, 3245,
     3245, 3245,    0, 3209, 3246, 3246, 3246, 3246,    0, 3199,
     3209, 3244, 3247, 3247, 3247, 3247,    0,    0, 3244, 3248,
     3248, 3248, 3248, 3252, 3252, 3252, 3252, 3255, 3255, 3255,
     3255, 3259, 3259, 3259, 3259, 3260, 3260, 3260, 3260, 3263,
     3263, 3263, 3263, 3248,    0, 3209, 3264, 3264, 3264, 3264,
     3266, 3266, 3266, 3266, 3267, 3267, 3267, 3267, 3268, 3268,
     3268, 3268, 3269, 3269, 3269, 3269,    0, 3244, 3271, 3271,

     3271, 3271,    0,    0, 3266, 3272, 3272, 3272, 3272,    0,
        0,    0, 3268, 3276, 3276, 3276, 3276, 3280, 3280, 3280,
     3280,    0, 3271, 3281, 3281, 3281, 3281, 3282, 3282, 3282,
     3282, 3283, 3283, 3283, 3283, 3285, 3285, 3285, 3285,    0,
        0, 3280, 3271, 3286, 3286, 3286, 3286, 3287, 3287, 3287,
     3287,    0,    0,    0, 3286,    0,    0,    0, 3287,    0,
     3286,    0,    0,    0, 3287, 3288, 3288, 3288, 3288,    0,
     3271,    0, 3289, 3289, 3289, 3289, 3288, 3282, 3290, 3290,
     3290, 3290, 3288, 3289, 3282,    0, 3282,    0,    0, 3290,
        0, 3293, 3293, 3293, 3293, 3290,    0,    0,    0, 3282,

        0, 3282, 3282,    0,    0,    0, 3287, 3291, 3291, 3291,
     3291, 3292, 3292, 3292, 3292, 3293, 3286, 3293, 3291,    0,
        0,    0, 3292,    0, 3291,    0,    0,    0, 3292, 3294,
     3294, 3294, 3294,    0,    0,    0, 3290,    0,    0,    0,
     3293, 3295, 3295, 3295, 3295, 3296, 3296, 3296, 3296, 3299,
     3299, 3299, 3299, 3294,    0, 3294, 3300, 3300, 3300, 3300,
     3301, 3301, 3301, 3301,    0, 3295,    0, 3295,    0, 3296,
        0, 3296,    0, 3299,    0, 3299, 3307, 3307, 3307, 3307,
     3300,    0, 3300, 3308, 3308, 3308, 3308,    0, 3294, 3309,
     3309, 3309, 3309, 3310, 3310, 3310, 3310,    0,    0,    0,

     3307,    0, 3307,    0,    0, 3296,    0, 3308,    0, 3308,
        0,    0,    0, 3309,    0, 3309,    0, 3310,    0, 3310,
     3311, 3311, 3311, 3311, 3313, 3313, 3313, 3313,    0, 3321,
     3321, 3321, 3321, 3324, 3324, 3324, 3324,    0,    0, 3301,
        0,    0,    0, 3307, 3311, 3312, 3312, 3312, 3312, 3312,
     3312, 3312, 3312, 3312, 3312, 3312, 3312, 3312, 3312, 3312,
     3312, 3312, 3312, 3312, 3312, 3314, 3314, 3314, 3314,    0,
     3312, 3312, 3312, 3312, 3312, 3312, 3312, 3315, 3315, 3315,
     3315, 3316, 3316, 3316, 3316, 3332, 3332, 3332, 3332, 3314,
        0, 3314, 3317, 3317, 3317, 3317, 3312, 3312, 3312, 3312,

        0, 3315,    0, 3315,    0, 3316,    0, 3316, 3321,    0,
        0, 3314, 3318, 3318, 3318, 3318, 3317,    0, 3317,    0,
     3319, 3319, 3319, 3319,    0, 3312, 3312, 3312, 3312,    0,
        0, 3320, 3320, 3320, 3320,    0, 3318,    0, 3318, 3323,
     3323, 3323, 3323,    0, 3319, 3315, 3319, 3327, 3327, 3327,
     3327,    0,    0, 3316,    0, 3320, 3318, 3320,    0,    0,
     3319,    0,    0, 3323,    0, 3323, 3330, 3330, 3330, 3330,
        0, 3327,    0, 3327, 3333, 3333, 3333, 3333, 3334, 3334,
     3334, 3334,    0,    0, 3318, 3335, 3335, 3335, 3335,    0,
     3330,    0, 3330, 3336, 3336, 3336, 3336, 3337, 3337, 3337,

     3337,    0,    0,    0, 3320,    0, 3323, 3338, 3338, 3338,
     3338,    0,    0, 3338, 3339, 3339, 3339, 3339, 3340, 3340,
     3340, 3340, 3341, 3341, 3341, 3341, 3350, 3350, 3350, 3350,
     3366, 3366, 3366, 3366, 3367, 3367, 3367, 3367,    0, 3341,
     3368, 3368, 3368, 3368,    0,    0, 3341, 3366, 3369, 3369,
     3369, 3369,    0,    0, 3366, 3372, 3372, 3372, 3372, 3373,
     3373, 3373, 3373, 3375, 3375, 3375, 3375, 3376, 3376, 3376,
     3376,    0, 3369, 3378, 3378, 3378, 3378, 3380, 3380, 3380,
     3380, 3381, 3381, 3381, 3381, 3382, 3382, 3382, 3382, 3383,
     3383, 3383, 3383, 3384, 3384, 3384, 3384, 3385, 3385, 3385,

     3385,    0, 3366, 3386, 3386, 3386, 3386, 3390, 3390, 3390,
     3390, 3391, 3391, 3391, 3391,    0,    0, 3384, 3394, 3394,
     3394, 3394, 3395, 3395, 3395, 3395, 3396, 3396, 3396, 3396,
     3397, 3397, 3397, 3397,    0, 3391,    0, 3396,    0,    0,
        0, 3397,    0, 3396,    0,    0,    0, 3397, 3398, 3398,
     3398, 3398,    0,    0,    0, 3391,    0,    0,    0, 3398,
     3399, 3399, 3399, 3399, 3400, 3400, 3400, 3400,    0,    0,
        0, 3399,    0,    0,    0, 3400,    0, 3399,    0,    0,
        0, 3396,    0, 3391, 3401, 3401, 3401, 3401, 3402, 3402,
     3402, 3402,    0,    0,    0, 3401, 3403, 3403, 3403, 3403,

     3404, 3404, 3404, 3404, 3405, 3405, 3405, 3405, 3407, 3407,
     3407, 3407, 3402,    0, 3402, 3408, 3408, 3408, 3408,    0,
     3403,    0, 3403,    0, 3404,    0, 3404, 3414, 3414, 3414,
     3414,    0, 3407,    0, 3407, 3415, 3415, 3415, 3415, 3416,
     3416, 3416, 3416, 3417, 3417, 3417, 3417, 3422, 3422, 3422,
     3422, 3414,    0, 3414, 3403, 3404,    0,    0,    0, 3415,
        0, 3415,    0, 3416,    0, 3416, 3423, 3423, 3423, 3423,
        0, 3422,    0, 3422, 3425, 3425, 3425, 3425, 3427, 3427,
     3427, 3427,    0, 3405, 3414, 3432, 3432, 3432, 3432,    0,
     3423,    0, 3423,    0, 3408,    0, 3416,    0, 3425,    0,

     3425,    0, 3427,    0,    0,    0, 3423, 3441, 3441, 3441,
     3441, 3416, 3419, 3419, 3419, 3419, 3419, 3419, 3419, 3419,
     3419, 3419, 3419, 3419, 3419, 3419, 3419, 3419, 3419, 3419,
     3419, 3419, 3442, 3442, 3442, 3442,    0, 3419, 3419, 3419,
     3419, 3419, 3419, 3419, 3419, 3419, 3419, 3419, 3419, 3419,
     3419, 3419, 3419, 3419, 3419, 3419, 3419, 3419, 3419, 3419,
     3419, 3419, 3419, 3419, 3419, 3419, 3419, 3419, 3419, 3419,
     3419, 3419, 3419, 3419, 3419, 3419, 3419, 3419, 3419, 3419,
     3419, 3419, 3419, 3419, 3419, 3419, 3419, 3419, 3419, 3419,
     3419, 3419, 3419, 3419, 3419, 3419, 3424, 3424, 3424, 3424,

     3426, 3426, 3426, 3426, 3428, 3428, 3428, 3428, 3429, 3429,
     3429, 3429, 3430, 3430, 3430, 3430, 3431, 3431, 3431, 3431,
     3424,    0, 3424,    0, 3426,    0, 3426,    0, 3428,    0,
     3428,    0, 3429,    0, 3429,    0, 3430,    0, 3430,    0,
     3431,    0, 3431,    0, 3426, 3434, 3434, 3434, 3434,    0,
     3435, 3435, 3435, 3435, 3430,    0,    0,    0, 3428, 3440,
     3440, 3440, 3440,    0,    0, 3440,    0,    0,    0, 3424,
        0,    0, 3426, 3429, 3435,    0, 3435, 3443, 3443, 3443,
     3443, 3463, 3463, 3463, 3463,    0,    0,    0, 3431, 3464,
     3464, 3464, 3464,    0, 3443,    0,    0,    0, 3463,    0,

        0, 3443,    0,    0,    0, 3463,    0, 3435, 3465, 3465,
     3465, 3465, 3467, 3467, 3467, 3467, 3468, 3468, 3468, 3468,
     3469, 3469, 3469, 3469, 3434, 3470, 3470, 3470, 3470,    0,
        0,    0, 3465, 3471, 3471, 3471, 3471, 3474, 3474, 3474,
     3474, 3475, 3475, 3475, 3475, 3476, 3476, 3476, 3476, 3477,
     3477, 3477, 3477, 3480, 3480, 3480, 3480, 3481, 3481, 3481,
     3481, 3482, 3482, 3482, 3482, 3487, 3487, 3487, 3487, 3488,
     3488, 3488, 3488,    0,    0,    0, 3487, 3480,    0,    0,
     3488, 3481, 3487, 3489, 3489, 3489, 3489, 3490, 3490, 3490,
     3490,    0,    0,    0, 3489, 3491, 3491, 3491, 3491,    0,

        0, 3481, 3476,    0, 3495, 3495, 3495, 3495,    0,    0,
        0, 3490,    0, 3490,    0,    0,    0, 3476, 3499, 3499,
     3499, 3499, 3500, 3500, 3500, 3500,    0,    0, 3495, 3481,
     3495, 3501, 3501, 3501, 3501,    0,    0,    0, 3487,    0,
     3502, 3502, 3502, 3502, 3490, 3499,    0,    0,    0, 3500,
     3503, 3503, 3503, 3503,    0, 3501,    0, 3501, 3504, 3504,
     3504, 3504,    0, 3495, 3502,    0, 3502, 3505, 3505, 3505,
     3505,    0,    0, 3501, 3503,    0, 3503, 3506, 3506, 3506,
     3506,    0, 3504, 3507, 3507, 3507, 3507, 3508, 3508, 3508,
     3508, 3509, 3509, 3509, 3509, 3510, 3510, 3510, 3510,    0,

        0, 3506,    0, 3506,    0,    0,    0, 3507,    0, 3507,
        0, 3508, 3502, 3508,    0, 3509,    0, 3509, 3512, 3512,
     3512, 3512,    0, 3506, 3513, 3513, 3513, 3513,    0, 3516,
     3516, 3516, 3516,    0, 3508, 3516, 3517, 3517, 3517, 3517,
        0,    0, 3512,    0, 3512, 3527, 3527, 3527, 3527,    0,
        0, 3507, 3528, 3528, 3528, 3528, 3529, 3529, 3529, 3529,
     3531, 3531, 3531, 3531, 3532, 3532, 3532, 3532,    0, 3527,
     3536, 3536, 3536, 3536,    0,    0,    0, 3512,    0,    0,
     3529, 3537, 3537, 3537, 3537, 3541, 3541, 3541, 3541, 3542,
     3542, 3542, 3542,    0, 3536, 3543, 3543, 3543, 3543,    0,

     3542,    0,    0, 3513,    0,    0, 3542,    0,    0, 3541,
     3544, 3544, 3544, 3544, 3548, 3548, 3548, 3548,    0, 3543,
        0, 3543, 3549, 3549, 3549, 3549,    0, 3551, 3551, 3551,
     3551, 3552, 3552, 3552, 3552, 3553, 3553, 3553, 3553,    0,
        0, 3548, 3554, 3554, 3554, 3554,    0,    0,    0, 3549,
        0, 3551, 3542, 3551, 3543, 3552,    0, 3552,    0, 3555,
     3555, 3555, 3555,    0,    0,    0, 3554,    0, 3554, 3556,
     3556, 3556, 3556,    0, 3551, 3557, 3557, 3557, 3557,    0,
        0,    0, 3554, 3555,    0, 3555, 3558, 3558, 3558, 3558,
        0,    0,    0, 3556,    0, 3556,    0,    0,    0, 3557,

        0, 3557, 3559, 3559, 3559, 3559, 3561, 3561, 3561, 3561,
     3558, 3563, 3563, 3563, 3563, 3556,    0, 3563, 3564, 3564,
     3564, 3564, 3571, 3571, 3571, 3571, 3572, 3572, 3572, 3572,
        0,    0, 3555, 3576, 3576, 3576, 3576, 3580, 3580, 3580,
     3580, 3581, 3581, 3581, 3581, 3582, 3582, 3582, 3582,    0,
     3572, 3583, 3583, 3583, 3583,    0, 3582, 3576,    0,    0,
        0, 3580, 3582, 3586, 3586, 3586, 3586, 3587, 3587, 3587,
     3587, 3588, 3588, 3588, 3588, 3589, 3589, 3589, 3589, 3590,
     3590, 3590, 3590,    0,    0, 3561,    0, 3586,    0, 3586,
        0, 3587,    0, 3587,    0, 3588,    0,    0,    0, 3589,

        0, 3589,    0, 3590,    0, 3590,    0,    0,    0, 3586,
        0,    0,    0, 3582,    0,    0,    0, 3589, 3591, 3591,
     3591, 3591, 3592, 3592, 3592, 3592, 3595, 3595, 3595, 3595,
        0,    0, 3595, 3596, 3596, 3596, 3596, 3599, 3599, 3599,
     3599, 3600, 3600, 3600, 3600, 3603, 3603, 3603, 3603,    0,
        0, 3590, 3604, 3604, 3604, 3604, 3607, 3607, 3607, 3607,
     3610, 3610, 3610, 3610,    0, 3600,    0, 3607,    0, 3603,
        0,    0,    0, 3607, 3611, 3611, 3611, 3611, 3612, 3612,
     3612, 3612, 3614, 3614, 3614, 3614,    0,    0, 3614, 3615,
     3615, 3615, 3615, 3616, 3616, 3616, 3616,    0, 3611,    0,

     3611,    0, 3612,    0, 3612, 3617, 3617, 3617, 3617, 3620,
     3620, 3620, 3620, 3621, 3621, 3621, 3621, 3622, 3622, 3622,
     3622, 3611,    0, 3607, 3621, 3624, 3624, 3624, 3624, 3617,
     3621,    0,    0, 3620, 3625, 3625, 3625, 3625, 3626, 3626,
     3626, 3626, 3628, 3628, 3628, 3628,    0,    0, 3628, 3624,
        0, 3624, 3629, 3629, 3629, 3629,    0,    0, 3625,    0,
     3625,    0, 3626, 3630, 3630, 3630, 3630, 3631, 3631, 3631,
     3631, 3624, 3632, 3632, 3632, 3632, 3634, 3634, 3634, 3634,
     3635, 3635, 3635, 3635, 3636, 3636, 3636, 3636,    0,    0,
        0, 3631,    0,    0,    0, 3636, 3622,    0,    0,    0,

     3634, 3637, 3637, 3637, 3637, 3639, 3639, 3639, 3639, 3640,
     3640, 3640, 3640, 3641, 3641, 3641, 3641, 3642, 3642, 3642,
     3642,    0,    0, 3642, 3643, 3643, 3643, 3643, 3644, 3644,
     3644, 3644, 3645, 3645, 3645, 3645, 3646, 3646, 3646, 3646,
     3641, 3647, 3647, 3647, 3647, 3649, 3649, 3649, 3649, 3650,
     3650, 3650, 3650,    0, 3650,    0, 3645,    0,    0, 3650,
     3651, 3651, 3651, 3651,    0,    0, 3651, 3652, 3652, 3652,
     3652,    0, 3649, 3653, 3653, 3653, 3653, 3654, 3654, 3654,
     3654,    0,    0,    0, 3639, 3655, 3655, 3655, 3655,    0,
     3655, 3658, 3658, 3658, 3658, 3655,    0, 3658,    0,    0,

        0, 3654, 3659, 3659, 3659, 3659, 3660, 3660, 3660, 3660,
     3661, 3661, 3661, 3661, 3663, 3663, 3663, 3663, 3650,    0,
     3663, 3664, 3664, 3664, 3664, 3665, 3665, 3665, 3665, 3666,
     3666, 3666, 3666,    0, 3661, 3667, 3667, 3667, 3667,    0,
     3667, 3668, 3668, 3668, 3668, 3667,    0, 3668, 3669, 3669,
     3669, 3669,    0, 3666, 3655, 3670, 3670, 3670, 3670, 3671,
     3671, 3671, 3671, 3667, 3672, 3672, 3672, 3672, 3673, 3673,
     3673, 3673, 3675, 3675, 3675, 3675,    0,    0, 3675, 3676,
     3676, 3676, 3676, 3671, 3677, 3677, 3677, 3677, 3678, 3678,
     3678, 3678, 3672,    0,    0,    0, 3673, 3679, 3679, 3679,

     3679,    0,    0, 3679, 3680, 3680, 3680, 3680, 3681, 3681,
     3681, 3681, 3678, 3682, 3682, 3682, 3682, 3683, 3683, 3683,
     3683,    0,    0, 3683, 3684, 3684, 3684, 3684, 3685, 3685,
     3685, 3685, 3686, 3686, 3686, 3686,    0, 3682, 3687, 3687,
     3687, 3687,    0,    0, 3687, 3688, 3688, 3688, 3688, 3689,
     3689, 3689, 3689,    0,    0,    0, 3686, 3690, 3690, 3690,
     3690, 3691, 3691, 3691, 3691,    0,    0, 3691, 3692, 3692,
     3692, 3692, 3693, 3693, 3693, 3693, 3694, 3694, 3694, 3694,
        0, 3690, 3695, 3695, 3695, 3695,    0,    0, 3695, 3696,
     3696, 3696, 3696, 3697, 3697, 3697, 3697,    0,    0,    0,

     3694, 3698, 3698, 3698, 3698, 3699, 3699, 3699, 3699,    0,
        0, 3699, 3700, 3700, 3700, 3700, 3701, 3701, 3701, 3701,
     3702, 3702, 3702, 3702,    0, 3698, 3703, 3703, 3703, 3703,
        0,    0, 3703, 3704, 3704, 3704, 3704, 3705, 3705, 3705,
     3705,    0,    0,    0, 3702, 3706, 3706, 3706, 3706, 3707,
     3707, 3707, 3707,    0,    0, 3707, 3708, 3708, 3708, 3708,
     3709, 3709, 3709, 3709, 3710, 3710, 3710, 3710,    0, 3706,
     3711, 3711, 3711, 3711,    0,    0, 3711, 3712, 3712, 3712,
     3712, 3713, 3713, 3713, 3713,    0,    0,    0, 3710, 3714,
     3714, 3714, 3714, 3715, 3715, 3715, 3715,    0,    0, 3715,

     3716, 3716, 3716, 3716, 3717, 3717, 3717, 3717, 3718, 3718,
     3718, 3718,    0, 3714, 3719, 3719, 3719, 3719,    0,    0,
     3719, 3720, 3720, 3720, 3720, 3721, 3721, 3721, 3721,    0,
        0,    0, 3718, 3722, 3722, 3722, 3722, 3723, 3723, 3723,
     3723,    0,    0, 3723, 3724, 3724, 3724, 3724, 3725, 3725,
     3725, 3725, 3726, 3726, 3726, 3726,    0, 3722, 3727, 3727,
     3727, 3727,    0,    0, 3727, 3728, 3728, 3728, 3728, 3729,
     3729, 3729, 3729,    0,    0,    0, 3726, 3730, 3730, 3730,
     3730, 3731, 3731, 3731, 3731,    0,    0, 3731, 3732, 3732,
     3732, 3732, 3733, 3733, 3733, 3733, 3734, 3734, 3734, 3734,

        0, 3730, 3735, 3735, 3735, 3735,    0,    0, 3735, 3736,
     3736, 3736, 3736, 3737, 3737, 3737, 3737,    0,    0,    0,
     3734, 3738, 3738, 3738, 3738, 3739, 3739, 3739, 3739,    0,
        0, 3739, 3740, 3740, 3740, 3740, 3741, 3741, 3741, 3741,
     3742, 3742, 3742, 3742,    0, 3738, 3743, 3743, 3743, 3743,
        0,    0, 3743, 3744, 3744, 3744, 3744, 3745, 3745, 3745,
     3745,    0,    0,    0, 3742, 3746, 3746, 3746, 3746, 3747,
     3747, 3747, 3747,    0,    0, 3747, 3748, 3748, 3748, 3748,
     3749, 3749, 3749, 3749, 3750, 3750, 3750, 3750,    0, 3746,
     3751, 3751, 3751, 3751,    0,    0, 3751, 3752, 3752, 3752,

     3752, 3753, 3753, 3753, 3753,    0,    0,    0, 3750, 3754,
     3754, 3754, 3754, 3755, 3755, 3755, 3755,    0,    0, 3755,
     3756, 3756, 3756, 3756, 3757, 3757, 3757, 3757, 3758, 3758,
     3758, 3758,    0, 3754, 3759, 3759, 3759, 3759,    0,    0,
     3759, 3760, 3760, 3760, 3760, 3761, 3761, 3761, 3761,    0,
        0,    0, 3758, 3762, 3762, 3762, 3762, 3763, 3763, 3763,
     3763,    0,    0, 3763, 3764, 3764, 3764, 3764, 3765, 3765,
     3765, 3765, 3766, 3766, 3766, 3766,    0, 3762, 3767, 3767,
     3767, 3767,    0,    0, 3767, 3768, 3768, 3768, 3768, 3769,
     3769, 3769, 3769,    0,    0,    0, 3766, 3770, 3770, 3770,

     3770, 3771, 3771, 3771, 3771,    0,    0, 3771, 3772, 3772,
     3772, 3772, 3773, 3773, 3773, 3773, 3774, 3774, 3774, 3774,
        0, 3770, 3775, 3775, 3775, 3775,    0,    0, 3775, 3776,
     3776, 3776, 3776, 3777, 3777, 3777, 3777,    0,    0,    0,
     3774, 3778, 3778, 3778, 3778, 3779, 3779, 3779, 3779,    0,
        0, 3779, 3780, 3780, 3780, 3780, 3781, 3781, 3781, 3781,
     3782, 3782, 3782, 3782,    0, 3778, 3783, 3783, 3783, 3783,
        0,    0, 3783, 3784, 3784, 3784, 3784, 3785, 3785, 3785,
     3785,    0,    0,    0, 3782, 3786, 3786, 3786, 3786, 3787,
     3787, 3787, 3787,    0,    0, 3787, 3788, 3788, 3788, 3788,

     3789, 3789, 3789, 3789, 3790, 3790, 3790, 3790,    0, 3786,
     3791, 3791, 3791, 3791,    0,    0, 3791, 3792, 3792, 3792,
     3792, 3793, 3793, 3793, 3793,    0,    0,    0, 3790, 3794,
     3794, 3794, 3794, 3795, 3795, 3795, 3795,    0,    0, 3795,
     3796, 3796, 3796, 3796, 3797, 3797, 3797, 3797, 3798, 3798,
     3798, 3798,    0, 3794, 3799, 3799, 3799, 3799,    0,    0,
     3799, 3800, 3800, 3800, 3800, 3801, 3801, 3801, 3801,    0,
        0,    0, 3798, 3802, 3802, 3802, 3802, 3803, 3803, 3803,
     3803,    0,    0, 3803, 3804, 3804, 3804, 3804, 3805, 3805,
     3805, 3805, 3806, 3806, 3806, 3806,    0, 3802, 3807, 3807,

     3807, 3807,    0,    0, 3807, 3808, 3808, 3808, 3808, 3809,
     3809, 3809, 3809,    0,    0,    0, 3806, 3810, 3810, 3810,
     3810, 3811, 3811, 3811, 3811,    0,    0, 3811, 3812, 3812,
     3812, 3812, 3813, 3813, 3813, 3813, 3814, 3814, 3814, 3814,
        0, 3810, 3815, 3815, 3815, 3815,    0,    0, 3815, 3816,
     3816, 3816, 3816, 3817, 3817, 3817, 3817,    0,    0,    0,
     3814, 3818, 3818, 3818, 3818, 3819, 3819, 3819, 3819,    0,
        0, 3819, 3820, 3820, 3820, 3820, 3821, 3821, 3821, 3821,
     3822, 3822, 3822, 3822,    0, 3818, 3823, 3823, 3823, 3823,
        0,    0, 3823, 3824, 3824, 3824, 3824, 3825, 3825, 3825,

     3825,    0,    0,    0, 3822, 3826, 3826, 3826, 3826, 3827,
     3827, 3827, 3827,    0,    0, 3827, 3828, 3828, 3828, 3828,
     3829, 3829, 3829, 3829, 3830, 3830, 3830, 3830,    0, 3826,
     3831, 3831, 3831, 3831,    0,    0, 3831, 3832, 3832, 3832,
     3832, 3833, 3833, 3833, 3833,    0,    0,    0, 3830, 3834,
     3834, 3834, 3834, 3835, 3835, 3835, 3835,    0,    0, 3835,
     3836, 3836, 3836, 3836, 3837, 3837, 3837, 3837, 3838, 3838,
     3838, 3838,    0, 3834, 3839, 3839, 3839, 3839,    0,    0,
     3839, 3840, 3840, 3840, 3840, 3841, 3841, 3841, 3841,    0,
        0,    0, 3838, 3842, 3842, 3842, 3842, 3843, 3843, 3843,

     3843,    0,    0, 3843, 3844, 3844, 3844, 3844, 3845, 3845,
     3845, 3845, 3846, 3846, 3846, 3846,    0, 3842, 3847, 3847,
     3847, 3847,    0,    0, 3847, 3848, 3848, 3848, 3848, 3849,
     3849, 3849, 3849,    0,    0,    0, 3846, 3850, 3850, 3850,
     3850, 3851, 3851, 3851, 3851,    0,    0, 3851, 3852, 3852,
     3852, 3852, 3853, 3853, 3853, 3853, 3854, 3854, 3854, 3854,
        0, 3850, 3855, 3855, 3855, 3855,    0,    0, 3855, 3856,
     3856, 3856, 3856, 3857, 3857, 3857, 3857,    0,    0,    0,
     3854, 3858, 3858, 3858, 3858, 3859, 3859, 3859, 3859,    0,
        0, 3859, 3860, 3860, 3860, 3860, 3861, 3861, 3861, 3861,

     3862, 3862, 3862, 3862,    0, 3858, 3863, 3863, 3863, 3863,
        0,    0, 3863, 3864, 3864, 3864, 3864, 3865, 3865, 3865,
     3865,    0,    0,    0, 3862, 3866, 3866, 3866, 3866, 3867,
     3867, 3867, 3867,    0,    0, 3867, 3868, 3868, 3868, 3868,
     3869, 3869, 3869, 3869, 3870, 3870, 3870, 3870,    0, 3866,
     3871, 3871, 3871, 3871,    0,    0, 3871, 3872, 3872, 3872,
     3872, 3873, 3873, 3873, 3873,    0,    0,    0, 3870, 3874,
     3874, 3874, 3874, 3875, 3875, 3875, 3875,    0,    0, 3875,
     3876, 3876, 3876, 3876, 3877, 3877, 3877, 3877, 3878, 3878,
     3878, 3878,    0, 3874, 3879, 3879, 3879, 3879,    0,    0,

     3879, 3880, 3880, 3880, 3880, 3881, 3881, 3881, 3881,    0,
        0,    0, 3878, 3882, 3882, 3882, 3882, 3883, 3883, 3883,
     3883,    0,    0, 3883, 3884, 3884, 3884, 3884, 3885, 3885,
     3885, 3885, 3886, 3886, 3886, 3886,    0, 3882, 3887, 3887,
     3887, 3887,    0,    0, 3887, 3888, 3888, 3888, 3888, 3889,
     3889, 3889, 3889,    0,    0,    0, 3886, 3890, 3890, 3890,
     3890, 3891, 3891, 3891, 3891,    0,    0, 3891, 3892, 3892,
     3892, 3892, 3893, 3893, 3893, 3893, 3894, 3894, 3894, 3894,
        0, 3890, 3895, 3895, 3895, 3895,    0,    0, 3895, 3896,
     3896, 3896, 3896, 3897, 3897, 3897, 3897,    0,    0,    0,

     3894, 3898, 3898, 3898, 3898, 3899, 3899, 3899, 3899,    0,
        0, 3899, 3900, 3900, 3900, 3900, 3901, 3901, 3901, 3901,
     3902, 3902, 3902, 3902,    0, 3898, 3903, 3903, 3903, 3903,
        0,    0, 3903, 3904, 3904, 3904, 3904, 3905, 3905, 3905,
     3905,    0,    0,    0, 3902, 3906, 3906, 3906, 3906, 3907,
     3907, 3907, 3907,    0,    0, 3907, 3908, 3908, 3908, 3908,
     3909, 3909, 3909, 3909, 3910, 3910, 3910, 3910,    0, 3906,
     3911, 3911, 3911, 3911,    0,    0, 3911, 3913, 3913, 3913,
     3913, 3914, 3914, 3914, 3914,    0,    0, 3914, 3910, 3916,
     3916, 3916, 3916, 3916, 3916, 3916, 3916, 3916, 3916, 3916,

     3916, 3916, 3916, 3916, 3916, 3916, 3916, 3916, 3916, 3916,
     3916, 3916, 3916, 3916, 3916, 3916, 3916, 3916, 3916, 3916,
     3916, 3917, 3917, 3917, 3917, 3917, 3917, 3917, 3917, 3917,
     3917, 3917, 3917, 3917, 3917, 3917, 3917, 3917, 3917, 3917,
     3917, 3917, 3917, 3917, 3917, 3917, 3917, 3917, 3917, 3917,
     3917, 3917, 3917, 3918, 3918, 3918, 3918, 3918, 3918, 3918,
     3918, 3918, 3918, 3918, 3918, 3918, 3918, 3918, 3918, 3918,
     3918, 3918, 3918, 3918, 3918, 3918, 3918, 3918, 3918, 3918,
     3918, 3918, 3918, 3918, 3918, 3919, 3919, 3919, 3919, 3919,
     3919, 3919, 3919, 3919, 3919, 3919, 3919, 3919, 3919, 3919,

     3919, 3919, 3919, 3919, 3919, 3919, 3919, 3919, 3919, 3919,
     3919, 3919, 3919, 3919, 3919, 3919, 3919, 3920, 3920, 3920,
     3920, 3920, 3920, 3920, 3920, 3920, 3920, 3920, 3920, 3920,
     3920, 3920, 3920, 3920, 3920, 3920, 3920, 3920, 3920, 3920,
     3920, 3920, 3920, 3920, 3920, 3920, 3920, 3920, 3920, 3921,
     3921, 3921, 3921, 3921, 3921, 3921, 3921, 3921, 3921, 3921,
     3921, 3921, 3921, 3921, 3921, 3921, 3921, 3921, 3921, 3921,
     3921, 3921, 3921, 3921, 3921, 3921, 3921, 3921, 3921, 3921,
     3921, 3922, 3922, 3922, 3922, 3922, 3922, 3922, 3922, 3922,
     3922, 3922, 3922, 3922, 3922, 3922, 3922, 3922, 3922, 3922,

     3922, 3922, 3922, 3922, 3922, 3922, 3922, 3922, 3922, 3922,
     3922, 3922, 3922, 3923, 3923, 3923, 3923, 3923, 3923, 3923,
     3923, 3923, 3923, 3923, 3923, 3923, 3923, 3923, 3923, 3923,
     3923, 3923, 3923, 3923, 3923, 3923, 3923, 3923, 3923, 3923,
     3923, 3923, 3923, 3923, 3923, 3924, 3924, 3924, 3924, 3924,
     3924, 3924, 3924, 3924, 3924, 3924, 3924, 3924, 3924, 3924,
     3924, 3924, 3924, 3924, 3924, 3924, 3924, 3924, 3924, 3924,
     3924, 3924, 3924, 3924, 3924, 3924, 3924, 3925, 3925, 3925,
     3925, 3925, 3925, 3925, 3925, 3925, 3925, 3925, 3925, 3925,
     3925, 3925, 3925, 3925, 3925, 3925, 3925, 3925, 3925, 3925,

     3925, 3925, 3925, 3925, 3925, 3925, 3925, 3925, 3925, 3926,
     3926, 3926, 3926, 3926, 3926, 3926, 3926, 3926, 3926, 3926,
     3926, 3926, 3926, 3926, 3926, 3926, 3926, 3926, 3926, 3926,
     3926, 3926, 3926, 3926, 3926, 3926, 3926, 3926, 3926, 3926,
     3926, 3927, 3927, 3927, 3927, 3927, 3927, 3927, 3927, 3927,
     3927, 3927, 3927, 3927, 3927, 3927, 3927, 3927, 3927, 3927,
     3927, 3927, 3927, 3927, 3927, 3927, 3927, 3927, 3927, 3927,
     3927, 3927, 3927, 3928, 3928, 3928, 3928, 3928, 3928, 3928,
     3928, 3928, 3928, 3928, 3928, 3928, 3928, 3928, 3928, 3928,
     3928, 3928, 3928, 3928, 3928, 3928, 3928, 3928, 3928, 3928,

     3928, 3928, 3928, 3928, 3928, 3929, 3929, 3929, 3929, 3929,
     3929, 3929, 3929, 3929, 3929, 3929, 3929, 3929, 3929, 3929,
     3929, 3929, 3929, 3929, 3929, 3929, 3929, 3929, 3929, 3929,
     3929, 3929, 3929, 3929, 3929, 3929, 3929, 3930, 3930, 3930,
     3930, 3930, 3930, 3930, 3930, 3930, 3930, 3930, 3930, 3930,
     3930, 3930, 3930, 3930, 3930, 3930, 3930, 3930, 3930, 3930,
     3930, 3930, 3930, 3930, 3930, 3930, 3930, 3930, 3930, 3931,
     3931, 3931, 3931, 3931, 3931, 3931, 3931, 3931, 3931, 3931,
     3931, 3931, 3931, 3931, 3931, 3931, 3931, 3931, 3931, 3931,
     3931, 3931, 3931, 3931, 3931, 3931, 3931, 3931, 3931, 3931,

     3931, 3932, 3932, 3932, 3932, 3932, 3932, 3932, 3932, 3932,
     3932, 3932, 3932, 3932, 3932, 3932, 3932, 3932, 3932, 3932,
     3932, 3932, 3932, 3932, 3932, 3932, 3932, 3932, 3932, 3932,
     3932, 3932, 3932, 3933, 3933, 3933, 3933, 3933, 3933, 3933,
     3933, 3933, 3933, 3933, 3933, 3933, 3933, 3933, 3933, 3933,
     3933, 3933, 3933, 3933, 3933, 3933, 3933, 3933, 3933, 3933,
     3933, 3933, 3933, 3933, 3933, 3934, 3934, 3934, 3934, 3934,
     3934, 3934, 3934, 3934, 3934, 3934, 3934, 3934, 3934, 3934,
     3934, 3934, 3934, 3934, 3934, 3934, 3934, 3934, 3934, 3934,
     3934, 3934, 3934, 3934, 3934, 3934, 3934, 3935, 3935, 3935,

     3935, 3935, 3935, 3935, 3935, 3935, 3935, 3935, 3935, 3935,
     3935, 3935, 3935, 3935, 3935, 3935, 3935, 3935, 3935, 3935,
     3935, 3935, 3935, 3935, 3935, 3935, 3935, 3935, 3935, 3936,
     3936, 3936, 3936, 3936, 3936, 3936, 3936, 3936, 3936, 3936,
     3936, 3936, 3936, 3936, 3936, 3936, 3936, 3936, 3936, 3936,
     3936, 3936, 3936, 3936, 3936, 3936, 3936, 3936, 3936, 3936,
     3936, 3937, 3937, 3937, 3937, 3937, 3937, 3937, 3937, 3937,
     3937, 3937, 3937, 3937, 3937, 3937, 3937, 3937, 3937, 3937,
     3937, 3937, 3937, 3937, 3937, 3937, 3937, 3937, 3937, 3937,
     3937, 3937, 3937, 3938, 3938, 3938, 3938, 3938, 3938, 3938,

     3938, 3938, 3938, 3938, 3938, 3938, 3938, 3938, 3938, 3938,
     3938, 3938, 3938, 3938, 3938, 3938, 3938, 3938, 3938, 3938,
     3938, 3938, 3938, 3938, 3938, 3939, 3939, 3939, 3939, 3939,
     3939, 3939, 3939, 3939, 3939, 3939, 3939, 3939, 3939, 3939,
     3939, 3939, 3939, 3939, 3939, 3939, 3939, 3939, 3939, 3939,
     3939, 3939, 3939, 3939, 3939, 3939, 3939, 3940, 3940, 3940,
     3940, 3940, 3940, 3940, 3940, 3940, 3940, 3940, 3940, 3940,
     3940, 3940, 3940, 3940, 3940, 3940, 3940, 3940, 3940, 3940,
     3940, 3940, 3940, 3940, 3940, 3940, 3940, 3940, 3940, 3941,
     3941, 3941, 3941, 3941, 3941, 3941, 3941, 3941, 3941, 3941,

     3941, 3941, 3941, 3941, 3941, 3941, 3941, 3941, 3941, 3941,
     3941, 3941, 3941, 3941, 3941, 3941, 3941, 3941, 3941, 3941,
     3941, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3943, 3943, 3943, 3943, 3943, 3943, 3943,
     3943, 3943, 3943, 3943, 3943, 3943, 3943, 3943, 3943, 3943,
     3943, 3943, 3943, 3943, 3943, 3943, 3943, 3943, 3943, 3943,
     3943, 3943, 3943, 3943, 3943, 3944, 3944, 3944, 3944, 3944,
     3944, 3944, 3944, 3944, 3944, 3944, 3944, 3944, 3944, 3944,

     3944, 3944, 3944, 3944, 3944, 3944, 3944, 3944, 3944, 3944,
     3944, 3944, 3944, 3944, 3944, 3944, 3944, 3945, 3945, 3945,
     3945, 3945, 3945, 3945, 3945, 3945, 3945, 3945, 3945, 3945,
     3945, 3945, 3945, 3945, 3945, 3945, 3945, 3945, 3945, 3945,
     3945, 3945, 3945, 3945, 3945, 3945, 3945, 3945, 3945, 3946,
     3946, 3946, 3946, 3946, 3946, 3946, 3946, 3946, 3946, 3946,
     3946, 3946, 3946, 3946, 3946, 3946, 3946, 3946, 3946, 3946,
     3946, 3946, 3946, 3946, 3946, 3946, 3946, 3946, 3946, 3946,
     3946, 3947, 3947, 3947, 3947, 3947, 3947, 3947, 3947, 3947,
     3947, 3947, 3947, 3947, 3947, 3947, 3947, 3947, 3947, 3947,

     3947, 3947, 3947, 3947, 3947, 3947, 3947, 3947, 3947, 3947,
     3947, 3947, 3947, 3948, 3948, 3948, 3948, 3948, 3948, 3948,
     3948, 3948, 3948, 3948, 3948, 3948, 3948, 3948, 3948, 3948,
     3948, 3948, 3948, 3948, 3948, 3948, 3948, 3948, 3948, 3948,
     3948, 3948, 3948, 3948, 3948, 3949, 3949, 3949, 3949, 3949,
     3949, 3949, 3949, 3949, 3949, 3949, 3949, 3949, 3949, 3949,
     3949, 3949, 3949, 3949, 3949, 3949, 3949, 3949, 3949, 3949,
     3949, 3949, 3949, 3949, 3949, 3949, 3949, 3950, 3950, 3950,
     3950, 3950, 3950, 3950, 3950, 3950, 3950, 3950, 3950, 3950,
     3950, 3950, 3950, 3950, 3950, 3950, 3950, 3950, 3950, 3950,

     3950, 3950, 3950, 3950, 3950, 3950, 3950, 3950, 3950, 3951,
     3951, 3951, 3951, 3951, 3951, 3951, 3951, 3951, 3951, 3951,
     3951, 3951, 3951, 3951, 3951, 3951, 3951, 3951, 3951, 3951,
     3951, 3951, 3951, 3951, 3951, 3951, 3951, 3951, 3951, 3951,
     3951, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952,
     3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952,
     3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952, 3952,
     3952, 3952, 3952, 3953, 3953, 3953, 3953, 3953, 3953, 3953,
     3953, 3953, 3953, 3953, 3953, 3953, 3953, 3953, 3953, 3953,
     3953, 3953, 3953, 3953, 3953, 3953, 3953, 3953, 3953, 3953,

     3953, 3953, 3953, 3953, 3953, 3954, 3954, 3954, 3954, 3954,
     3954, 3954, 3954, 3954, 3954, 3954, 3954, 3954, 3954, 3954,
     3954, 3954, 3954, 3954, 3954, 3954, 3954, 3954, 3954, 3954,
     3954, 3954, 3954, 3954, 3954, 3954, 3954, 3955, 3955, 3955,
     3955, 3955, 3955, 3955, 3955, 3955, 3955, 3955, 3955, 3955,
     3955, 3955, 3955, 3955, 3955, 3955, 3955, 3955, 3955, 3955,
     3955, 3955, 3955, 3955, 3955, 3955, 3955, 3955, 3955, 3956,
     3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956,
     3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956,
     3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956,

     3956, 3957, 3957, 3957, 3957, 3957, 3957, 3957, 3957, 3957,
     3957, 3957, 3957, 3957, 3957, 3957, 3957, 3957, 3957, 3957,
     3957, 3957, 3957, 3957, 3957, 3957, 3957, 3957, 3957, 3957,
     3957, 3957, 3957, 3958, 3958, 3958, 3958, 3958, 3958, 3958,
     3958, 3958, 3958, 3958, 3958, 3958, 3958, 3958, 3958, 3958,
     3958, 3958, 3958, 3958, 3958, 3958, 3958, 3958, 3958, 3958,
     3958, 3958, 3958, 3958, 3958, 3959, 3959, 3959, 3959, 3959,
     3959, 3959, 3959, 3959, 3959, 3959, 3959, 3959, 3959, 3959,
     3959, 3959, 3959, 3959, 3959, 3959, 3959, 3959, 3959, 3959,
     3959, 3959, 3959, 3959, 3959, 3959, 3959, 3960, 3960, 3960,

     3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960,
     3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960,
     3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960, 3960, 3961,
     3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961,
     3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961,
     3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961, 3961,
     3961, 3962, 3962, 3962, 3962, 3962, 3962, 3962, 3962, 3962,
     3962, 3962, 3962, 3962, 3962, 3962, 3962, 3962, 3962, 3962,
     3962, 3962, 3962, 3962, 3962, 3962, 3962, 3962, 3962, 3962,
     3962, 3962, 3962, 3963, 3963, 3963, 3963, 3963, 3963, 3963,

     3963, 3963, 3963, 3963, 3963, 3963, 3963, 3963, 3963, 3963,
     3963, 3963, 3963, 3963, 3963, 3963, 3963, 3963, 3963, 3963,
     3963, 3963, 3963, 3963, 3963, 3964, 3964, 3964, 3964, 3964,
     3964, 3964, 3964, 3964, 3964, 3964, 3964, 3964, 3964, 3964,
     3964, 3964, 3964, 3964, 3964, 3964, 3964, 3964, 3964, 3964,
     3964, 3964, 3964, 3964, 3964, 3964, 3964, 3965, 3965, 3965,
     3965, 3965, 3965, 3965, 3965, 3965, 3965, 3965, 3965, 3965,
     3965, 3965, 3965, 3965, 3965, 3965, 3965, 3965, 3965, 3965,
     3965, 3965, 3965, 3965, 3965, 3965, 3965, 3965, 3965, 3966,
     3966, 3966, 3966, 3966, 3966, 3966, 3966, 3966, 3966, 3966,

     3966, 3966, 3966, 3966, 3966, 3966, 3966, 3966, 3966, 3966,
     3966, 3966, 3966, 3966, 3966, 3966, 3966, 3966, 3966, 3966,
     3966, 3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967,
     3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967,
     3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967,
     3967, 3967, 3967, 3968, 3968, 3968, 3968, 3968, 3968, 3968,
     3968, 3968, 3968, 3968, 3968, 3968, 3968, 3968, 3968, 3968,
     3968, 3968, 3968, 3968, 3968, 3968, 3968, 3968, 3968, 3968,
     3968, 3968, 3968, 3968, 3968, 3969, 3969, 3969, 3969, 3969,
     3969, 3969, 3969, 3969, 3969, 3969, 3969, 3969, 3969, 3969,

     3969, 3969, 3969, 3969, 3969, 3969, 3969, 3969, 3969, 3969,
     3969, 3969, 3969, 3969, 3969, 3969, 3969, 3970, 3970, 3970,
     3970, 3970, 3970, 3970, 3970, 3970, 3970, 3970, 3970, 3970,
     3970, 3970, 3970, 3970, 3970, 3970, 3970, 3970, 3970, 3970,
     3970, 3970, 3970, 3970, 3970, 3970, 3970, 3970, 3970, 3971,
     3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971,
     3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971,
     3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971,
     3971, 3972, 3972, 3972, 3972, 3972, 3972, 3972, 3972, 3972,
     3972, 3972, 3972, 3972, 3972, 3972, 3972, 3972, 3972, 3972,

     3972, 3972, 3972, 3972, 3972, 3972, 3972, 3972, 3972, 3972,
     3972, 3972, 3972, 3973, 3973, 3973, 3973, 3973, 3973, 3973,
     3973, 3973, 3973, 3973, 3973, 3973, 3973, 3973, 3973, 3973,
     3973, 3973, 3973, 3973, 3973, 3973, 3973, 3973, 3973, 3973,
     3973, 3973, 3973, 3973, 3973, 3974, 3974, 3974, 3974, 3974,
     3974, 3974, 3974, 3974, 3974, 3974, 3974, 3974, 3974, 3974,
     3974, 3974, 3974, 3974, 3974, 3974, 3974, 3974, 3974, 3974,
     3974, 3974, 3974, 3974, 3974, 3974, 3974, 3975, 3975, 3975,
     3975, 3975, 3975, 3975, 3975, 3975, 3975, 3975, 3975, 3975,
     3975, 3975, 3975, 3975, 3975, 3975, 3975, 3975, 3975, 3975,

     3975, 3975, 3975, 3975, 3975, 3975, 3975, 3975, 3975, 3976,
     3976, 3976, 3976, 3976, 3976, 3976, 3976, 3976, 3976, 3976,
     3976, 3976, 3976, 3976, 3976, 3976, 3976, 3976, 3976, 3976,
     3976, 3976, 3976, 3976, 3976, 3976, 3976, 3976, 3976, 3976,
     3976, 3977, 3977, 3977, 3977, 3977, 3977, 3977, 3977, 3977,
     3977, 3977, 3977, 3977, 3977, 3977, 3977, 3977, 3977, 3977,
     3977, 3977, 3977, 3977, 3977, 3977, 3977, 3977, 3977, 3977,
     3977, 3977, 3977, 3978, 3978, 3978, 3978, 3978, 3978, 3978,
     3978, 3978, 3978, 3978, 3978, 3978, 3978, 3978, 3978, 3978,
     3978, 3978, 3978, 3978, 3978, 3978, 3978, 3978, 3978, 3978,

     3978, 3978, 3978, 3978, 3978, 3979, 3979, 3979, 3979, 3979,
     3979, 3979, 3979, 3979, 3979, 3979, 3979, 3979, 3979, 3979,
     3979, 3979, 3979, 3979, 3979, 3979, 3979, 3979, 3979, 3979,
     3979, 3979, 3979, 3979, 3979, 3979, 3979, 3981,    0,    0,
        0,    0,    0,    0,    0,    0, 3981,    0,    0,    0,
        0,    0, 3981,    0,    0,    0,    0,    0,    0, 3981,
        0,    0,    0,    0,    0,    0,    0, 3981, 3982, 3982,
     3982,    0,    0,    0, 3982,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3982,    0,    0,    0,    0,    0,    0,    0, 3982, 3983,

     3983, 3983, 3983,    0,    0, 3983,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 3983,    0,    0,    0,    0,
        0, 3983,    0,    0,    0,    0,    0,    0, 3983, 3983,
     3984, 3984, 3984,    0,    0,    0, 3984,    0,    0,    0,
        0,    0,    0, 3984,    0,    0,    0,    0,    0,    0,
        0,    0, 3984,    0,    0,    0,    0,    0,    0, 3984,
     3984, 3985, 3985, 3985,    0,    0,    0,    0,    0,    0,
     3985,    0,    0, 3985, 3985,    0, 3985, 3985, 3985, 3985,
        0,    0,    0, 3985,    0,    0,    0,    0,    0,    0,
        0, 3985, 3986, 3986, 3986,    0,    0,    0, 3986,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 3986,    0,    0,    0,    0,    0,
        0,    0, 3986, 3987, 3987, 3987, 3987, 3987, 3987, 3987,
     3987, 3987, 3987, 3987, 3987, 3987,    0, 3987, 3987, 3987,
     3987, 3987, 3987, 3987, 3987, 3987, 3987, 3987, 3987, 3987,
     3987,    0, 3987, 3987, 3987, 3988, 3988, 3988,    0,    0,
        0, 3988,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 3988,    0,    0,
        0,    0,    0,    0,    0, 3988, 3989, 3989, 3989, 3989,
        0,    0, 3989,    0,    0,    0,    0,    0,    0,    0,

        0,    0, 3989,    0,    0,    0,    0,    0, 3989,    0,
        0,    0,    0,    0,    0, 3989, 3989, 3990, 3990, 3990,
        0,    0,    0,    0,    0,    0, 3990,    0,    0,    0,
        0,    0, 3990, 3990,    0,    0,    0,    0,    0, 3990,
        0,    0,    0,    0,    0,    0,    0, 3990, 3994,    0,
        0,    0, 3994,    0, 3994,    0,    0, 3994,    0,    0,
        0, 3994,    0,    0,    0,    0,    0,    0,    0, 3994,
     3995, 3995,    0, 3995, 3995, 3995, 3995, 3995, 3995, 3995,
     3995, 3995, 3995, 3995, 3995, 3995, 3995, 3995, 3995, 3995,
     3995, 3995, 3995, 3995, 3995, 3995, 3995, 3995, 3995, 3995,

     3995, 3995, 4002, 4002, 4002,    0,    0,    0, 4002,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4002,    0,    0,    0,    0, 4002,
        0,    0, 4002, 4004, 4004, 4004,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4004,    0, 4004, 4004,
        0,    0,    0,    0,    0, 4004,    0, 4004,    0,    0,
        0,    0,    0, 4004, 4006, 4006,    0, 4006, 4006, 4006,
     4006, 4006, 4006,    0, 4006, 4006, 4006, 4006, 4006, 4006,
     4006, 4006, 4006, 4006, 4006, 4006, 4006, 4006, 4006, 4006,
     4006, 4006, 4006, 4006, 4006, 4006, 4007, 4007, 4007,    0,

        0,    0, 4007,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4007,    0,
        0,    0,    0,    0,    0,    0, 4007, 4008, 4008, 4008,
     4008,    0,    0, 4008,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4008,    0,    0,    0,    0,    0, 4008,
        0,    0,    0,    0,    0,    0, 4008, 4008, 4009, 4009,
     4009,    0,    0,    0, 4009, 4009,    0,    0,    0, 4009,
        0,    0,    0,    0, 4009,    0,    0,    0,    0,    0,
     4009,    0,    0,    0, 4009,    0,    0,    0, 4009, 4012,
     4012, 4012,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0, 4012, 4012,    0, 4012,    0,    0,
        0, 4012,    0,    0,    0,    0,    0,    0,    0, 4012,
     4013, 4013, 4013, 4013, 4013, 4013, 4013, 4013, 4013, 4013,
     4013, 4013, 4013, 4013, 4013, 4013, 4013, 4013, 4013, 4013,
     4013, 4013, 4013, 4013, 4013, 4013, 4013, 4013, 4013, 4013,
     4013, 4013, 4014, 4014,    0, 4014, 4014, 4014, 4014, 4014,
     4014, 4014, 4014, 4014, 4014, 4014, 4014, 4014, 4014, 4014,
     4014,    0, 4014, 4014, 4014, 4014, 4014, 4014, 4014, 4014,
     4014, 4014, 4014, 4014, 4015, 4015, 4015,    0,    0,    0,
     4015,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0, 4015,    0,    0,    0,
        0,    0,    0,    0, 4015, 4016, 4016, 4016, 4016,    0,
        0, 4016,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4016,    0,    0,    0,    0,    0, 4016,    0,    0,
        0,    0,    0,    0, 4016, 4016, 4017, 4017, 4017,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4017, 4017,    0, 4017,    0,    0,    0, 4017,    0,
        0,    0,    0,    0,    0,    0, 4017, 4022, 4022,    0,
        0, 4022,    0,    0, 4022, 4022,    0, 4022, 4022, 4022,
     4022, 4022,    0, 4022, 4022, 4022,    0, 4022, 4022,    0,

     4022, 4022, 4022, 4022, 4022,    0,    0, 4022, 4022, 4023,
     4023,    0, 4023, 4023, 4023, 4023, 4023, 4023, 4023, 4023,
     4023, 4023, 4023, 4023, 4023, 4023, 4023, 4023, 4023, 4023,
     4023, 4023, 4023, 4023, 4023, 4023, 4023, 4023, 4023, 4023,
     4023, 4024, 4024,    0, 4024, 4024, 4024, 4024, 4024, 4024,
        0, 4024, 4024, 4024, 4024, 4024, 4024, 4024, 4024, 4024,
     4024, 4024, 4024, 4024, 4024, 4024, 4024, 4024, 4024, 4024,
     4024, 4024, 4024, 4026, 4026, 4026,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4026,    0, 4026, 4026,
        0,    0,    0,    0,    0, 4026,    0,    0,    0,    0,

        0,    0,    0, 4026, 4027, 4027, 4027,    0,    0,    0,
     4027,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4027,    0,    0,    0,
        0,    0,    0,    0, 4027, 4028, 4028, 4028, 4028,    0,
        0, 4028,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4028,    0,    0,    0,    0,    0, 4028,    0,    0,
        0,    0,    0,    0, 4028, 4028, 4029, 4029, 4029,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4029, 4029,    0,    0,    0,    0,    0, 4029,    0,
        0,    0,    0,    0,    0,    0, 4029, 4030, 4030,    0,

     4030, 4030,    0,    0, 4030, 4030,    0, 4030, 4030, 4030,
     4030, 4030,    0, 4030, 4030, 4030,    0, 4030, 4030,    0,
     4030, 4030,    0, 4030, 4030,    0,    0, 4030, 4030, 4031,
     4031,    0, 4031, 4031, 4031, 4031, 4031, 4031,    0, 4031,
     4031, 4031, 4031, 4031, 4031, 4031, 4031, 4031, 4031, 4031,
     4031, 4031, 4031, 4031, 4031, 4031, 4031, 4031, 4031, 4031,
     4031, 4032, 4032,    0, 4032, 4032, 4032, 4032, 4032, 4032,
     4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032,
     4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032, 4032,
     4032, 4032, 4032, 4033, 4033,    0, 4033, 4033, 4033, 4033,

     4033, 4033, 4033, 4033, 4033,    0, 4033, 4033, 4033, 4033,
     4033, 4033, 4033, 4033, 4033, 4033, 4033, 4033, 4033, 4033,
     4033, 4033, 4033, 4033, 4033, 4034, 4034, 4034, 4034, 4034,
     4034, 4034, 4034, 4034, 4034, 4034, 4034, 4034, 4034, 4034,
     4034, 4034, 4034, 4034, 4034, 4034, 4034, 4034, 4034, 4034,
     4034, 4034, 4034, 4034, 4034, 4034, 4034, 4035, 4035,    0,
     4035, 4035,    0, 4035, 4035, 4035, 4035, 4035, 4035, 4035,
     4035, 4035, 4035, 4035, 4035, 4035, 4035, 4035, 4035, 4035,
     4035,    0, 4035,    0, 4035, 4035, 4035, 4035, 4035, 4036,
     4036,    0, 4036, 4036, 4036, 4036, 4036, 4036, 4036, 4036,

     4036, 4036, 4036, 4036, 4036, 4036, 4036, 4036, 4036, 4036,
     4036, 4036, 4036, 4036, 4036, 4036, 4036, 4036, 4036, 4036,
     4036, 4039,    0,    0,    0, 4039, 4039, 4039, 4039, 4039,
     4039, 4039, 4039,    0, 4039,    0,    0, 4039, 4039, 4039,
     4039, 4039, 4039, 4039, 4039, 4039, 4039, 4039, 4039, 4039,
     4039, 4039, 4039, 4041,    0, 4041,    0,    0,    0,    0,
        0,    0, 4041,    0, 4041,    0,    0,    0,    0,    0,
     4041, 4043, 4043, 4043,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4043,    0, 4043,    0,    0,    0,
        0,    0,    0, 4043,    0,    0,    0,    0,    0,    0,

        0, 4043, 4045, 4045, 4045,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4045,    0,    0,
        0,    0,    0,    0, 4045,    0, 4045,    0,    0,    0,
        0,    0, 4045, 4048, 4048,    0, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048, 4048,
     4048, 4048, 4048, 4048, 4048, 4050,    0,    0,    0, 4050,
        0,    0,    0,    0,    0,    0, 4050,    0,    0,    0,
        0,    0,    0, 4050,    0,    0,    0,    0,    0,    0,
        0, 4050, 4053, 4053,    0, 4053, 4053,    0, 4053, 4053,

     4053, 4053, 4053, 4053, 4053, 4053, 4053, 4053, 4053, 4053,
     4053, 4053, 4053, 4053, 4053, 4053, 4053, 4053, 4053, 4053,
     4053, 4053, 4053, 4053, 4056, 4056, 4056, 4056, 4056, 4056,
     4056, 4056, 4056, 4056, 4056,    0, 4056, 4056, 4056, 4056,
     4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056,
     4056, 4056, 4056, 4056, 4056, 4056, 4058, 4058, 4058,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4058, 4058,    0,    0,    0,    0,    0, 4058,    0,
        0,    0,    0,    0,    0,    0, 4058, 4059, 4059, 4059,
     4059, 4059, 4059, 4059, 4059, 4059, 4059, 4059,    0, 4059,

     4059, 4059, 4059, 4059, 4059, 4059, 4059, 4059, 4059, 4059,
     4059, 4059, 4059, 4059, 4059, 4059, 4059, 4059, 4059, 4061,
     4061,    0, 4061,    0,    0,    0, 4061,    0,    0,    0,
        0,    0,    0,    0, 4061, 4068, 4068,    0, 4068, 4068,
     4068, 4068, 4068, 4068,    0, 4068, 4068, 4068, 4068, 4068,
     4068, 4068, 4068, 4068, 4068, 4068, 4068, 4068, 4068, 4068,
     4068, 4068, 4068, 4068, 4068, 4068, 4068, 4069, 4069, 4069,
        0,    0,    0, 4069,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4069,
        0,    0,    0,    0,    0,    0,    0, 4069, 4070, 4070,

     4070,    0,    0,    0,    0,    0,    0,    0,    0, 4070,
        0,    0,    0, 4070,    0,    0,    0,    0,    0,    0,
     4070,    0,    0,    0,    0,    0,    0,    0, 4070, 4071,
     4071, 4071,    0,    0,    0, 4071, 4071,    0,    0,    0,
     4071,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4071,    0,    0,    0,    0,    0,    0,    0, 4071,
     4072, 4072, 4072,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4072,    0,    0,    0,    0,
        0,    0, 4072, 4072,    0,    0,    0,    0,    0,    0,
     4072, 4073, 4073, 4073,    0,    0,    0, 4073,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4073,    0,    0,    0,    0,    0,    0,
        0, 4073, 4074, 4074, 4074, 4074,    0,    0, 4074,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4074,    0,
        0,    0,    0,    0, 4074,    0,    0,    0,    0,    0,
        0, 4074, 4074, 4075, 4075, 4075,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4075, 4075,
        0,    0,    0,    0,    0, 4075,    0,    0,    0,    0,
        0,    0,    0, 4075, 4076, 4076,    0, 4076, 4076, 4076,
     4076, 4076, 4076, 4076, 4076, 4076, 4076, 4076, 4076, 4076,

     4076, 4076, 4076, 4076, 4076, 4076, 4076, 4076, 4076, 4076,
     4076, 4076, 4076, 4076, 4076, 4076, 4077,    0,    0,    0,
     4077,    0,    0, 4077, 4077,    0,    0,    0, 4077, 4077,
     4077,    0, 4077, 4077, 4077, 4077, 4077, 4077, 4077, 4077,
     4077, 4077, 4077, 4077, 4077, 4077, 4077, 4077, 4078, 4078,
        0, 4078, 4078, 4078, 4078, 4078, 4078,    0, 4078, 4078,
     4078, 4078, 4078, 4078, 4078, 4078, 4078, 4078, 4078, 4078,
     4078, 4078, 4078, 4078, 4078, 4078, 4078, 4078, 4078, 4078,
     4083, 4083,    0, 4083, 4083, 4083, 4083, 4083, 4083, 4083,
     4083, 4083, 4083, 4083, 4083, 4083, 4083, 4083, 4083, 4083,

     4083, 4083, 4083, 4083, 4083, 4083, 4083, 4083, 4083, 4083,
     4083, 4083, 4084, 4084,    0, 4084, 4084, 4084, 4084, 4084,
     4084, 4084, 4084, 4084, 4084, 4084, 4084, 4084, 4084, 4084,
     4084, 4084, 4084, 4084, 4084, 4084, 4084, 4084, 4084, 4084,
     4084, 4084, 4084, 4084, 4085, 4085,    0, 4085, 4085,    0,
     4085, 4085, 4085,    0,    0,    0, 4085, 4085, 4085, 4085,
     4085, 4085, 4085, 4085, 4085, 4085, 4085, 4085, 4085, 4085,
     4085, 4085, 4085, 4085, 4085, 4085, 4086, 4086,    0, 4086,
     4086, 4086, 4086, 4086, 4086,    0, 4086, 4086, 4086, 4086,
     4086, 4086, 4086, 4086, 4086, 4086, 4086, 4086, 4086, 4086,

     4086, 4086, 4086, 4086, 4086, 4086, 4086, 4086, 4087, 4087,
        0, 4087, 4087,    0, 4087, 4087, 4087,    0, 4087, 4087,
     4087, 4087, 4087,    0, 4087, 4087, 4087, 4087, 4087, 4087,
     4087, 4087, 4087, 4087, 4087, 4087,    0,    0, 4087, 4087,
     4088, 4088,    0, 4088, 4088, 4088, 4088, 4088, 4088,    0,
     4088, 4088, 4088, 4088, 4088, 4088, 4088, 4088, 4088, 4088,
     4088, 4088, 4088, 4088, 4088, 4088, 4088, 4088, 4088, 4088,
     4088, 4088, 4089, 4089,    0, 4089, 4089,    0, 4089, 4089,
     4089,    0,    0,    0, 4089, 4089, 4089,    0, 4089, 4089,
     4089, 4089, 4089, 4089, 4089, 4089, 4089, 4089, 4089, 4089,

     4089, 4089, 4089, 4089, 4090, 4090,    0, 4090, 4090, 4090,
     4090, 4090, 4090,    0, 4090, 4090, 4090, 4090, 4090, 4090,
     4090, 4090, 4090, 4090, 4090, 4090, 4090, 4090, 4090, 4090,
     4090, 4090, 4090, 4090, 4090, 4090, 4091, 4091,    0, 4091,
     4091,    0, 4091, 4091, 4091,    0, 4091, 4091, 4091, 4091,
     4091,    0, 4091, 4091, 4091, 4091, 4091, 4091, 4091, 4091,
     4091, 4091, 4091, 4091,    0,    0, 4091, 4091, 4092, 4092,
        0, 4092, 4092, 4092, 4092, 4092, 4092,    0, 4092, 4092,
     4092, 4092, 4092, 4092, 4092, 4092, 4092, 4092, 4092, 4092,
     4092, 4092, 4092, 4092, 4092, 4092, 4092, 4092, 4092, 4092,

     4094, 4094,    0, 4094, 4094, 4094, 4094, 4094, 4094,    0,
     4094, 4094, 4094, 4094, 4094, 4094, 4094, 4094, 4094, 4094,
     4094, 4094, 4094, 4094, 4094, 4094, 4094, 4094, 4094, 4094,
     4094, 4094, 4096, 4096,    0, 4096, 4096,    0, 4096, 4096,
     4096,    0, 4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
     4096, 4096, 4096, 4096, 4096, 4096, 4096,    0, 4096, 4096,
     4096, 4096, 4096, 4096, 4097, 4097,    0, 4097, 4097, 4097,
     4097, 4097, 4097, 4097, 4097, 4097, 4097, 4097, 4097, 4097,
     4097, 4097, 4097, 4097, 4097, 4097, 4097, 4097, 4097, 4097,
     4097, 4097, 4097, 4097, 4097, 4097, 4098, 4098,    0, 4098,

     4098,    0, 4098, 4098, 4098,    0,    0,    0, 4098, 4098,
     4098,    0, 4098, 4098, 4098, 4098, 4098, 4098, 4098, 4098,
     4098, 4098, 4098, 4098, 4098, 4098, 4098, 4098, 4099, 4099,
        0, 4099, 4099, 4099, 4099, 4099, 4099, 4099, 4099, 4099,
        0, 4099, 4099, 4099, 4099, 4099, 4099, 4099, 4099, 4099,
        0, 4099, 4099,    0, 4099, 4099, 4099, 4099, 4099, 4099,
     4100, 4100,    0, 4100, 4100, 4100, 4100, 4100, 4100, 4100,
     4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100, 4100,
     4100, 4100,    0, 4100, 4100,    0, 4100, 4100, 4100, 4100,
     4100, 4100, 4111, 4111, 4111,    0,    0,    0, 4111,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4111, 4111,    0,    0,    0,    0,
        0,    0, 4111, 4113, 4113, 4113,    0,    0,    0,    0,
        0,    0,    0, 4113,    0, 4113,    0,    0, 4113,    0,
        0,    0,    0,    0,    0, 4113,    0,    0,    0,    0,
        0,    0,    0, 4113, 4114, 4114, 4114, 4114, 4114, 4114,
     4114, 4114, 4114, 4114, 4114, 4114, 4114, 4114, 4114, 4114,
     4114, 4114, 4114, 4114, 4114, 4114, 4114, 4114, 4114, 4114,
     4114, 4114, 4114, 4114, 4114, 4114, 4115, 4115, 4115,    0,
        0,    0, 4115,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0, 4115,    0,
        0,    0,    0,    0,    0,    0, 4115, 4117, 4117, 4117,
        0,    0,    0,    0,    0,    0, 4117,    0,    0,    0,
        0,    0, 4117,    0,    0,    0,    0,    0,    0, 4117,
        0,    0,    0,    0,    0,    0,    0, 4117, 4118,    0,
        0,    0,    0,    0, 4118, 4118,    0,    0,    0, 4118,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4118,    0,    0,    0,    0,    0,    0,    0, 4118, 4119,
     4119, 4119,    0,    0,    0, 4119,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0, 4119,    0,    0,    0,    0,    0,    0,    0, 4119,
     4120, 4120, 4120, 4120,    0,    0, 4120,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4120,    0,    0,    0,
        0,    0, 4120,    0,    0,    0,    0,    0,    0, 4120,
     4120, 4121, 4121, 4121,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4121, 4121,    0,    0,
        0,    0,    0, 4121,    0,    0,    0,    0,    0,    0,
        0, 4121, 4122, 4122, 4122, 4122, 4122, 4122, 4122, 4122,
     4122, 4122, 4122, 4122, 4122, 4122, 4122, 4122, 4122, 4122,
     4122, 4122, 4122, 4122, 4122, 4122, 4122, 4122, 4122, 4122,

     4122, 4122, 4122, 4122, 4123, 4123,    0, 4123, 4123, 4123,
     4123, 4123, 4123, 4123, 4123, 4123,    0, 4123, 4123,    0,
     4123, 4123, 4123, 4123, 4123, 4123,    0, 4123, 4123,    0,
     4123, 4123, 4123, 4123, 4123, 4123, 4124, 4124, 4124, 4124,
     4124, 4124, 4124, 4124, 4124, 4124, 4124, 4124, 4124, 4124,
     4124, 4124,    0, 4124, 4124, 4124, 4124, 4124, 4124,    0,
     4124, 4124, 4124, 4124, 4124, 4124, 4124, 4124, 4125, 4125,
        0, 4125, 4125, 4125, 4125,    0, 4125, 4125, 4125, 4125,
        0, 4125, 4125,    0, 4125, 4125, 4125,    0, 4125, 4125,
        0, 4125, 4125,    0,    0, 4125, 4125, 4125, 4125, 4125,

     4126,    0,    0,    0,    0,    0,    0,    0,    0, 4126,
        0,    0,    0,    0,    0, 4126,    0,    0,    0,    0,
        0,    0, 4126,    0,    0,    0,    0,    0,    0,    0,
     4126, 4127, 4127, 4127,    0,    0,    0, 4127,    0,    0,
        0,    0,    0,    0, 4127,    0,    0,    0,    0,    0,
        0,    0,    0, 4127,    0,    0,    0,    0,    0,    0,
     4127, 4127, 4128, 4128, 4128,    0,    0,    0, 4128,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4128,    0,    0,    0,    0,    0,
        0,    0, 4128, 4129, 4129, 4129,    0,    0,    0,    0,

        0,    0, 4129,    0,    0, 4129,    0,    0, 4129,    0,
     4129, 4129,    0,    0,    0, 4129,    0,    0,    0,    0,
        0,    0,    0, 4129, 4131, 4131, 4131,    0,    0,    0,
        0,    0,    0, 4131,    0,    0, 4131, 4131,    0, 4131,
     4131, 4131, 4131,    0,    0,    0, 4131,    0,    0,    0,
        0,    0,    0,    0, 4131, 4132, 4132, 4132,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4132,    0,
     4132,    0,    0,    0,    0,    0,    0, 4132,    0,    0,
        0,    0,    0,    0,    0, 4132, 4133, 4133, 4133,    0,
        0,    0, 4133,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0, 4133,    0,
        0,    0,    0,    0,    0,    0, 4133, 4134, 4134, 4134,
        0,    0,    0, 4134,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4134,
        0,    0,    0,    0,    0,    0,    0, 4134, 4135, 4135,
     4135,    0,    0,    0,    0,    0,    0, 4135,    0,    0,
     4135,    0,    0, 4135,    0, 4135, 4135,    0,    0,    0,
     4135,    0,    0,    0,    0,    0,    0,    0, 4135, 4136,
     4136, 4136, 4136, 4136, 4136, 4136, 4136, 4136, 4136, 4136,
     4136, 4136,    0, 4136, 4136, 4136, 4136, 4136, 4136, 4136,

     4136, 4136, 4136, 4136, 4136, 4136, 4136,    0, 4136, 4136,
     4136, 4137, 4137, 4137,    0,    0,    0, 4137,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4137,    0,    0,    0,    0,    0,    0,
        0, 4137, 4138, 4138, 4138,    0,    0,    0,    0,    0,
        0, 4138,    0,    0,    0,    0,    0, 4138,    0,    0,
        0,    0,    0,    0, 4138,    0,    0,    0,    0,    0,
        0,    0, 4138, 4140, 4140, 4140,    0,    0,    0,    0,
        0,    0, 4140,    0,    0,    0,    0,    0, 4140, 4140,
        0,    0,    0,    0,    0, 4140,    0,    0,    0,    0,

        0,    0,    0, 4140, 4142,    0,    0,    0, 4142,    0,
     4142,    0,    0, 4142,    0,    0,    0, 4142,    0,    0,
        0,    0,    0,    0,    0, 4142, 4145, 4145,    0, 4145,
     4145, 4145, 4145, 4145, 4145, 4145, 4145, 4145, 4145, 4145,
     4145, 4145, 4145, 4145, 4145, 4145, 4145, 4145, 4145, 4145,
     4145, 4145, 4145, 4145, 4145, 4145, 4145, 4145, 4149, 4149,
     4149,    0,    0,    0, 4149,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4149,    0,    0,    0,    0, 4149,    0,    0, 4149, 4150,
     4150, 4150,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0, 4150,    0, 4150, 4150,    0,    0,    0,    0,
        0, 4150,    0,    0,    0,    0,    0,    0,    0, 4150,
     4151, 4151, 4151,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4151,    0, 4151, 4151,    0,    0,    0,
        0,    0, 4151,    0, 4151,    0,    0,    0,    0,    0,
     4151, 4152, 4152, 4152,    0,    0,    0, 4152,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4152,    0,    0,    0,    0,    0,    0,
        0, 4152, 4156, 4156,    0, 4156, 4156, 4156, 4156, 4156,
     4156, 4156, 4156, 4156, 4156, 4156, 4156, 4156, 4156, 4156,

     4156, 4156, 4156, 4156, 4156, 4156, 4156,    0, 4156, 4156,
     4156, 4156, 4156, 4156, 4157, 4157,    0, 4157, 4157, 4157,
     4157, 4157, 4157, 4157, 4157, 4157, 4157, 4157, 4157, 4157,
     4157, 4157, 4157, 4157, 4157, 4157, 4157, 4157, 4157, 4157,
     4157, 4157, 4157, 4157, 4157, 4157, 4158, 4158, 4158, 4158,
     4158, 4158, 4158, 4158, 4158, 4158, 4158, 4158, 4158, 4158,
     4158, 4158, 4158, 4158, 4158, 4158, 4158, 4158, 4158, 4158,
     4158, 4158, 4158, 4158, 4158, 4158, 4158, 4158, 4159, 4159,
     4159,    0,    0,    0, 4159,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     4159,    0,    0,    0,    0,    0,    0,    0, 4159, 4160,
     4160, 4160,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4160,    0,    0, 4160,    0,    0,
        0, 4160,    0,    0,    0,    0,    0,    0,    0, 4160,
     4162, 4162, 4162,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4162, 4162,    0, 4162,    0,
        0,    0, 4162,    0,    0,    0,    0,    0,    0,    0,
     4162, 4163, 4163,    0, 4163, 4163, 4163, 4163, 4163, 4163,
     4163, 4163, 4163, 4163, 4163, 4163, 4163, 4163, 4163, 4163,
     4163, 4163, 4163, 4163, 4163, 4163, 4163, 4163, 4163, 4163,

     4163, 4163, 4163, 4164, 4164, 4164,    0,    0,    0, 4164,
     4164,    0,    0,    0, 4164,    0,    0,    0,    0, 4164,
        0,    0,    0,    0,    0, 4164,    0,    0,    0, 4164,
        0,    0,    0, 4164, 4165, 4165, 4165,    0,    0,    0,
        0,    0,    0,    0, 4165, 4165,    0,    0,    0, 4165,
     4165,    0, 4165,    0,    0,    0, 4165,    0,    0,    0,
        0,    0,    0,    0, 4165, 4169, 4169, 4169,    0,    0,
        0,    0,    0,    0, 4169,    0,    0,    0, 4169,    0,
     4169,    0,    0,    0,    0,    0,    0, 4169,    0,    0,
        0,    0,    0,    0,    0, 4169, 4170, 4170,    0, 4170,

     4170, 4170, 4170, 4170, 4170, 4170, 4170, 4170, 4170, 4170,
     4170, 4170, 4170, 4170, 4170,    0, 4170, 4170, 4170, 4170,
     4170, 4170, 4170, 4170, 4170, 4170, 4170, 4170, 4171, 4171,
     4171,    0,    0,    0, 4171,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4171,    0,    0,    0,    0,    0,    0,    0, 4171, 4172,
     4172, 4172,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4172,    0,    0, 4172,    0,    0,
        0, 4172,    0,    0,    0,    0,    0,    0,    0, 4172,
     4174, 4174, 4174,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0, 4174, 4174,    0, 4174,    0,
        0,    0, 4174,    0,    0,    0,    0,    0,    0,    0,
     4174, 4177, 4177,    0,    0, 4177,    0,    0, 4177, 4177,
        0, 4177, 4177, 4177, 4177, 4177,    0, 4177, 4177, 4177,
        0, 4177, 4177,    0, 4177, 4177, 4177, 4177, 4177,    0,
        0, 4177, 4177, 4178, 4178,    0, 4178, 4178, 4178, 4178,
     4178, 4178, 4178, 4178, 4178, 4178, 4178, 4178, 4178, 4178,
     4178, 4178, 4178, 4178, 4178, 4178, 4178, 4178, 4178, 4178,
     4178, 4178, 4178, 4178, 4178, 4179, 4179,    0, 4179, 4179,
     4179, 4179, 4179, 4179, 4179, 4179, 4179, 4179, 4179, 4179,

     4179, 4179, 4179, 4179, 4179, 4179, 4179, 4179, 4179, 4179,
        0, 4179, 4179, 4179, 4179, 4179, 4179, 4180, 4180,    0,
     4180, 4180, 4180, 4180, 4180, 4180, 4180, 4180, 4180, 4180,
     4180, 4180, 4180, 4180, 4180, 4180, 4180, 4180, 4180, 4180,
     4180, 4180, 4180, 4180, 4180, 4180, 4180, 4180, 4180, 4181,
     4181,    0, 4181, 4181, 4181, 4181, 4181, 4181, 4181, 4181,
     4181, 4181, 4181, 4181, 4181, 4181, 4181, 4181, 4181, 4181,
     4181, 4181, 4181, 4181, 4181, 4181, 4181, 4181, 4181, 4181,
     4181, 4182, 4182, 4182,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4182,    0, 4182, 4182,    0,    0,

        0,    0,    0, 4182,    0,    0,    0,    0,    0,    0,
        0, 4182, 4183, 4183, 4183,    0,    0,    0, 4183,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4183,    0,    0,    0,    0,    0,
        0,    0, 4183, 4184, 4184, 4184,    0,    0,    0, 4184,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4184,    0,    0,    0,    0,
        0,    0,    0, 4184, 4187, 4187, 4187,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4187,
     4187,    0,    0,    0,    0,    0, 4187,    0,    0,    0,

        0,    0,    0,    0, 4187, 4188, 4188,    0, 4188, 4188,
        0,    0, 4188, 4188,    0, 4188, 4188, 4188, 4188, 4188,
        0, 4188, 4188, 4188,    0, 4188, 4188,    0, 4188, 4188,
        0, 4188, 4188,    0,    0, 4188, 4188, 4189, 4189,    0,
     4189, 4189, 4189, 4189, 4189, 4189, 4189, 4189, 4189, 4189,
     4189, 4189, 4189, 4189, 4189, 4189, 4189, 4189, 4189, 4189,
     4189, 4189,    0, 4189, 4189, 4189, 4189, 4189, 4189, 4190,
     4190,    0, 4190, 4190, 4190, 4190, 4190, 4190, 4190, 4190,
     4190, 4190, 4190, 4190, 4190, 4190, 4190, 4190, 4190, 4190,
     4190, 4190, 4190, 4190, 4190, 4190, 4190, 4190, 4190, 4190,

     4190, 4191, 4191,    0, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191,    0, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191, 4191,
     4191, 4191, 4191, 4192, 4192, 4192, 4192, 4192, 4192, 4192,
     4192, 4192, 4192, 4192, 4192, 4192, 4192, 4192, 4192, 4192,
     4192, 4192, 4192, 4192, 4192, 4192, 4192, 4192, 4192, 4192,
     4192, 4192, 4192, 4192, 4192, 4193, 4193,    0, 4193, 4193,
        0, 4193, 4193, 4193, 4193, 4193, 4193, 4193, 4193, 4193,
     4193, 4193, 4193, 4193, 4193, 4193, 4193, 4193, 4193,    0,
     4193,    0, 4193, 4193, 4193, 4193, 4193, 4194, 4194,    0,

     4194, 4194, 4194, 4194, 4194, 4194, 4194, 4194, 4194, 4194,
     4194, 4194, 4194, 4194, 4194, 4194, 4194, 4194, 4194, 4194,
     4194, 4194, 4194, 4194, 4194, 4194, 4194, 4194, 4194, 4196,
        0,    0,    0, 4196, 4196, 4196, 4196, 4196, 4196, 4196,
     4196,    0, 4196,    0,    0, 4196, 4196, 4196, 4196, 4196,
     4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196,
     4196, 4197,    0, 4197,    0,    0,    0,    0,    0,    0,
     4197,    0, 4197,    0,    0,    0,    0,    0, 4197, 4199,
     4199, 4199,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4199,    0, 4199,    0,    0,    0,    0,    0,

        0, 4199,    0,    0,    0,    0,    0,    0,    0, 4199,
     4200, 4200, 4200,    0,    0,    0, 4200,    0,    0,    0,
        0, 4200,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4200,    0,    0,    0,    0,    0,    0,    0,
     4200, 4201, 4201, 4201,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4201,    0,    0,    0,
        0,    0,    0, 4201,    0, 4201,    0,    0,    0,    0,
        0, 4201, 4202, 4202, 4202,    0,    0,    0, 4202,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4202,    0,    0,    0,    0,    0,

        0,    0, 4202, 4204, 4204,    0, 4204, 4204, 4204, 4204,
     4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204,
     4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204, 4204,
     4204, 4204, 4204, 4204, 4204, 4205,    0,    0,    0, 4205,
        0,    0,    0,    0,    0,    0, 4205,    0,    0,    0,
        0,    0,    0, 4205,    0,    0,    0,    0,    0,    0,
        0, 4205, 4207, 4207,    0, 4207, 4207,    0, 4207, 4207,
     4207, 4207, 4207, 4207, 4207, 4207, 4207, 4207, 4207, 4207,
     4207, 4207, 4207, 4207, 4207, 4207, 4207, 4207, 4207, 4207,
     4207, 4207, 4207, 4207, 4209, 4209, 4209, 4209, 4209, 4209,

     4209, 4209, 4209, 4209, 4209,    0, 4209, 4209, 4209, 4209,
     4209, 4209, 4209, 4209, 4209, 4209, 4209, 4209, 4209, 4209,
     4209, 4209, 4209, 4209, 4209, 4209, 4210, 4210, 4210,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4210, 4210,    0,    0,    0,    0,    0, 4210,    0,
        0,    0,    0,    0,    0,    0, 4210, 4211, 4211, 4211,
     4211, 4211, 4211, 4211, 4211, 4211, 4211, 4211,    0, 4211,
     4211, 4211, 4211, 4211, 4211, 4211, 4211, 4211, 4211, 4211,
     4211, 4211, 4211, 4211, 4211, 4211, 4211, 4211, 4211, 4212,
     4212,    0, 4212,    0,    0,    0, 4212,    0,    0,    0,

        0,    0,    0,    0, 4212, 4213,    0,    0,    0,    0,
        0,    0, 4213,    0,    0,    0, 4213, 4213,    0,    0,
     4213, 4213,    0,    0,    0, 4213,    0, 4213, 4217, 4217,
        0, 4217, 4217, 4217, 4217, 4217, 4217, 4217, 4217, 4217,
     4217, 4217, 4217, 4217, 4217, 4217, 4217, 4217, 4217, 4217,
     4217, 4217, 4217,    0, 4217, 4217, 4217, 4217, 4217, 4217,
     4218, 4218,    0, 4218, 4218, 4218, 4218, 4218, 4218, 4218,
     4218, 4218, 4218, 4218, 4218, 4218, 4218, 4218, 4218, 4218,
     4218, 4218, 4218, 4218, 4218, 4218, 4218, 4218, 4218, 4218,
     4218, 4218, 4219, 4219, 4219,    0,    0,    0, 4219,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4219,    0,    0,    0,    0,    0,
        0,    0, 4219, 4220, 4220, 4220,    0,    0,    0,    0,
        0,    0,    0,    0, 4220,    0,    0,    0, 4220,    0,
        0,    0,    0,    0,    0, 4220,    0,    0,    0,    0,
        0,    0,    0, 4220, 4221, 4221, 4221,    0,    0,    0,
     4221, 4221,    0,    0,    0, 4221,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4221,    0,    0,    0,
        0,    0,    0,    0, 4221, 4222, 4222, 4222,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     4222,    0,    0,    0,    0,    0,    0, 4222, 4222,    0,
        0,    0,    0,    0,    0, 4222, 4223, 4223,    0, 4223,
     4223, 4223, 4223, 4223, 4223, 4223, 4223, 4223, 4223, 4223,
     4223, 4223, 4223, 4223, 4223, 4223, 4223, 4223, 4223, 4223,
     4223, 4223, 4223, 4223, 4223, 4223, 4223, 4223, 4224, 4224,
     4224,    0,    0,    0, 4224,    0,    0,    0,    0, 4224,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4224,    0,    0,    0,    0,    0,    0,    0, 4224, 4225,
     4225, 4225,    0,    0,    0, 4225,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0, 4225,    0,    0,    0,    0,    0,    0,    0, 4225,
     4228, 4228, 4228,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4228, 4228,    0,    0,    0,
        0,    0, 4228,    0,    0,    0,    0,    0,    0,    0,
     4228, 4229, 4229,    0, 4229, 4229, 4229, 4229, 4229, 4229,
     4229, 4229, 4229, 4229, 4229, 4229, 4229, 4229, 4229, 4229,
     4229, 4229, 4229, 4229, 4229, 4229, 4229, 4229, 4229, 4229,
     4229, 4229, 4229, 4230,    0,    0,    0, 4230,    0,    0,
     4230, 4230,    0,    0,    0, 4230, 4230, 4230,    0, 4230,
     4230, 4230, 4230, 4230, 4230, 4230, 4230, 4230, 4230, 4230,

     4230, 4230, 4230, 4230, 4230, 4231, 4231,    0, 4231, 4231,
     4231, 4231, 4231, 4231, 4231, 4231, 4231, 4231, 4231, 4231,
     4231, 4231, 4231, 4231, 4231, 4231, 4231, 4231, 4231, 4231,
        0, 4231, 4231, 4231, 4231, 4231, 4231, 4232, 4232,    0,
     4232, 4232, 4232, 4232, 4232, 4232, 4232, 4232, 4232, 4232,
     4232, 4232, 4232, 4232, 4232, 4232, 4232, 4232, 4232, 4232,
     4232, 4232, 4232, 4232, 4232, 4232, 4232, 4232, 4232, 4235,
     4235,    0, 4235, 4235,    0, 4235, 4235, 4235,    0,    0,
        0, 4235, 4235, 4235, 4235, 4235, 4235, 4235, 4235, 4235,
     4235, 4235, 4235, 4235, 4235, 4235, 4235, 4235, 4235, 4235,

     4235, 4236, 4236,    0, 4236, 4236, 4236, 4236, 4236, 4236,
     4236, 4236, 4236, 4236, 4236, 4236, 4236, 4236, 4236, 4236,
     4236, 4236, 4236, 4236, 4236, 4236,    0, 4236, 4236, 4236,
     4236, 4236, 4236, 4237, 4237,    0, 4237, 4237, 4237, 4237,
     4237, 4237, 4237, 4237, 4237, 4237, 4237, 4237, 4237, 4237,
     4237, 4237, 4237, 4237, 4237, 4237, 4237, 4237, 4237, 4237,
     4237, 4237, 4237, 4237, 4237, 4238, 4238,    0, 4238, 4238,
        0, 4238, 4238, 4238,    0, 4238, 4238, 4238, 4238, 4238,
        0, 4238, 4238, 4238, 4238, 4238, 4238, 4238, 4238, 4238,
     4238, 4238, 4238,    0,    0, 4238, 4238, 4239, 4239,    0,

     4239, 4239, 4239, 4239, 4239, 4239, 4239, 4239, 4239, 4239,
     4239, 4239, 4239, 4239, 4239, 4239, 4239, 4239, 4239, 4239,
     4239, 4239,    0, 4239, 4239, 4239, 4239, 4239, 4239, 4240,
     4240,    0, 4240, 4240, 4240, 4240, 4240, 4240, 4240, 4240,
     4240, 4240, 4240, 4240, 4240, 4240, 4240, 4240, 4240, 4240,
     4240, 4240, 4240, 4240, 4240, 4240, 4240, 4240, 4240, 4240,
     4240, 4241, 4241,    0, 4241, 4241,    0, 4241, 4241, 4241,
        0,    0,    0, 4241, 4241, 4241,    0, 4241, 4241, 4241,
     4241, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 4241,
     4241, 4241, 4241, 4242, 4242,    0, 4242, 4242, 4242, 4242,

     4242, 4242, 4242, 4242, 4242, 4242, 4242, 4242, 4242, 4242,
     4242, 4242, 4242, 4242, 4242, 4242, 4242, 4242,    0, 4242,
     4242, 4242, 4242, 4242, 4242, 4243, 4243,    0, 4243, 4243,
     4243, 4243, 4243, 4243, 4243, 4243, 4243, 4243, 4243, 4243,
     4243, 4243, 4243, 4243, 4243, 4243, 4243, 4243, 4243, 4243,
     4243, 4243, 4243, 4243, 4243, 4243, 4243, 4244, 4244,    0,
     4244, 4244,    0, 4244, 4244, 4244,    0, 4244, 4244, 4244,
     4244, 4244,    0, 4244, 4244, 4244, 4244, 4244, 4244, 4244,
     4244, 4244, 4244, 4244, 4244,    0,    0, 4244, 4244, 4245,
     4245,    0, 4245, 4245, 4245, 4245, 4245, 4245, 4245, 4245,

     4245, 4245, 4245, 4245, 4245, 4245, 4245, 4245, 4245, 4245,
     4245, 4245, 4245, 4245,    0, 4245, 4245, 4245, 4245, 4245,
     4245, 4246, 4246,    0, 4246, 4246, 4246, 4246, 4246, 4246,
     4246, 4246, 4246, 4246, 4246, 4246, 4246, 4246, 4246, 4246,
     4246, 4246, 4246, 4246, 4246, 4246, 4246, 4246, 4246, 4246,
     4246, 4246, 4246, 4248, 4248,    0, 4248, 4248, 4248, 4248,
     4248, 4248, 4248, 4248, 4248, 4248, 4248, 4248, 4248, 4248,
     4248, 4248, 4248, 4248, 4248, 4248, 4248, 4248,    0, 4248,
     4248, 4248, 4248, 4248, 4248, 4249, 4249,    0, 4249, 4249,
     4249, 4249, 4249, 4249, 4249, 4249, 4249, 4249, 4249, 4249,

     4249, 4249, 4249, 4249, 4249, 4249, 4249, 4249, 4249, 4249,
     4249, 4249, 4249, 4249, 4249, 4249, 4249, 4250, 4250,    0,
     4250, 4250,    0, 4250, 4250, 4250,    0, 4250, 4250, 4250,
     4250, 4250, 4250, 4250, 4250, 4250, 4250, 4250, 4250, 4250,
     4250, 4250,    0, 4250, 4250, 4250, 4250, 4250, 4250, 4251,
     4251,    0, 4251, 4251,    0, 4251, 4251, 4251,    0,    0,
        0, 4251, 4251, 4251,    0, 4251, 4251, 4251, 4251, 4251,
     4251, 4251, 4251, 4251, 4251, 4251, 4251, 4251, 4251, 4251,
     4251, 4252, 4252,    0, 4252, 4252, 4252, 4252, 4252, 4252,
     4252, 4252, 4252,    0, 4252, 4252, 4252, 4252, 4252, 4252,

     4252, 4252, 4252,    0, 4252, 4252,    0, 4252, 4252, 4252,
     4252, 4252, 4252, 4253, 4253,    0, 4253, 4253, 4253, 4253,
     4253, 4253, 4253, 4253, 4253, 4253, 4253, 4253, 4253, 4253,
     4253, 4253, 4253, 4253, 4253,    0, 4253, 4253,    0, 4253,
     4253, 4253, 4253, 4253, 4253, 4262, 4262, 4262,    0,    0,
        0, 4262,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4262, 4262,    0,
        0,    0,    0,    0,    0, 4262, 4263, 4263, 4263,    0,
        0,    0,    0,    0,    0,    0, 4263,    0, 4263,    0,
        0, 4263,    0,    0,    0,    0,    0,    0, 4263,    0,

        0,    0,    0,    0,    0,    0, 4263, 4264, 4264, 4264,
     4264, 4264, 4264, 4264, 4264, 4264, 4264, 4264, 4264, 4264,
     4264, 4264, 4264, 4264, 4264, 4264, 4264, 4264, 4264, 4264,
     4264, 4264, 4264, 4264, 4264, 4264, 4264, 4264, 4264, 4265,
     4265, 4265,    0,    0,    0,    0,    0,    0,    0, 4265,
        0, 4265,    0,    0, 4265,    0,    0,    0,    0,    0,
        0, 4265,    0,    0,    0,    0,    0,    0,    0, 4265,
     4266, 4266, 4266,    0,    0,    0, 4266,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4266,    0,    0,    0,    0,    0,    0,    0,

     4266, 4267, 4267, 4267,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4267,    0,    0,    0,
        0,    0,    0, 4267,    0,    0,    0,    0,    0,    0,
        0, 4267, 4268, 4268, 4268,    0,    0,    0,    0,    0,
        0, 4268,    0,    0,    0,    0,    0, 4268,    0,    0,
        0,    0,    0,    0, 4268,    0,    0,    0,    0,    0,
        0,    0, 4268, 4271, 4271, 4271,    0,    0,    0, 4271,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4271,    0,    0,    0,    0,
        0,    0,    0, 4271, 4274, 4274, 4274,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0, 4274,
     4274,    0,    0,    0,    0,    0, 4274,    0,    0,    0,
        0,    0,    0,    0, 4274, 4275, 4275, 4275, 4275, 4275,
     4275, 4275, 4275, 4275, 4275, 4275, 4275, 4275, 4275, 4275,
     4275, 4275, 4275, 4275, 4275, 4275, 4275, 4275, 4275, 4275,
     4275, 4275, 4275, 4275, 4275, 4275, 4275, 4276, 4276,    0,
     4276, 4276, 4276, 4276, 4276, 4276, 4276, 4276, 4276,    0,
     4276, 4276,    0, 4276, 4276, 4276, 4276, 4276, 4276,    0,
     4276, 4276,    0, 4276, 4276, 4276, 4276, 4276, 4276, 4278,
     4278, 4278, 4278, 4278, 4278, 4278, 4278, 4278, 4278, 4278,

     4278, 4278, 4278, 4278,    0,    0, 4278, 4278, 4278, 4278,
     4278, 4278,    0, 4278, 4278, 4278, 4278, 4278, 4278, 4278,
     4278, 4279, 4279,    0, 4279, 4279, 4279, 4279,    0, 4279,
     4279, 4279, 4279,    0, 4279, 4279,    0, 4279, 4279, 4279,
        0, 4279, 4279,    0, 4279, 4279,    0,    0, 4279, 4279,
     4279, 4279, 4279, 4280, 4280, 4280,    0,    0,    0,    0,
        0,    0, 4280,    0,    0, 4280,    0,    0, 4280,    0,
     4280, 4280,    0,    0,    0, 4280,    0,    0,    0,    0,
        0,    0,    0, 4280, 4281, 4281, 4281,    0,    0,    0,
        0,    0,    0, 4281,    0,    0, 4281,    0,    0, 4281,

     4281, 4281, 4281,    0,    0,    0, 4281,    0,    0,    0,
        0,    0,    0,    0, 4281, 4282, 4282, 4282,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4282,    0,
     4282,    0,    0,    0,    0,    0,    0, 4282,    0,    0,
        0,    0,    0,    0,    0, 4282, 4283, 4283, 4283,    0,
        0,    0, 4283,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4283,    0,
        0,    0,    0,    0,    0,    0, 4283, 4285, 4285, 4285,
     4285,    0,    0, 4285,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4285,    0,    0,    0,    0,    0, 4285,

        0,    0,    0,    0,    0,    0, 4285, 4285, 4286, 4286,
     4286,    0,    0,    0,    0,    0,    0, 4286,    0,    0,
     4286,    0,    0, 4286,    0, 4286, 4286,    0,    0,    0,
     4286,    0,    0,    0,    0,    0,    0,    0, 4286, 4287,
     4287, 4287,    0,    0,    0,    0,    0,    0, 4287,    0,
        0,    0,    0,    0, 4287,    0,    0,    0,    0,    0,
        0, 4287,    0,    0,    0,    0,    0,    0,    0, 4287,
     4288, 4288, 4288,    0,    0,    0,    0,    0,    0, 4288,
        0,    0,    0,    0,    0, 4288, 4288,    0,    0,    0,
        0,    0, 4288,    0,    0,    0,    0,    0,    0,    0,

     4288, 4289, 4289, 4289, 4289, 4289, 4289, 4289, 4289, 4289,
     4289, 4289, 4289,    0, 4289, 4289,    0, 4289, 4289, 4289,
     4289, 4289, 4289, 4289, 4289, 4289, 4289, 4289, 4289, 4289,
     4289, 4289, 4289, 4290, 4290, 4290, 4290, 4290, 4290, 4290,
     4290, 4290, 4290, 4290, 4290, 4290, 4290, 4290,    0, 4290,
     4290, 4290, 4290, 4290, 4290, 4290, 4290, 4290, 4290, 4290,
     4290, 4290, 4290, 4290, 4290, 4291, 4291, 4291, 4291,    0,
        0, 4291,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4291,    0,    0,    0,    0,    0, 4291,    0,    0,
        0,    0,    0,    0, 4291, 4291, 4292, 4292, 4292,    0,

        0,    0,    0,    0,    0, 4292,    0,    0,    0,    0,
        0, 4292, 4292,    0,    0,    0,    0,    0, 4292,    0,
        0,    0,    0,    0,    0,    0, 4292, 4296,    0,    0,
        0, 4296,    0, 4296,    0,    0, 4296,    0,    0,    0,
     4296,    0,    0,    0,    0,    0,    0,    0, 4296, 4297,
     4297, 4297, 4297,    0,    0, 4297,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4297,    0,    0,    0,    0,
        0, 4297,    0,    0,    0,    0,    0,    0, 4297, 4297,
     4298, 4298, 4298,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4298,    0, 4298, 4298,    0,    0,    0,

        0,    0, 4298,    0,    0,    0,    0,    0,    0,    0,
     4298, 4299, 4299, 4299,    0,    0,    0, 4299,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4299,    0,    0,    0,    0,    0,    0,
        0, 4299, 4300, 4300, 4300,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4300, 4300,    0,
        0,    0,    0,    0, 4300,    0,    0,    0,    0,    0,
        0,    0, 4300, 4304, 4304,    0, 4304, 4304, 4304, 4304,
     4304, 4304, 4304, 4304, 4304, 4304, 4304, 4304, 4304, 4304,
     4304, 4304, 4304, 4304, 4304, 4304, 4304, 4304,    0, 4304,

     4304, 4304, 4304, 4304, 4304, 4305, 4305, 4305, 4305,    0,
        0, 4305,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4305,    0,    0,    0,    0,    0, 4305,    0,    0,
        0,    0,    0,    0, 4305, 4305, 4306, 4306, 4306,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4306,    0,    0, 4306,    0,    0,    0, 4306,    0,
        0,    0,    0,    0,    0,    0, 4306, 4307, 4307,    0,
     4307, 4307, 4307, 4307, 4307, 4307, 4307, 4307, 4307, 4307,
     4307, 4307, 4307, 4307, 4307, 4307, 4307, 4307, 4307, 4307,
     4307, 4307, 4307, 4307, 4307, 4307, 4307, 4307, 4307, 4308,

     4308, 4308,    0,    0,    0, 4308, 4308,    0,    0,    0,
     4308,    0,    0,    0,    0, 4308,    0,    0,    0,    0,
        0, 4308,    0,    0,    0, 4308,    0,    0,    0, 4308,
     4309, 4309, 4309,    0,    0,    0, 4309,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4309,    0,    0,    0,
        0,    0, 4309,    0,    0,    0,    0,    0,    0,    0,
     4309, 4310, 4310, 4310,    0,    0,    0, 4310,    0,    0,
        0, 4310,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4310,    0,    0,    0,    0,    0,    0,
        0, 4310, 4311, 4311, 4311,    0,    0,    0,    0,    0,

        0,    0, 4311, 4311,    0,    0,    0, 4311, 4311,    0,
     4311,    0,    0,    0, 4311,    0,    0,    0,    0,    0,
        0,    0, 4311, 4312,    0,    0,    0,    0,    0,    0,
     4312,    0,    0,    0, 4312, 4312,    0,    0, 4312, 4312,
        0,    0,    0, 4312,    0, 4312, 4313, 4313, 4313, 4313,
     4313, 4313, 4313, 4313, 4313, 4313, 4313, 4313,    0, 4313,
     4313,    0, 4313, 4313, 4313, 4313, 4313, 4313, 4313, 4313,
     4313, 4313, 4313, 4313, 4313, 4313, 4313, 4313, 4314, 4314,
     4314, 4314, 4314, 4314, 4314, 4314, 4314, 4314, 4314, 4314,
     4314, 4314, 4314,    0, 4314, 4314, 4314, 4314, 4314, 4314,

     4314, 4314, 4314, 4314, 4314, 4314, 4314, 4314, 4314, 4314,
     4317, 4317, 4317,    0,    0,    0,    0,    0,    0, 4317,
        0,    0,    0, 4317,    0, 4317,    0,    0,    0,    0,
        0,    0, 4317,    0,    0,    0,    0,    0,    0,    0,
     4317, 4318, 4318, 4318,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4318, 4318,    0, 4318,
        0,    0,    0, 4318,    0,    0,    0,    0,    0,    0,
        0, 4318, 4319, 4319, 4319,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4319,    0,    0,
     4319,    0,    0,    0, 4319,    0,    0,    0,    0,    0,

        0,    0, 4319, 4320, 4320, 4320, 4320,    0,    0, 4320,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4320,
        0,    0,    0,    0,    0, 4320,    0,    0,    0,    0,
        0,    0, 4320, 4320, 4322, 4322, 4322, 4322, 4322, 4322,
     4322, 4322, 4322, 4322, 4322, 4322, 4322, 4322, 4322, 4322,
     4322, 4322, 4322, 4322, 4322, 4322, 4322, 4322, 4322, 4322,
     4322, 4322, 4322, 4322, 4322, 4322, 4323, 4323, 4323, 4323,
     4323,    0, 4323, 4323, 4323,    0, 4323, 4323, 4323, 4323,
     4323,    0, 4323, 4323, 4323,    0, 4323, 4323,    0, 4323,
     4323, 4323, 4323, 4323,    0,    0, 4323, 4323, 4324, 4324,

        0, 4324, 4324, 4324, 4324, 4324, 4324, 4324, 4324, 4324,
     4324, 4324, 4324, 4324, 4324, 4324, 4324, 4324, 4324, 4324,
     4324, 4324, 4324, 4324, 4324, 4324, 4324, 4324, 4324, 4324,
     4325, 4325,    0, 4325, 4325, 4325, 4325, 4325, 4325, 4325,
     4325, 4325, 4325, 4325, 4325, 4325, 4325, 4325, 4325, 4325,
     4325, 4325, 4325, 4325, 4325,    0, 4325, 4325, 4325, 4325,
     4325, 4325, 4326, 4326,    0, 4326, 4326, 4326, 4326, 4326,
     4326, 4326, 4326, 4326, 4326, 4326, 4326, 4326, 4326, 4326,
     4326, 4326, 4326, 4326, 4326, 4326, 4326, 4326, 4326, 4326,
     4326, 4326, 4326, 4326, 4327, 4327, 4327,    0,    0,    0,

     4327,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4327,    0,    0,    0,
        0,    0,    0,    0, 4327, 4328, 4328, 4328,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4328,    0,
     4328, 4328,    0,    0,    0,    0,    0, 4328,    0,    0,
        0,    0,    0,    0,    0, 4328, 4329, 4329, 4329,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4329,
        0, 4329, 4329,    0,    0,    0,    0,    0, 4329,    0,
        0,    0,    0,    0,    0,    0, 4329, 4331, 4331, 4331,
     4331,    0,    0, 4331,    0,    0,    0,    0,    0,    0,

        0,    0,    0, 4331,    0,    0,    0,    0,    0, 4331,
        0,    0,    0,    0,    0,    0, 4331, 4331, 4332, 4332,
        0, 4332, 4332, 4332, 4332, 4332, 4332, 4332, 4332, 4332,
     4332, 4332, 4332, 4332, 4332, 4332, 4332, 4332, 4332, 4332,
     4332, 4332, 4332,    0, 4332, 4332, 4332, 4332, 4332, 4332,
     4334,    0,    0,    0, 4334, 4334, 4334, 4334, 4334, 4334,
     4334, 4334,    0, 4334,    0,    0, 4334, 4334, 4334, 4334,
     4334, 4334, 4334, 4334, 4334, 4334, 4334, 4334, 4334, 4334,
     4334, 4334, 4336,    0, 4336,    0,    0,    0,    0,    0,
        0, 4336,    0, 4336,    0,    0,    0,    0,    0, 4336,

     4337, 4337, 4337,    0,    0,    0, 4337,    0,    0,    0,
        0, 4337,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4337,    0,    0,    0,    0,    0,    0,    0,
     4337, 4338, 4338, 4338,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4338,    0, 4338,    0,    0,    0,
        0,    0,    0, 4338,    0,    0,    0,    0,    0,    0,
        0, 4338, 4339, 4339, 4339,    0,    0,    0, 4339,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4339,    0,    0,    0,    0,    0,
        0,    0, 4339, 4341,    0,    0,    0,    0,    0,    0,

     4341,    0,    0,    0, 4341, 4341,    0,    0, 4341, 4341,
        0,    0,    0, 4341,    0, 4341, 4342, 4342,    0, 4342,
        0,    0,    0, 4342,    0,    0,    0,    0,    0,    0,
        0, 4342, 4343, 4343,    0, 4343, 4343, 4343, 4343, 4343,
     4343, 4343, 4343, 4343, 4343, 4343, 4343, 4343, 4343, 4343,
     4343, 4343, 4343, 4343, 4343, 4343, 4343,    0, 4343, 4343,
     4343, 4343, 4343, 4343, 4344, 4344,    0, 4344, 4344, 4344,
     4344, 4344, 4344, 4344, 4344, 4344, 4344, 4344, 4344, 4344,
     4344, 4344, 4344, 4344, 4344, 4344, 4344, 4344, 4344, 4344,
     4344, 4344, 4344, 4344, 4344, 4344, 4345, 4345, 4345,    0,

        0,    0, 4345,    0,    0,    0,    0, 4345,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4345,    0,
        0,    0,    0,    0,    0,    0, 4345, 4346, 4346, 4346,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4346, 4346,    0,    0,    0,    0,    0, 4346,
        0,    0,    0,    0,    0,    0,    0, 4346, 4348, 4348,
     4348, 4348,    0,    0, 4348,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4348,    0,    0,    0,    0,    0,
     4348,    0,    0,    0,    0,    0,    0, 4348, 4348, 4349,
     4349,    0, 4349, 4349, 4349, 4349, 4349, 4349, 4349, 4349,

     4349, 4349, 4349, 4349, 4349, 4349, 4349, 4349, 4349, 4349,
     4349, 4349, 4349, 4349,    0, 4349, 4349, 4349, 4349, 4349,
     4349, 4351, 4351,    0, 4351, 4351, 4351, 4351, 4351, 4351,
     4351, 4351, 4351, 4351, 4351, 4351, 4351, 4351, 4351, 4351,
     4351, 4351, 4351, 4351, 4351, 4351,    0, 4351, 4351, 4351,
     4351, 4351, 4351, 4352, 4352,    0, 4352, 4352, 4352, 4352,
     4352, 4352, 4352, 4352, 4352, 4352, 4352, 4352, 4352, 4352,
     4352, 4352, 4352, 4352, 4352, 4352, 4352, 4352,    0, 4352,
     4352, 4352, 4352, 4352, 4352, 4353, 4353,    0, 4353, 4353,
     4353, 4353, 4353, 4353, 4353, 4353, 4353, 4353, 4353, 4353,

     4353, 4353, 4353, 4353, 4353, 4353, 4353, 4353, 4353, 4353,
        0, 4353, 4353, 4353, 4353, 4353, 4353, 4354, 4354,    0,
     4354, 4354, 4354, 4354, 4354, 4354, 4354, 4354, 4354, 4354,
     4354, 4354, 4354, 4354, 4354, 4354, 4354, 4354, 4354, 4354,
     4354, 4354,    0, 4354, 4354, 4354, 4354, 4354, 4354, 4355,
     4355,    0, 4355, 4355,    0, 4355, 4355, 4355,    0, 4355,
     4355, 4355, 4355, 4355,    0, 4355, 4355, 4355, 4355, 4355,
     4355, 4355, 4355, 4355, 4355, 4355, 4355,    0,    0, 4355,
     4355, 4356, 4356,    0, 4356, 4356, 4356, 4356, 4356, 4356,
     4356, 4356, 4356, 4356, 4356, 4356, 4356, 4356, 4356, 4356,

     4356, 4356, 4356, 4356, 4356, 4356,    0, 4356, 4356, 4356,
     4356, 4356, 4356, 4357, 4357, 4357, 4357, 4357, 4357, 4357,
     4357, 4357, 4357, 4357, 4357, 4357, 4357, 4357, 4357,    0,
     4357, 4357, 4357, 4357, 4357, 4357,    0, 4357, 4357, 4357,
     4357, 4357, 4357, 4357, 4357, 4360, 4360, 4360,    0,    0,
        0,    0,    0,    0,    0, 4360,    0, 4360,    0,    0,
     4360,    0,    0,    0,    0,    0,    0, 4360,    0,    0,
        0,    0,    0,    0,    0, 4360, 4361, 4361, 4361,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4361,    0,    0,    0,    0,    0,    0, 4361,    0,

        0,    0,    0,    0,    0,    0, 4361, 4364, 4364, 4364,
     4364,    0,    0, 4364,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4364,    0,    0,    0,    0,    0, 4364,
        0,    0,    0,    0,    0,    0, 4364, 4364, 4365, 4365,
        0, 4365, 4365, 4365, 4365, 4365, 4365, 4365, 4365, 4365,
        0, 4365, 4365,    0, 4365, 4365, 4365, 4365, 4365, 4365,
        0, 4365, 4365,    0, 4365, 4365, 4365, 4365, 4365, 4365,
     4367, 4367, 4367,    0,    0,    0,    0,    0,    0, 4367,
        0,    0, 4367,    0,    0, 4367, 4367, 4367, 4367,    0,
        0,    0, 4367,    0,    0,    0,    0,    0,    0,    0,

     4367, 4369, 4369, 4369,    0,    0,    0,    0,    0,    0,
     4369,    0,    0,    0,    0,    0, 4369, 4369,    0,    0,
        0,    0,    0, 4369,    0,    0,    0,    0,    0,    0,
        0, 4369, 4370, 4370, 4370,    0,    0,    0,    0,    0,
        0, 4370,    0,    0,    0,    0,    0, 4370, 4370,    0,
        0,    0,    0,    0, 4370,    0,    0,    0,    0,    0,
        0,    0, 4370, 4372,    0,    0,    0, 4372,    0, 4372,
        0,    0, 4372,    0,    0,    0, 4372,    0,    0,    0,
        0,    0,    0,    0, 4372, 4373, 4373, 4373, 4373,    0,
        0, 4373,    0,    0,    0,    0,    0,    0,    0,    0,

        0, 4373,    0,    0,    0,    0,    0, 4373,    0,    0,
        0,    0,    0,    0, 4373, 4373, 4374, 4374, 4374,    0,
        0,    0, 4374,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4374,    0,
        0,    0,    0,    0,    0,    0, 4374, 4375, 4375, 4375,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4375, 4375,    0,    0,    0,    0,    0, 4375,
        0,    0,    0,    0,    0,    0,    0, 4375, 4376, 4376,
     4376,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4376,    0, 4376, 4376,    0,    0,    0,    0,    0,

     4376,    0,    0,    0,    0,    0,    0,    0, 4376, 4377,
     4377, 4377,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4377, 4377,    0,    0,    0,    0,
        0, 4377,    0,    0,    0,    0,    0,    0,    0, 4377,
     4379, 4379, 4379,    0,    0,    0, 4379,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4379,    0,    0,    0,    0,    0,    0,    0,
     4379, 4380, 4380,    0, 4380, 4380, 4380, 4380, 4380, 4380,
     4380, 4380, 4380, 4380, 4380, 4380, 4380, 4380, 4380, 4380,
     4380, 4380, 4380, 4380, 4380, 4380,    0, 4380, 4380, 4380,

     4380, 4380, 4380, 4381, 4381, 4381,    0,    0,    0, 4381,
     4381,    0,    0,    0, 4381,    0,    0,    0,    0, 4381,
        0,    0,    0,    0,    0, 4381,    0,    0,    0, 4381,
        0,    0,    0, 4381, 4382, 4382, 4382,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4382,
     4382,    0, 4382,    0,    0,    0, 4382,    0,    0,    0,
        0,    0,    0,    0, 4382, 4383, 4383, 4383,    0,    0,
        0, 4383,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4383,    0,    0,
        0,    0,    0,    0,    0, 4383, 4384, 4384, 4384,    0,

        0,    0,    0,    0,    0,    0, 4384,    0,    0,    0,
        0, 4384, 4384,    0, 4384,    0,    0,    0, 4384,    0,
        0,    0,    0,    0,    0,    0, 4384, 4385, 4385, 4385,
        0,    0,    0, 4385,    0,    0,    0, 4385,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4385,
        0,    0,    0,    0,    0,    0,    0, 4385, 4386,    0,
        0,    0, 4386,    0,    0,    0,    0, 4386,    0,    0,
        0,    0,    0,    0, 4386,    0,    0,    0,    0,    0,
        0,    0, 4386, 4387,    0,    0,    0,    0,    0,    0,
     4387,    0,    0,    0, 4387, 4387,    0,    0, 4387, 4387,

        0,    0,    0, 4387,    0, 4387, 4388, 4388, 4388, 4388,
     4388, 4388, 4388, 4388, 4388, 4388, 4388, 4388, 4388, 4388,
     4388, 4388, 4388, 4388, 4388, 4388, 4388, 4388, 4388, 4388,
     4388, 4388, 4388, 4388, 4388, 4388, 4388, 4388, 4389, 4389,
        0, 4389, 4389, 4389, 4389, 4389, 4389, 4389, 4389, 4389,
     4389, 4389, 4389, 4389, 4389, 4389, 4389, 4389, 4389, 4389,
     4389, 4389, 4389, 4389, 4389, 4389, 4389, 4389, 4389, 4389,
     4391, 4391, 4391,    0,    0,    0,    0,    0,    0, 4391,
        0,    0,    0, 4391,    0, 4391,    0,    0,    0,    0,
        0,    0, 4391,    0,    0,    0,    0,    0,    0,    0,

     4391, 4392, 4392, 4392,    0,    0,    0,    0,    0,    0,
     4392,    0,    0,    0, 4392,    0, 4392,    0,    0,    0,
        0,    0,    0, 4392,    0,    0,    0,    0,    0,    0,
        0, 4392, 4393, 4393, 4393,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4393, 4393,    0,
     4393,    0,    0,    0, 4393,    0,    0,    0,    0,    0,
        0,    0, 4393, 4395, 4395, 4395, 4395, 4395, 4395, 4395,
     4395, 4395, 4395, 4395, 4395, 4395, 4395, 4395, 4395, 4395,
     4395, 4395, 4395, 4395, 4395, 4395, 4395, 4395, 4395, 4395,
     4395, 4395, 4395, 4395, 4395, 4396, 4396, 4396, 4396, 4396,

        0, 4396, 4396, 4396,    0, 4396, 4396, 4396, 4396, 4396,
        0, 4396, 4396, 4396,    0, 4396, 4396,    0, 4396, 4396,
     4396, 4396, 4396,    0,    0, 4396, 4396, 4397, 4397,    0,
     4397, 4397, 4397, 4397, 4397, 4397, 4397, 4397, 4397, 4397,
     4397, 4397, 4397, 4397, 4397, 4397, 4397, 4397, 4397, 4397,
     4397, 4397, 4397, 4397, 4397, 4397, 4397, 4397, 4397, 4398,
     4398,    0, 4398, 4398, 4398, 4398, 4398, 4398, 4398, 4398,
     4398, 4398, 4398, 4398, 4398, 4398, 4398, 4398, 4398, 4398,
     4398, 4398, 4398, 4398,    0, 4398, 4398, 4398, 4398, 4398,
     4398, 4399, 4399, 4399, 4399, 4399, 4399, 4399, 4399, 4399,

     4399, 4399, 4399, 4399, 4399, 4399, 4399,    0, 4399, 4399,
     4399, 4399, 4399, 4399,    0, 4399, 4399, 4399, 4399, 4399,
     4399, 4399, 4399, 4400, 4400, 4400,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4400,    0, 4400, 4400,
        0,    0,    0,    0,    0, 4400,    0,    0,    0,    0,
        0,    0,    0, 4400, 4401, 4401, 4401,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4401,    0, 4401,
     4401,    0,    0,    0,    0,    0, 4401,    0,    0,    0,
        0,    0,    0,    0, 4401, 4402, 4402,    0, 4402, 4402,
     4402, 4402, 4402, 4402, 4402, 4402, 4402, 4402, 4402, 4402,

     4402, 4402, 4402, 4402, 4402, 4402, 4402, 4402, 4402, 4402,
        0, 4402, 4402, 4402, 4402, 4402, 4402, 4404,    0,    0,
        0, 4404, 4404, 4404, 4404, 4404, 4404, 4404, 4404,    0,
     4404,    0,    0, 4404, 4404, 4404, 4404, 4404, 4404, 4404,
     4404, 4404, 4404, 4404, 4404, 4404, 4404, 4404, 4404, 4405,
        0, 4405,    0,    0,    0,    0,    0,    0, 4405,    0,
     4405,    0,    0,    0,    0,    0, 4405, 4406, 4406, 4406,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4406,    0, 4406,    0,    0,    0,    0,    0,    0, 4406,
        0,    0,    0,    0,    0,    0,    0, 4406, 4408, 4408,

        0, 4408,    0,    0,    0, 4408,    0,    0,    0,    0,
        0,    0,    0, 4408, 4409, 4409,    0, 4409, 4409, 4409,
     4409, 4409, 4409, 4409, 4409, 4409, 4409, 4409, 4409, 4409,
     4409, 4409, 4409, 4409, 4409, 4409, 4409, 4409, 4409,    0,
     4409, 4409, 4409, 4409, 4409, 4409, 4410, 4410, 4410,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4410, 4410,    0,    0,    0,    0,    0, 4410,    0,
        0,    0,    0,    0,    0,    0, 4410, 4411, 4411,    0,
     4411, 4411, 4411, 4411, 4411, 4411, 4411, 4411, 4411, 4411,
     4411, 4411, 4411, 4411, 4411, 4411, 4411, 4411, 4411, 4411,

     4411, 4411,    0, 4411, 4411, 4411, 4411, 4411, 4411, 4413,
     4413,    0, 4413, 4413, 4413, 4413, 4413, 4413, 4413, 4413,
     4413, 4413, 4413, 4413, 4413, 4413, 4413, 4413, 4413, 4413,
     4413, 4413, 4413, 4413,    0, 4413, 4413, 4413, 4413, 4413,
     4413, 4414, 4414,    0, 4414, 4414, 4414, 4414, 4414, 4414,
     4414, 4414, 4414, 4414, 4414, 4414, 4414, 4414, 4414, 4414,
     4414, 4414, 4414, 4414, 4414, 4414,    0, 4414, 4414, 4414,
     4414, 4414, 4414, 4415, 4415,    0, 4415, 4415, 4415, 4415,
     4415, 4415, 4415, 4415, 4415, 4415, 4415, 4415, 4415, 4415,
     4415, 4415, 4415, 4415, 4415, 4415, 4415, 4415,    0, 4415,

     4415, 4415, 4415, 4415, 4415, 4416, 4416,    0, 4416, 4416,
     4416, 4416, 4416, 4416, 4416, 4416, 4416, 4416, 4416, 4416,
     4416, 4416, 4416, 4416, 4416, 4416, 4416, 4416, 4416, 4416,
        0, 4416, 4416, 4416, 4416, 4416, 4416, 4417, 4417,    0,
     4417, 4417, 4417, 4417, 4417, 4417,    0, 4417, 4417, 4417,
     4417, 4417,    0, 4417, 4417, 4417, 4417, 4417, 4417, 4417,
     4417, 4417, 4417, 4417, 4417,    0,    0, 4417, 4417, 4418,
     4418,    0, 4418, 4418, 4418, 4418, 4418, 4418, 4418, 4418,
     4418, 4418, 4418, 4418, 4418, 4418, 4418, 4418, 4418, 4418,
     4418, 4418, 4418, 4418,    0, 4418, 4418, 4418, 4418, 4418,

     4418, 4419, 4419, 4419, 4419, 4419, 4419, 4419, 4419, 4419,
     4419, 4419, 4419, 4419, 4419, 4419, 4419,    0, 4419, 4419,
     4419, 4419, 4419, 4419,    0, 4419, 4419, 4419, 4419, 4419,
     4419, 4419, 4419, 4420,    0,    0,    0,    0,    0, 4420,
     4420,    0,    0,    0, 4420,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4420,    0,    0,    0,    0,
        0,    0,    0, 4420, 4421, 4421,    0, 4421, 4421, 4421,
     4421, 4421, 4421, 4421, 4421, 4421,    0, 4421, 4421,    0,
     4421, 4421, 4421, 4421, 4421, 4421,    0, 4421, 4421,    0,
     4421, 4421, 4421, 4421, 4421, 4421, 4422, 4422, 4422, 4422,

     4422, 4422, 4422, 4422, 4422, 4422, 4422, 4422, 4422, 4422,
     4422, 4422,    0, 4422, 4422, 4422, 4422, 4422, 4422,    0,
     4422, 4422, 4422, 4422, 4422, 4422, 4422, 4422, 4423, 4423,
     4423,    0,    0,    0,    0,    0,    0, 4423,    0,    0,
        0,    0,    0, 4423, 4423,    0,    0,    0,    0,    0,
     4423,    0,    0,    0,    0,    0,    0,    0, 4423, 4424,
        0,    0,    0, 4424,    0, 4424,    0,    0, 4424,    0,
        0,    0, 4424,    0,    0,    0,    0,    0,    0,    0,
     4424, 4425, 4425, 4425,    0,    0,    0, 4425,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0, 4425,    0,    0,    0,    0,    0,    0,
        0, 4425, 4428, 4428, 4428,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4428, 4428,    0,
        0,    0,    0,    0, 4428,    0,    0,    0,    0,    0,
        0,    0, 4428, 4429, 4429, 4429,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4429,    0, 4429, 4429,
        0,    0,    0,    0,    0, 4429,    0,    0,    0,    0,
        0,    0,    0, 4429, 4430, 4430, 4430,    0,    0,    0,
     4430,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4430,    0,    0,    0,    0,    0, 4430,    0,    0,    0,

        0,    0,    0,    0, 4430, 4431, 4431, 4431,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4431, 4431,    0, 4431,    0,    0,    0, 4431,    0,    0,
        0,    0,    0,    0,    0, 4431, 4432,    0,    0,    0,
        0,    0,    0, 4432,    0,    0,    0, 4432, 4432,    0,
        0, 4432, 4432,    0,    0,    0, 4432,    0, 4432, 4433,
     4433, 4433,    0,    0,    0,    0,    0,    0,    0, 4433,
        0,    0,    0,    0, 4433, 4433,    0, 4433,    0,    0,
        0, 4433,    0,    0,    0,    0,    0,    0,    0, 4433,
     4434,    0,    0,    0, 4434,    0,    0,    0,    0, 4434,

        0,    0,    0,    0,    0,    0, 4434,    0,    0,    0,
        0,    0,    0,    0, 4434, 4435, 4435, 4435, 4435, 4435,
     4435, 4435, 4435, 4435, 4435, 4435, 4435, 4435, 4435, 4435,
     4435, 4435, 4435, 4435, 4435, 4435, 4435, 4435, 4435, 4435,
     4435, 4435, 4435, 4435, 4435, 4435, 4435, 4436, 4436,    0,
     4436, 4436, 4436, 4436, 4436, 4436, 4436, 4436, 4436, 4436,
     4436, 4436, 4436, 4436, 4436, 4436, 4436, 4436, 4436, 4436,
     4436, 4436, 4436, 4436, 4436, 4436, 4436, 4436, 4436, 4437,
     4437, 4437,    0,    0,    0,    0,    0,    0, 4437,    0,
        0,    0, 4437,    0, 4437,    0,    0,    0,    0,    0,

        0, 4437,    0,    0,    0,    0,    0,    0,    0, 4437,
     4438, 4438, 4438,    0,    0,    0,    0,    0,    0, 4438,
        0,    0,    0, 4438,    0, 4438,    0,    0,    0,    0,
        0,    0, 4438,    0,    0,    0,    0,    0,    0,    0,
     4438, 4439, 4439, 4439,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4439, 4439,    0, 4439,
        0,    0,    0, 4439,    0,    0,    0,    0,    0,    0,
        0, 4439, 4441, 4441, 4441, 4441, 4441,    0, 4441, 4441,
     4441,    0, 4441, 4441, 4441, 4441, 4441,    0, 4441, 4441,
     4441,    0, 4441, 4441,    0, 4441, 4441, 4441, 4441, 4441,

        0,    0, 4441, 4441, 4442, 4442,    0, 4442, 4442, 4442,
     4442, 4442, 4442, 4442, 4442, 4442, 4442, 4442, 4442, 4442,
     4442, 4442, 4442, 4442, 4442, 4442, 4442, 4442, 4442, 4442,
     4442, 4442, 4442, 4442, 4442, 4442, 4443, 4443, 4443,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4443,
        0, 4443, 4443,    0,    0,    0,    0,    0, 4443,    0,
        0,    0,    0,    0,    0,    0, 4443, 4444, 4444, 4444,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4444,    0,    0,    0,    0,    0,    0, 4444,
        0,    0,    0,    0,    0,    0,    0, 4444, 4445,    0,

        0,    0, 4445, 4445, 4445, 4445, 4445, 4445, 4445, 4445,
        0, 4445,    0,    0, 4445, 4445, 4445, 4445, 4445, 4445,
     4445, 4445, 4445, 4445, 4445, 4445, 4445, 4445, 4445, 4445,
     4446, 4446,    0, 4446,    0,    0,    0, 4446,    0,    0,
        0,    0,    0,    0,    0, 4446, 4447, 4447, 4447,    0,
        0,    0, 4447,    0,    0,    0,    0, 4447,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4447,    0,
        0,    0,    0,    0,    0,    0, 4447, 4448, 4448,    0,
     4448, 4448,    0, 4448, 4448, 4448, 4448, 4448, 4448, 4448,
     4448, 4448, 4448, 4448, 4448, 4448, 4448, 4448, 4448, 4448,

     4448, 4448, 4448, 4448, 4448, 4448, 4448, 4448, 4448, 4449,
     4449,    0, 4449, 4449, 4449, 4449, 4449, 4449, 4449, 4449,
     4449,    0, 4449, 4449,    0, 4449, 4449, 4449, 4449, 4449,
     4449,    0, 4449, 4449,    0, 4449, 4449, 4449, 4449, 4449,
     4449, 4450, 4450, 4450,    0,    0,    0,    0,    0,    0,
     4450,    0,    0,    0,    0,    0, 4450, 4450,    0,    0,
        0,    0,    0, 4450,    0,    0,    0,    0,    0,    0,
        0, 4450, 4452, 4452, 4452, 4452,    0,    0, 4452,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4452,    0,
        0,    0,    0,    0, 4452,    0,    0,    0,    0,    0,

        0, 4452, 4452, 4453, 4453, 4453,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4453,    0, 4453, 4453,
        0,    0,    0,    0,    0, 4453,    0,    0,    0,    0,
        0,    0,    0, 4453, 4454, 4454, 4454,    0,    0,    0,
     4454,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4454,    0,    0,    0,
        0,    0,    0,    0, 4454, 4455,    0,    0,    0,    0,
        0,    0, 4455,    0,    0,    0, 4455, 4455,    0,    0,
     4455, 4455,    0,    0,    0, 4455,    0, 4455, 4460, 4460,
     4460, 4460, 4460, 4460, 4460, 4460, 4460, 4460, 4460, 4460,

     4460, 4460, 4460, 4460,    0, 4460, 4460, 4460, 4460, 4460,
     4460,    0, 4460, 4460, 4460, 4460, 4460, 4460, 4460, 4460,
     4463, 4463, 4463, 4463, 4463, 4463, 4463, 4463, 4463, 4463,
     4463, 4463, 4463, 4463, 4463, 4463,    0, 4463, 4463, 4463,
     4463, 4463, 4463,    0, 4463, 4463, 4463, 4463, 4463, 4463,
     4463, 4463, 4465, 4465, 4465,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4465,    0,    0,
        0, 4465,    0,    0, 4465,    0,    0,    0,    0,    0,
        0,    0, 4465, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,

     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915,
     3915, 3915, 3915, 3915, 3915, 3915, 3915, 3915
    } ;

extern int scanYY_flex_debug;
int scanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *scanYYtext;
#line 1 "scanner.l"
/*****************************************************************************
 *
 * $Id: scanner.l,v 1.80 2001/03/19 19:27:41 root Exp $
 *
 * Copyright (C) 1997-2012 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 19 "scanner.l"

/*
 *	includes
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include "qtbc.h"
#include <qarray.h>
#include <qstack.h>
#include <qregexp.h>
#include <unistd.h>
#include <qfile.h>
  
#include "scanner.h"
#include "entry.h"
#include "message.h"
#include "config.h"
#include "doxygen.h"
#include "util.h"
#include "defargs.h"
#include "language.h"
#include "commentscan.h"
#include "code.h"
#include "arguments.h"

#define YY_NEVER_INTERACTIVE 1

/* -----------------------------------------------------------------
 *
 *	statics
 */
static ParserInterface *g_thisParser;
static const char *     inputString;
static int		inputPosition;
static QFile            inputFile;
static int		lastContext;
static int		lastCContext;
static int              lastDocContext;
static int              lastCPPContext;
static int              lastSkipSharpContext;
static int              lastSkipRoundContext;
static int              lastStringContext;
static int              lastCurlyContext;
static int              lastRoundContext;
static int              lastSquareContext;
static int              lastInitializerContext;
static int              lastClassTemplSpecContext;
static int              lastPreLineCtrlContext;
static int              lastSkipVerbStringContext;
static int              lastCommentInArgContext;
static int              lastCSConstraint;
static int              lastHereDocContext;
static int              lastDefineContext;
static Protection	protection;
static Protection	baseProt;
static int		sharpCount   = 0 ;
static int		roundCount   = 0 ;
static int		curlyCount   = 0 ;
static int		squareCount  = 0 ;
static int              padCount     = 0 ;
static QCString         slString;
static Entry*		current_root = 0 ;
static Entry*		global_root  = 0 ;
static Entry*		current      = 0 ;
static Entry*		previous     = 0 ;
static Entry*		tempEntry    = 0 ;
static Entry*		firstTypedefEntry = 0 ;
static Entry*		memspecEntry = 0 ;
static int		yyLineNr     = 1 ;
static int              anonCount    = 0 ;        
static int              anonNSCount  = 0 ;        
static QCString		yyFileName;
static MethodTypes 	mtype;
static bool    		gstat;
static bool             removeSlashes;
static Specifier 	virt;
static Specifier 	baseVirt;
static QCString         msType,msName,msArgs;
static bool             isTypedef;
static int              tmpDocType;
static QCString         sectionLabel;
static QCString		sectionTitle;
static QCString         funcPtrType;
static QCString         templateStr;
static QCString         aliasName;
static QCString         baseName;
static QCString*        specName;
static QCString         formulaText;
static QCString         formulaEnd;
static bool             useOverrideCommands = FALSE;

static SrcLangExt       language;
static bool             insideIDL   = FALSE;		//!< processing IDL code?
static bool             insideJava  = FALSE;		//!< processing Java code?
static bool             insideCS    = FALSE;		//!< processing C# code?
static bool             insideD     = FALSE;		//!< processing D code?
static bool             insidePHP   = FALSE;		//!< processing PHP code?
static bool             insideObjC  = FALSE;            //!< processing Objective C code?
static bool             insideCli   = FALSE;            //!< processing C++/CLI code?
static bool             insideJS    = FALSE;            //!< processing JavaScript code?

static bool             insideCppQuote = FALSE;
static bool             insideProtocolList = FALSE;

static int              argRoundCount;
static int              argSharpCount;
static int              currentArgumentContext;
static int              lastCopyArgStringContext;
static int              lastCopyArgContext;
static QCString         *copyArgString;
static QCString         fullArgString;

static ArgumentList     *currentArgumentList;
static char             lastCopyArgChar;

static QCString         *pCopyQuotedString;
static QCString         *pCopyRoundString;
static QCString         *pCopyCurlyString;

static QGString         *pCopyCurlyGString;
static QGString         *pCopyRoundGString;
static QGString         *pCopyQuotedGString;
static QGString         *pCopyHereDocGString;
static QGString         *pSkipVerbString;
static QStack<Grouping> autoGroupStack;

static bool             insideFormula;
static bool  	        insideTryBlock=FALSE;
static bool             insideCode;
static bool             needsSemi;

//static int              depthIf;
static int  	        initBracketCount;
static QCString         memberGroupRelates;
static QCString         memberGroupInside;
static QCString         xrefItemKey;
static QCString         xrefItemTitle;
static QCString         xrefListTitle;

static QCString         g_skipBlockName;
static QCString         oldStyleArgType;
static QCString         docBackup;
static QCString         briefBackup;
static bool             g_inputFromFile;

static int              docBlockContext;
static QGString         docBlock;
static QCString         docBlockName;
static bool             docBlockInBody;
static bool             docBlockAutoBrief;
static char             docBlockTerm;

static QCString         idlAttr;
static QCString         idlProp;

static bool             g_lexInit = FALSE;
static bool             externC;

static QCString         g_hereDocId;

//-----------------------------------------------------------------------------

// forward declarations
//static void handleGroupStartCommand(const char *header);
//static void handleGroupEndCommand();

//-----------------------------------------------------------------------------

static void initParser()
{
  sectionLabel.resize(0);
  sectionTitle.resize(0);
  baseName.resize(0);
  formulaText.resize(0);
  protection = Public;
  baseProt = Public;
  sharpCount = 0;
  roundCount = 0;
  curlyCount = 0;
  mtype = Method;
  gstat = FALSE;
  virt = Normal;
  baseVirt = Normal;
  isTypedef = FALSE;
  autoGroupStack.clear();
  insideTryBlock = FALSE;
  autoGroupStack.setAutoDelete(TRUE);
  insideFormula = FALSE;
  insideCode=FALSE;
  insideCli=Config_getBool("CPP_CLI_SUPPORT");
  previous = 0;
}

static void initEntry()
{
  if (insideJava) 
  {
    protection = (current_root->spec & (Entry::Interface|Entry::Enum)) ?  Public : Package;
  }
  current->protection = protection ;
  current->mtype      = mtype;
  current->virt       = virt;
  current->stat       = gstat;
  current->lang       = language;
  //printf("*** initEntry() language=%d\n",language);
  //if (!autoGroupStack.isEmpty())
  //{
  //  //printf("Appending group %s\n",autoGroupStack.top()->groupname.data());
  //  current->groups->append(new Grouping(*autoGroupStack.top()));
  //}
  initGroupInfo(current);
  isTypedef=FALSE;
}


//-----------------------------------------------------------------------------

///// remove any automatic grouping and add new one (if given)
//static void setCurrentGroup( QCString *newgroup, Grouping::GroupPri_t pri )
//{
//   /* remove auto group name from current entry and discard it */
//   Grouping *g = current->groups->first();
//   int i=0; 
//   while (g)
//   {
//     if (g->pri <= Grouping::GROUPING_AUTO_DEF)
//     {
//       current->groups->remove(i);
//       i--;
//     }
//     g=current->groups->next();
//     i++;
//   }
//
//   /* use new group name instead? */
//   if ( newgroup )
//   {
//      current->groups->append(new Grouping(*newgroup, pri));
//   } 
//}
//
//static int newMemberGroupId()
//{
//  static int curGroupId=0;
//  return curGroupId++;
//}
//
// forward declarations
//static void startGroupInDoc();
//static void endGroup();

//-----------------------------------------------------------------------------

static void lineCount()
{
  for( const char* c = scanYYtext ; *c ; ++c )
    yyLineNr += (*c == '\n') ;
}

static void addType( Entry* current )
{
    uint tl=current->type.length();
    if( tl>0 && !current->name.isEmpty() && current->type.at(tl-1)!='.') 
    {
      current->type += ' ' ;
    }
    current->type += current->name ;
    current->name.resize(0) ;
    tl=current->type.length();
    if( tl>0 && !current->args.isEmpty() && current->type.at(tl-1)!='.') 
    {
      current->type += ' ' ;
    }
    current->type += current->args ;
    current->args.resize(0) ;
    current->argList->clear();
}


static QCString stripQuotes(const char *s)
{
  QCString name;
  if (s==0 || *s==0) return name;
  name=s;
  if (name.at(0)=='"' && name.at(name.length()-1)=='"')
  {
    name=name.mid(1,name.length()-2);
  }
  return name;
}

//-----------------------------------------------------------------

static void startCommentBlock(bool);
static void handleCommentBlock(const QCString &doc,bool brief);
static void handleParametersCommentBlocks(ArgumentList *al);

//-----------------------------------------------------------------

static bool nameIsOperator(QCString &name)
{
  int i=name.find("operator");
  if (i==-1) return FALSE;
  if (i==0 && !isId(name.at(8))) return TRUE; // case operator ::X
  if (i>0 && !isId(name.at(i-1)) && !isId(name.at(i+8))) return TRUE; // case X::operator
  return FALSE; // case TEXToperatorTEXT
}

//-----------------------------------------------------------------------------

static void setContext()
{
  QCString fileName = yyFileName;
  language   = getLanguageFromFileName(fileName);
  insideIDL  = language==SrcLangExt_IDL;
  insideJava = language==SrcLangExt_Java;
  insideCS   = language==SrcLangExt_CSharp; 
  insideD    = language==SrcLangExt_D;
  insidePHP  = language==SrcLangExt_PHP;
  insideObjC = language==SrcLangExt_ObjC;
  insideJS   = language==SrcLangExt_JS;
  if ( insidePHP )
  {
    useOverrideCommands = TRUE;
  }
  //printf("setContext(%s) insideIDL=%d insideJava=%d insideCS=%d "
  //       "insideD=%d insidePHP=%d insideObjC=%d\n",
  //       yyFileName.data(),insideIDL,insideJava,insideCS,insideD,insidePHP,insideObjC
  //	);
}

//-----------------------------------------------------------------------------

static void prependScope()
{
  if (current_root->section & Entry::SCOPE_MASK)
  {
    //printf("--- prependScope %s to %s\n",current_root->name.data(),current->name.data());
    current->name.prepend(current_root->name+"::");
    if (current_root->tArgLists)
    {
      if (current->tArgLists==0)
      {
	current->tArgLists = new QList<ArgumentList>;
	current->tArgLists->setAutoDelete(TRUE);
      }
      //printf("prependScope #=%d #current=%d\n",current_root->tArgLists->count(),current->tArgLists->count());
      QListIterator<ArgumentList> talsi(*current_root->tArgLists);
      ArgumentList *srcAl=0;
      for (talsi.toLast();(srcAl=talsi.current());--talsi)
      {
        ArgumentList *dstAl = new ArgumentList;
	QListIterator<Argument> tali(*srcAl);
        Argument *a;
        for (;(a=tali.current());++tali)
        {
          dstAl->append(new Argument(*a));
        //printf("appending argument %s %s\n",a->type.data(),a->name.data());
        }	  
        current->tArgLists->insert(0,dstAl);	
      }
    }
  }
}

//-----------------------------------------------------------------------------

/*! Returns TRUE iff the current entry could be a K&R style C function */
static bool checkForKnRstyleC()
{
  if (((QCString)yyFileName).right(2).lower()!=".c") return FALSE; // must be a C file
  if (!current->argList) return FALSE; // must have arguments
  ArgumentListIterator ali(*current->argList);
  Argument *a;
  for (ali.toFirst();(a=ali.current());++ali)
  {
    // in K&R style argument do not have a type, but doxygen expects a type
    // so it will think the argument has no name
    if (a->type.isEmpty() || !a->name.isEmpty()) return FALSE;
  }
  return TRUE;
}

//-----------------------------------------------------------------------------

static void splitKnRArg(QCString &oldStyleArgPtr,QCString &oldStyleArgName)
{
  int si = current->args.length();
  if (oldStyleArgType.isEmpty()) // new argument
  {
    static QRegExp re("([^)]*)");
    int bi1 = current->args.findRev(re);
    int bi2 = bi1!=-1 ? current->args.findRev(re,bi1-1) : -1; 
    char c;
    if (bi1!=-1 && bi2!=-1) // found something like "int (*func)(int arg)"
    {
      int s=bi2+1;
      oldStyleArgType = current->args.left(s);
      int i=s;
      while (i<si && ((c=current->args.at(i))=='*' || isspace((uchar)c))) i++;
      oldStyleArgType += current->args.mid(s,i-s);
      s=i;
      while (i<si && isId(current->args.at(i))) i++;
      oldStyleArgName = current->args.mid(s,i-s);
      oldStyleArgType+=current->args.mid(i);
    }
    else if (bi1!=-1) // redundant braces like in "int (*var)"
    {
      int s=bi1;
      oldStyleArgType = current->args.left(s);
      s++;
      int i=s+1;
      while (i<si && ((c=current->args.at(i))=='*' || isspace((uchar)c))) i++;
      oldStyleArgType += current->args.mid(s,i-s);
      s=i;
      while (i<si && isId(current->args.at(i))) i++;
      oldStyleArgName = current->args.mid(s,i-s);
    }
    else // normal "int *var"
    {
      int l=si,i=l-1,j;
      char c;
      // look for start of name in "type *name"
      while (i>=0 && isId(current->args.at(i))) i--;
      j=i+1;
      // look for start of *'s
      while (i>=0 && ((c=current->args.at(i))=='*' || isspace((uchar)c))) i--;
      i++;
      if (i!=l)
      {
	oldStyleArgType=current->args.left(i);
	oldStyleArgPtr=current->args.mid(i,j-i);
	oldStyleArgName=current->args.mid(j).stripWhiteSpace();
      }
      else
      {
	oldStyleArgName=current->args.copy().stripWhiteSpace();
      }
    }
  }
  else // continuation like *arg2 in "int *args,*arg2"
  {
    int l=si,j=0;
    char c;
    while (j<l && ((c=current->args.at(j))=='*' || isspace((uchar)c))) j++;
    if (j>0)
    {
      oldStyleArgPtr=current->args.left(j);
      oldStyleArgName=current->args.mid(j).stripWhiteSpace();
    }
    else
    {
      oldStyleArgName=current->args.copy().stripWhiteSpace();
    }
  }
  //fprintf(stderr,"type=%s ptr=%s name=%s\n",oldStyleArgType.data(),oldStyleArgPtr.data(),oldStyleArgName.data());
}

//-----------------------------------------------------------------------------

/*! Update the argument \a name with additional \a type info. For K&R style
 *  function the type is found \e after the argument list, so this routine
 *  in needed to fix up.
 */
static void addKnRArgInfo(const QCString &type,const QCString &name,
                          const QCString &brief,const QCString &docs)
{
  if (current->argList==0) return;
  ArgumentListIterator ali(*current->argList);
  Argument *a;
  for (ali.toFirst();(a=ali.current());++ali)
  {
    if (a->type==name)
    {
      a->type=type.stripWhiteSpace();
      if (a->type.left(9)=="register ") // strip keyword
      {
	a->type=a->type.mid(9);
      }
      a->name=name.stripWhiteSpace();
      if (!brief.isEmpty() && !docs.isEmpty())
      {
        a->docs=brief+"\n\n"+docs;
      }
      else if (!brief.isEmpty())
      {
        a->docs=brief;
      }
      else
      {
	a->docs=docs;
      }
    }
  }
}

//-----------------------------------------------------------------------------


void fixArgumentListForJavaScript(ArgumentList *al)
{
  if (al==0) return;
  ArgumentListIterator ali(*al);
  Argument *a;
  for (ali.toFirst();(a=ali.current());++ali)
  {
    if (!a->type.isEmpty() && a->name.isEmpty())
    { // a->type is actually the (typeless) parameter name, so move it
      a->name=a->type;
      a->type.resize(0);
    }
  }
}

/* ----------------------------------------------------------------- */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
    int c=0;
    if (g_inputFromFile)
    {
       c = inputFile.readBlock(buf,max_size);
       if (c==-1) yy_fatal_error("input in flex scanner failed");
    }
    else
    {
      while( c < max_size && inputString[inputPosition] )
      {
	*buf = inputString[inputPosition++] ;
	//printf("%d (%c)\n",*buf,*buf);
	c++; buf++;
      }
    }
    return c;
}

/* start command character */
/* language parsing states */

























































































































/** Prototype scanner states */





/** comment parsing states */



#line 9700 "<stdout>"

#define INITIAL 0
#define Define 1
#define DefineEnd 2
#define CompoundName 3
#define ClassVar 4
#define CSConstraintName 5
#define CSConstraintType 6
#define CSIndexer 7
#define ClassCategory 8
#define ClassTemplSpec 9
#define CliPropertyType 10
#define CliPropertyIndex 11
#define CliOverride 12
#define Bases 13
#define BasesProt 14
#define NextSemi 15
#define BitFields 16
#define FindMembers 17
#define FindMembersPHP 18
#define FindMemberName 19
#define FindFields 20
#define FindFieldArg 21
#define Function 22
#define FuncRound 23
#define ExcpRound 24
#define ExcpList 25
#define FuncQual 26
#define Operator 27
#define Array 28
#define ReadBody 29
#define ReadNSBody 30
#define ReadBodyIntf 31
#define Using 32
#define UsingDirective 33
#define SkipCurly 34
#define SkipCurlyCpp 35
#define SkipCurlyEndDoc 36
#define SkipString 37
#define SkipPHPString 38
#define SkipInits 39
#define SkipCPP 40
#define SkipCPPBlock 41
#define SkipComment 42
#define SkipCxxComment 43
#define SkipCurlyBlock 44
#define SkipRoundBlock 45
#define Sharp 46
#define SkipSharp 47
#define SkipRound 48
#define SkipSquare 49
#define SkipRemainder 50
#define TypedefName 51
#define TryFunctionBlock 52
#define TryFunctionBlockEnd 53
#define Comment 54
#define PackageName 55
#define JavaImport 56
#define PHPUse 57
#define PHPUseAs 58
#define CSAccessorDecl 59
#define CSGeneric 60
#define PreLineCtrl 61
#define DefinePHP 62
#define DefinePHPEnd 63
#define OldStyleArgs 64
#define SkipVerbString 65
#define ObjCMethod 66
#define ObjCReturnType 67
#define ObjCParams 68
#define ObjCParamType 69
#define ObjCProtocolList 70
#define ObjCPropAttr 71
#define ObjCSkipStatement 72
#define QtPropType 73
#define QtPropName 74
#define QtPropAttr 75
#define QtPropRead 76
#define QtPropWrite 77
#define ReadInitializer 78
#define GetCallType 79
#define CppQuote 80
#define EndCppQuote 81
#define MemberSpec 82
#define MemberSpecSkip 83
#define EndTemplate 84
#define FuncPtr 85
#define FuncPtrOperator 86
#define EndFuncPtr 87
#define ReadFuncArgType 88
#define ReadTempArgs 89
#define IDLUnionCase 90
#define NSAliasName 91
#define NSAliasArg 92
#define CopyString 93
#define CopyPHPString 94
#define CopyGString 95
#define CopyPHPGString 96
#define CopyRound 97
#define CopyCurly 98
#define GCopyRound 99
#define GCopyCurly 100
#define SkipUnionSwitch 101
#define Specialization 102
#define FuncPtrInit 103
#define FuncFunc 104
#define FuncFuncEnd 105
#define FuncFuncType 106
#define FuncFuncArray 107
#define CopyArgString 108
#define CopyArgPHPString 109
#define CopyArgRound 110
#define CopyArgSharp 111
#define CopyArgComment 112
#define CopyArgCommentLine 113
#define CopyArgVerbatim 114
#define HereDoc 115
#define HereDocEnd 116
#define CopyHereDoc 117
#define CopyHereDocEnd 118
#define IDLAttribute 119
#define IDLProp 120
#define IDLPropName 121
#define Prototype 122
#define PrototypePtr 123
#define PrototypeQual 124
#define PrototypeExc 125
#define PrototypeSkipLine 126
#define DocLine 127
#define DocBlock 128
#define DocCopyBlock 129

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int scanYYlex_destroy (void );

int scanYYget_debug (void );

void scanYYset_debug (int debug_flag  );

YY_EXTRA_TYPE scanYYget_extra (void );

void scanYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *scanYYget_in (void );

void scanYYset_in  (FILE * in_str  );

FILE *scanYYget_out (void );

void scanYYset_out  (FILE * out_str  );

yy_size_t scanYYget_leng (void );

char *scanYYget_text (void );

int scanYYget_lineno (void );

void scanYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int scanYYwrap (void );
#else
extern int scanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 262144
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( scanYYtext, scanYYleng, 1, scanYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( scanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( scanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, scanYYin))==0 && ferror(scanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(scanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int scanYYlex (void);

#define YY_DECL int scanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after scanYYtext and scanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( scanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(scanYYtext[scanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 726 "scanner.l"


#line 10017 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)scanYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in scanYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! scanYYin )
			scanYYin = stdin;

		if ( ! scanYYout )
			scanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			scanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				scanYY_create_buffer(scanYYin,YY_BUF_SIZE );
		}

		scanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of scanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 3916 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 29884 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 728 "scanner.l"
{
  					  curlyCount=0;
					  needsSemi = TRUE;
  					  BEGIN(SkipCurlyBlock); 
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 733 "scanner.l"
{
  				 	  roundCount=0;
  					  BEGIN(SkipRoundBlock);
  					}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 737 "scanner.l"
{
					  ++roundCount;
  					}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 740 "scanner.l"
{
  					  if (roundCount )
					    --roundCount ;
					  else
					    BEGIN( NextSemi ) ;
  					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 746 "scanner.l"
{
  					  ++curlyCount ; 
					}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 749 "scanner.l"
{ 
  				          if( curlyCount )
					  {
					    --curlyCount ;
					  }
					  else if (needsSemi)
					  {
					    BEGIN( NextSemi );
					  }
					  else
					  {
					    BEGIN( FindMembers );
					  }
					}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 763 "scanner.l"
{
  					  if (insidePHP)
					  {
					    lastStringContext=NextSemi;
					    BEGIN(SkipPHPString);
					  }
  					}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 770 "scanner.l"
{ if (insidePHP) REJECT; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 771 "scanner.l"
{
  					  lastStringContext=NextSemi;
					  BEGIN(SkipString);
  					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 775 "scanner.l"
{ 
  					  unput(*scanYYtext);
  					  BEGIN( FindMembers ); 
					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 779 "scanner.l"
{
  					  unput(*scanYYtext);
					  BEGIN( FindMembers );
  					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 783 "scanner.l"
{ // PHP code with unsupported extension?
                                          insidePHP = TRUE;
  					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 786 "scanner.l"
{ // PHP code start
                                           BEGIN( FindMembers );
					}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 789 "scanner.l"
{ // PHP code start
					  lineCount() ;
                                          BEGIN( FindMembers );
					}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 793 "scanner.l"
{ // Non-PHP code text, ignore
  					}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 795 "scanner.l"
{ // Non-PHP code text, ignore
  					  yyLineNr++;
  					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 798 "scanner.l"
{ // Non-PHP code text, ignore
				        }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 800 "scanner.l"
{ // PHP code end
					  if (insidePHP)
					    BEGIN( FindMembersPHP );
					  else
					    REJECT;
                                        }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 806 "scanner.l"
{ if (insidePHP)
					    BEGIN( NextSemi );
					  else
					    REJECT;
					}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 811 "scanner.l"
{ // Mozilla XPIDL lang-specific block
					  if (!insideIDL)
					    REJECT;
					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 815 "scanner.l"
{ // Mozilla XPIDL lang-specific block end
					  if (!insideIDL)
					    REJECT;
					}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 819 "scanner.l"
{ // IDL or Borland C++ builder property 
  					  current->mtype = mtype = Property;
					  current->protection = protection = Public ;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 829 "scanner.l"
{ current->mtype = mtype = DCOP;
					  current->protection = protection = Public ;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 838 "scanner.l"
{ current->mtype = mtype = Signal;
  
					  current->protection = protection = Public ;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 848 "scanner.l"
{
					  current->protection = protection = Public ;
					  current->mtype = mtype = Slot;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount();
					}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 858 "scanner.l"
{
					  current->protection = protection = Protected ;
					  current->mtype = mtype = Slot;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount();
					}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 868 "scanner.l"
{
					  current->protection = protection = Private ;
					  current->mtype = mtype = Slot;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount();
					}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 877 "scanner.l"
{ 
					  current->protection = protection = Public ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 886 "scanner.l"
{  // for now treat C++/CLI's internal as package...
  					  if (insideCli)
					  {
					    current->protection = protection = Package ;
					    current->mtype = mtype = Method;
					    current->type.resize(0); 
					    current->name.resize(0); 
					    current->args.resize(0);
					    current->argList->clear();
					    lineCount() ;
					  }
					  else
					  {
					    REJECT;
					  }
  					}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 902 "scanner.l"
{  
  					  current->protection = protection = Protected ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 911 "scanner.l"
{ 
  					  current->protection = protection = Private ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 920 "scanner.l"
{ 
  					  if (insideCli)
					  {
					    // C++/CLI event
					    lineCount() ;
  					    current->mtype = mtype = Event;
					    current->bodyLine = yyLineNr;
					    curlyCount=0;
					    BEGIN( CliPropertyType );
					  }
					  else if (insideCS)
					  {
					    lineCount() ;
  					    current->mtype = Event;
					    current->bodyLine = yyLineNr;
					  }
					  else
					  {
					    REJECT;
					  }
                                        }
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 941 "scanner.l"
{
  					   if (insideCli)
					   {
					     // C++/CLI property
					     lineCount() ;
  					     current->mtype = mtype = Property;
					     current->bodyLine = yyLineNr;
					     curlyCount=0;
					     BEGIN( CliPropertyType );
					   }
					   else
					   {
					     REJECT;
					   }
					}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 956 "scanner.l"
{
  					  addType( current );
  					  current->name = scanYYtext;
  					}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 960 "scanner.l"
{ // C++/CLI indexed property
  					  current->name += scanYYtext;
					  BEGIN( CliPropertyIndex );
  					}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 964 "scanner.l"
{
					  curlyCount=0;
					  //printf("event: '%s' '%s'\n",current->type.data(),current->name.data());
  					  BEGIN( CSAccessorDecl );
  					}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 969 "scanner.l"
{
  					  unput(*scanYYtext);
					  BEGIN( FindMembers );
  					}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 973 "scanner.l"
{
  					  yyLineNr++;
  					}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 976 "scanner.l"
{
  					}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 978 "scanner.l"
{
  					  addType( current );
  					  current->type += scanYYtext;
  					}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 982 "scanner.l"
{
                                          BEGIN( CliPropertyType );
  					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 986 "scanner.l"
{
  					  current->name+=scanYYtext;
  					}
	YY_BREAK
/*
<FindMembers>{B}*"property"{BN}+        { 
                                          if (!current->type.isEmpty())
					  {
					    REJECT;
                                          }
					  else
					  { 
                                            current->mtype = mtype = Property;
                                            lineCount();
					  }
                                        }
  */
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 1002 "scanner.l"
{
  					  current->protection = protection = Private ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
  					}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 1011 "scanner.l"
{
  					  current->protection = protection = Protected ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
  					}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 1020 "scanner.l"
{
  					  current->protection = protection = Public ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
  					}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 1029 "scanner.l"
{
  					  if (!insideObjC) 
					  {
					    REJECT;
					  }
					  else
					  {
  					    lineCount();
					    current->fileName  = yyFileName;
					    current->startLine = yyLineNr;
					    current->bodyLine  = yyLineNr;
					    current->section = Entry::FUNCTION_SEC;
					    current->protection = protection = Public ;
					    language = current->lang = SrcLangExt_ObjC;
					    insideObjC = TRUE;
					    current->virt = Virtual;
					    current->stat=scanYYtext[0]=='+';
					    current->mtype = mtype = Method;
					    current->type.resize(0); 
					    current->name.resize(0); 
					    current->args.resize(0);
					    current->argList->clear();
					    BEGIN( ObjCMethod );
					  }
  					}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 1054 "scanner.l"
{ // start of method's return type
  					  BEGIN( ObjCReturnType );
  					}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 1057 "scanner.l"
{ // found method name
  					  if (current->type.isEmpty())
					  {
					    current->type = "id";
					  }
					  current->name = scanYYtext;
  					}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 1064 "scanner.l"
{ // start of parameter list
  					  current->name += ':';
  					  Argument *a = new Argument;
					  current->argList->append(a);
  					  BEGIN( ObjCParams );
  					}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 1070 "scanner.l"
{ // TODO: check if nested braches are possible.
  					  current->type = scanYYtext;
  					}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 1073 "scanner.l"
{
  					  BEGIN( ObjCMethod );
  					}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 1076 "scanner.l"
{ // Keyword of parameter
					  QCString keyw = scanYYtext;
					  keyw=keyw.left(keyw.length()-1); // strip :
					  if (keyw.isEmpty())
					  {
					    current->name += " :";
					  }
					  else
					  {
					    current->name += keyw+":";
					  }
					  if (current->argList->getLast()->type.isEmpty())
					  {
					    current->argList->getLast()->type="id";
					  }
  					  Argument *a = new Argument;
  					  a->attrib=(QCString)"["+keyw+"]";
					  current->argList->append(a);
  					}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 1095 "scanner.l"
{ // name of parameter
  					  lineCount();
  					  current->argList->getLast()->name=QCString(scanYYtext).stripWhiteSpace();
  					}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 1099 "scanner.l"
{ // name of parameter
  					  lineCount();
					  // do we want the comma as part of the name?
  					  //current->name += ",";
  					  Argument *a = new Argument;
  					  a->attrib="[,]";
  					  a->type="...";
					  current->argList->append(a);
  					}
	YY_BREAK
/*
<ObjCParams>":"				{ 
					  current->name += ':';
					}
   */
case 55:
YY_RULE_SETUP
#line 1113 "scanner.l"
{
  					  BEGIN( ObjCParamType );
  					}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 1116 "scanner.l"
{
  					  current->argList->getLast()->type=QCString(scanYYtext).stripWhiteSpace();
  					}
	YY_BREAK
case 57:
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1119 "scanner.l"
{
  					  BEGIN( ObjCParams );
  					}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 1122 "scanner.l"
{ // end of method declaration
					  if (current->argList->getLast() && current->argList->getLast()->type.isEmpty())
					  {
					    current->argList->getLast()->type="id";
					  }
  					  current->args = argListToString(current->argList);
					  //printf("argList=%s\n",current->args.data());
  					  unput(';');
  					  BEGIN( Function );
  					}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 1132 "scanner.l"
{ // start of a method body
  					  lineCount();
                                          //printf("Type=%s Name=%s args=%s\n",
					  //    current->type.data(),current->name.data(),argListToString(current->argList).data()
					  //    );
					  if (current->argList->getLast() && current->argList->getLast()->type.isEmpty())
					  {
					    current->argList->getLast()->type="id";
					  }
  					  current->args = argListToString(current->argList);
                                          unput('{');
  					  BEGIN( Function );
  					}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 1145 "scanner.l"
{
  					  lineCount();
  					}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 1148 "scanner.l"
{
  					  if (insideJava) // Java annotation
					  {
  					    lineCount();
					    lastSkipRoundContext = YY_START;
					    roundCount=1;
					    BEGIN( SkipRound );
					  }
					  else if (strncmp(scanYYtext,"@property",9)==0) // ObjC 2.0 property
					  {
  					    current->mtype = mtype = Property;
					    current->spec|=Entry::Readable | Entry::Writable | Entry::Assign;
					    current->protection = Public ;
					    unput('(');
					    BEGIN( ObjCPropAttr );
					  }
					  else
					  {
					    REJECT;
					  }
                                        }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 1169 "scanner.l"
{ 
                                          current->read = scanYYtext+7;
					}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 1172 "scanner.l"
{ 
                                          current->write = scanYYtext+7;
					}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 1175 "scanner.l"
{
					  current->spec&=~Entry::Writable;
  					}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 1178 "scanner.l"
{ // default
  					}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 1180 "scanner.l"
{ // default
  					}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 1182 "scanner.l"
{
					  current->spec&=~Entry::Assign;
					  current->spec|=Entry::Retain;
  					}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 1186 "scanner.l"
{
					  current->spec&=~Entry::Assign;
					  current->spec|=Entry::Copy;
  					}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 1190 "scanner.l"
{
					  current->spec|=Entry::NonAtomic;
  					}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 1193 "scanner.l"
{
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 1196 "scanner.l"
{
  					  if (insideJava) // Java annotation
					  {
					    // skip annotation
					  }
					  else if (strcmp(scanYYtext,"@property")==0) // ObjC 2.0 property
					  {
  					    current->mtype = mtype = Property;
					    current->spec|=Entry::Writable | Entry::Readable | Entry::Assign;
					    current->protection = Public ;
					  }
					  else if (strcmp(scanYYtext,"@synthesize")==0)
					  {
					    BEGIN( ObjCSkipStatement );
					  }
					  else if (strcmp(scanYYtext,"@dynamic")==0)
					  {
					    BEGIN( ObjCSkipStatement );
					  }
					  else
					  {
					    REJECT;
					  }
  					}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 1220 "scanner.l"
{
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 1223 "scanner.l"
{
  					  isTypedef=FALSE;
					  //printf("Found namespace %s lang=%d\n",scanYYtext,current->lang);
					  current->name = scanYYtext;
					  current->name = substitute(current->name,".","::");
					  current->name = substitute(current->name,"\\","::");
					  current->section = Entry::NAMESPACE_SEC;
					  current->type = "namespace" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount();
  					}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 1236 "scanner.l"
{
					  current_root->addSubEntry(current);
                                          current_root = current ;
					  current = new Entry ;
					  initEntry();
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 1243 "scanner.l"
{
					  curlyCount=0;
					  BEGIN( ReadNSBody );
  					}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 1247 "scanner.l"
{
  					  current->type += " initonly ";
					  if (insideCli) current->spec |= Entry::Initonly;
					  lineCount();
  					}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 1252 "scanner.l"
{ current->type += " static ";
  					  current->stat = TRUE;
					  lineCount();
					}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 1256 "scanner.l"
{
  					  current->stat = FALSE;
					  current->explicitExternal = TRUE;
					  lineCount();
  					}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 1261 "scanner.l"
{ current->type += " virtual ";
					  current->virt = Virtual;
					  lineCount();
					}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 1265 "scanner.l"
{ 
                                          if (!insidePHP) 
					  {
					    current->type += " abstract ";
					    current->virt = Pure;
					  }
					  else
					  {
					    current->spec|=Entry::Abstract;
					  }
					  lineCount();
					}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 1277 "scanner.l"
{ current->spec|=Entry::Inline;
                                          lineCount(); 
                                        }
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 1280 "scanner.l"
{ current->spec|=Entry::Mutable;
                                          lineCount(); 
                                        }
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 1283 "scanner.l"
{ current->spec|=Entry::Explicit;
                                          lineCount(); 
                                        }
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 1286 "scanner.l"
{ // Objective C 2.0 protocol required section
                                          current->spec=(current->spec & ~Entry::Optional) | Entry::Required;
                                          lineCount(); 
                                        }
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 1290 "scanner.l"
{  // Objective C 2.0 protocol optional section
                                          current->spec=(current->spec & ~Entry::Required) | Entry::Optional;
                                          lineCount(); 
                                        }
	YY_BREAK
/*
<FindMembers>{B}*"import"{BN}+		{ // IDL import keyword
  					  BEGIN( NextSemi );
  					}
  */
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 1299 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 87:
/* rule 87 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1300 "scanner.l"
{ 
  					  isTypedef=FALSE;
					  current->section = Entry::NAMESPACE_SEC;
					  current->type = "namespace" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount();
					  if (insidePHP)
					  {
					    BEGIN( PackageName );
					  }
					  else
					  {
  					    BEGIN( CompoundName ); 
					  }
					}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 1317 "scanner.l"
{ 
					  lineCount();
                                          if (insideIDL)
					  {
  					    isTypedef=FALSE;
					    current->section = Entry::NAMESPACE_SEC;
					    current->type = "module" ;
					    current->fileName  = yyFileName;
					    current->startLine = yyLineNr;
					    current->bodyLine  = yyLineNr;
  					    BEGIN( CompoundName ); 
					  }
					  else if (insideD)
					  {
					    lineCount();
					    BEGIN(PackageName);
					  }
					  else
					  {
					    addType( current ) ;
					    current->name = QCString(scanYYtext).stripWhiteSpace();
					  }
					}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 1340 "scanner.l"
{ 
					  lineCount();
                                          if (insideIDL)
					  {
  					    isTypedef=FALSE;
					    current->section = Entry::NAMESPACE_SEC;
					    current->type = "library" ;
					    current->fileName  = yyFileName;
					    current->startLine = yyLineNr;
					    current->bodyLine  = yyLineNr;
  					    BEGIN( CompoundName ); 
					  }
					  else
					  {
					    addType( current ) ;
					    current->name = QCString(scanYYtext).stripWhiteSpace();
					  }
					}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 1358 "scanner.l"
{ // M$/Corba IDL/Java interface
					  lineCount();
                                          if (insideIDL || insideJava || insideCS || insideD || insidePHP)
					  {
  					    isTypedef=FALSE;
					    current->section = Entry::CLASS_SEC;
                                            current->spec = Entry::Interface;
					    addType( current ) ;
					    current->type += " interface" ;
					    current->fileName  = yyFileName;
					    current->startLine = yyLineNr;
					    current->bodyLine  = yyLineNr;
					    BEGIN( CompoundName );
					  }
					  else
					  {
					    addType( current ) ;
					    current->name = QCString(scanYYtext).stripWhiteSpace();
					  }
  					}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 1378 "scanner.l"
{ // Objective-C class implementation
					  lineCount();
  					  isTypedef=FALSE;
					  current->section = Entry::OBJCIMPL_SEC;
					  language = current->lang = SrcLangExt_ObjC;
					  insideObjC = TRUE;
					  current->protection = protection = Public ;
					  addType( current ) ;
					  current->type += " implementation" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  BEGIN( CompoundName );
  					}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 1392 "scanner.l"
{ // Objective-C class interface, or Java attribute
					  lineCount();
  					  isTypedef=FALSE;
					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Interface;
					  if (!insideJava)
					  {
					    language = current->lang = SrcLangExt_ObjC;
					    insideObjC = TRUE;
					  }
					  current->protection = protection = Public ;
					  addType( current ) ;
					  current->type += " interface" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  BEGIN( CompoundName );
  					}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 1410 "scanner.l"
{ // Objective-C protocol definition
					  lineCount();
  					  isTypedef=FALSE;
					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Protocol;
					  language = current->lang = SrcLangExt_ObjC;
					  insideObjC = TRUE;
					  current->protection = protection = Public ;
					  addType( current ) ;
					  current->type += " protocol" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  BEGIN( CompoundName );
  					}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 1425 "scanner.l"
{ // Corba IDL exception
  					  isTypedef=FALSE;
					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Exception;
					  addType( current ) ;
					  current->type += " exception" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount();
					  BEGIN( CompoundName );
  					}
	YY_BREAK
case 95:
#line 1438 "scanner.l"
case 96:
/* rule 96 can match eol */
#line 1439 "scanner.l"
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 1439 "scanner.l"
{ 
					  isTypedef=((QCString)scanYYtext).find("typedef")!=-1;
  					  current->section = Entry::CLASS_SEC;
					  addType( current ) ;
					  current->type += " class" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  if (scanYYtext[0]=='@')
					  {
					    language = current->lang = SrcLangExt_ObjC;
					    insideObjC = TRUE;
					  }
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  if (insidePHP && current->spec&Entry::Abstract)
					  {
					    // convert Abstract to AbstractClass
					    current->spec=(current->spec&~Entry::Abstract)|Entry::AbstractClass;
					  }
					  BEGIN( CompoundName ) ;
					}
	YY_BREAK
case 98:
#line 1462 "scanner.l"
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 1462 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Value;
					  addType( current ) ;
					  current->type += " value class" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 100:
#line 1476 "scanner.l"
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 1476 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Ref;
					  addType( current ) ;
					  current->type += " ref class" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 102:
#line 1490 "scanner.l"
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 1490 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Interface;
					  addType( current ) ;
					  current->type += " interface class" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 1503 "scanner.l"
{
  					  if (insideIDL)
					  {
					    isTypedef=FALSE;
					    current->section = Entry::CLASS_SEC;
					    addType( current ) ;
					    current->type += " coclass" ;
					    current->fileName  = yyFileName;
					    current->startLine = yyLineNr;
					    current->bodyLine  = yyLineNr;
					    lineCount() ;
					    BEGIN( CompoundName ) ;
					  }
					  else
					  {
  					    addType(current);
					    current->name = scanYYtext;
					    current->name = current->name.stripWhiteSpace();
					    lineCount();
					  }
  					}
	YY_BREAK
case 105:
/* rule 105 can match eol */
#line 1525 "scanner.l"
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 1525 "scanner.l"
{ 
					  isTypedef=((QCString)scanYYtext).find("typedef")!=-1;
  					  current->section = Entry::CLASS_SEC ;
                                          current->spec    = Entry::Struct;
					  // bug 582676: can be a struct nested in an interface so keep insideObjC state
					  //current->objc    = insideObjC = FALSE;
					  addType( current ) ;
					  current->type += " struct" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
					}
	YY_BREAK
case 107:
#line 1541 "scanner.l"
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 1541 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec    = Entry::Struct | Entry::Value;
					  addType( current ) ;
					  current->type += " value struct" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 109:
#line 1555 "scanner.l"
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 1555 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec    = Entry::Struct | Entry::Ref;
					  addType( current ) ;
					  current->type += " ref struct" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 111:
#line 1569 "scanner.l"
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 1569 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec    = Entry::Struct | Entry::Interface;
					  addType( current ) ;
					  current->type += " interface struct";
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 113:
/* rule 113 can match eol */
#line 1583 "scanner.l"
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 1583 "scanner.l"
{ 
					  isTypedef=((QCString)scanYYtext).find("typedef")!=-1;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec    = Entry::Union;
					  // bug 582676: can be a struct nested in an interface so keep insideObjC state
					  //current->objc    = insideObjC = FALSE;
					  addType( current ) ;
					  current->type += " union" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
					}
	YY_BREAK
case 115:
/* rule 115 can match eol */
#line 1599 "scanner.l"
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 1599 "scanner.l"
{ // for IDL: typedef [something] enum
					  isTypedef=((QCString)scanYYtext).find("typedef")!=-1;
					  if (insideJava)
					  {
					    current->section = Entry::CLASS_SEC;
					    current->spec    = Entry::Enum;
					  }
					  else
					  {
  					    current->section = Entry::ENUM_SEC ;
					  }
					  addType( current ) ;
					  current->type += " enum" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
					}
	YY_BREAK
case 117:
/* rule 117 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1619 "scanner.l"
{  // A::operator()<int>(int arg)
  					  lineCount();
					  current->name += "()";
					  BEGIN( FindMembers );
					}
	YY_BREAK
case 118:
/* rule 118 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1624 "scanner.l"
{
  					  lineCount();
    					  current->name += scanYYtext ;
					  current->name = current->name.simplifyWhiteSpace();
					  BEGIN( FindMembers ) ;
  					}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 1630 "scanner.l"
{ // can occur when importing members
  					  unput(';');
					  BEGIN( FindMembers ) ;
  					}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 1634 "scanner.l"
{ 
    					  lineCount();
    					  current->name += *scanYYtext ;
					}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1638 "scanner.l"
{ /* skip guided templ specifiers */ }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1639 "scanner.l"
{
					  current->name = current->name.simplifyWhiteSpace();
					  unput(*scanYYtext);
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 1644 "scanner.l"
{  // generic is a C++/CLI extension
  					  lineCount();
					  if (current->tArgLists==0)
					  {
					    current->tArgLists = new QList<ArgumentList>;
					    current->tArgLists->setAutoDelete(TRUE);
					  }
					  ArgumentList *al = new ArgumentList;
					  //current->spec |= (scanYYtext[0]=='g') ? Entry::Generic : Entry::Template;
					  current->tArgLists->append(al);
					  currentArgumentList = al;
					  templateStr="<";
					  fullArgString = templateStr;
					  copyArgString = &templateStr;
					  currentArgumentContext = FindMembers;
					  BEGIN( ReadTempArgs );
  					}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 1661 "scanner.l"
{ // namespace alias
                                          lineCount(); 
  					  BEGIN( NSAliasName );
					}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1665 "scanner.l"
{
  					  aliasName = scanYYtext;
					  BEGIN( NSAliasArg );
  					}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1669 "scanner.l"
{
  					  //printf("Inserting namespace alias %s::%s->%s\n",current_root->name.data(),aliasName.data(),scanYYtext);
					  //if (current_root->name.isEmpty())
					  //{
                                          // TODO: namespace aliases are now treated as global entities
                                          // while they should be aware of the scope they are in
                                            Doxygen::namespaceAliasDict.insert(aliasName,new QCString(scanYYtext));
					  //}
					  //else
					  //{
                                          //  Doxygen::namespaceAliasDict.insert(current_root->name+"::"+aliasName,
					  //	new QCString(current_root->name+"::"+scanYYtext));
					  //}
  					}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 1683 "scanner.l"
{
  					  BEGIN( FindMembers );
  					}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 1686 "scanner.l"
{
  					  lineCount();
					  aliasName=scanYYtext;
					  BEGIN(PHPUseAs);
					}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 1691 "scanner.l"
{
  					  lineCount();
					  current->name=removeRedundantWhiteSpace(substitute(scanYYtext,"\\","::"));
  					  //printf("PHP: adding use relation: %s\n",current->name.data());
                                          current->fileName = yyFileName; 
  					  current->section=Entry::USINGDIR_SEC;
					  current_root->addSubEntry(current);
					  current = new Entry;
					  initEntry();
					  aliasName.resize(0);
					}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 1702 "scanner.l"
{
  					  lineCount();
  					}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1705 "scanner.l"
{
  					  //printf("PHP: adding use as relation: %s->%s\n",scanYYtext,aliasName.data());
                                          Doxygen::namespaceAliasDict.insert(scanYYtext,
					       new QCString(removeRedundantWhiteSpace(
						   substitute(aliasName,"\\","::"))));
					  aliasName.resize(0);
  					}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 1712 "scanner.l"
{
                                       /*
                                          if (!aliasName.isEmpty())
					  {
					    int i=aliasName.findRev('\\');
					    if (i!=-1)
					    {
					      QCString an = removeRedundantWhiteSpace(
						    substitute(aliasName,"\\","::"));
  					      printf("PHP: adding use relation: %s->%s\n",aliasName.mid(i+1).data(),an.data());
					      Doxygen::namespaceAliasDict.insert(aliasName.mid(i+1),
					  	                        new QCString(an));
					      current->name     = an;
					      current->fileName = yyFileName; 
					      current->section=Entry::USINGDECL_SEC;
					      current_root->addSubEntry(current);
					      current = new Entry ;
					      initEntry();
					    }
					    else if (i==0)
					    {
					    }
					  }
					  */
					  if (*scanYYtext==',')
					  {
					    BEGIN(PHPUse);
					  }
					  else
					  {
  					    BEGIN(FindMembers);
					  }
  					}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 1745 "scanner.l"
{ // package import => add as a using directive
  					  lineCount();
  					  QCString scope=scanYYtext;
					  current->name=removeRedundantWhiteSpace(substitute(scope.left(scope.length()-1),".","::"));
                                          current->fileName = yyFileName; 
  					  current->section=Entry::USINGDIR_SEC;
					  current_root->addSubEntry(current);
					  current = new Entry;
					  initEntry();
					  BEGIN(Using);
  					}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 1756 "scanner.l"
{ // class import => add as a using declaration
                                          lineCount();
  					  QCString scope=scanYYtext;
					  current->name=removeRedundantWhiteSpace(substitute(scope,".","::"));
					  current->fileName = yyFileName; 
					  if (insideD) 
					  {
					    current->section=Entry::USINGDIR_SEC;
					  }
					  else
					  {
					    //printf("import name = %s -> %s\n",scanYYtext,current->name.data());
					    current->section=Entry::USINGDECL_SEC;
					  }
					  current_root->addSubEntry(current);
					  current = new Entry ;
					  initEntry();
					  BEGIN(Using);
  					}
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 1775 "scanner.l"
{ 
					  current->startLine=yyLineNr; 
                                          lineCount(); 
                                          BEGIN(Using); 
                                        }
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 1780 "scanner.l"
{ lineCount(); BEGIN(UsingDirective); }
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 1781 "scanner.l"
{
                                          lineCount();
  					  current->name=scanYYtext;
                                          current->fileName = yyFileName; 
  					  current->section=Entry::USINGDECL_SEC;
					  current_root->addSubEntry(current);
					  current             = new Entry ;
					  if (insideCS) /* Hack: in C# a using declaration and 
							   directive have the same syntax, so we
							   also add it as a using directive here
							 */
					  {
					    current->name=scanYYtext;
					    current->fileName = yyFileName; 
					    current->startLine = yyLineNr;
					    current->section=Entry::USINGDIR_SEC;
					    current_root->addSubEntry(current);
					    current             = new Entry ;
					  }
					  initEntry();
					  BEGIN(Using);
  					}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 1803 "scanner.l"
{ current->name=removeRedundantWhiteSpace(scanYYtext);
                                          current->fileName = yyFileName; 
  					  current->section=Entry::USINGDIR_SEC;
					  current_root->addSubEntry(current);
					  current             = new Entry ;
					  initEntry();
					  BEGIN(Using);
  					}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 1811 "scanner.l"
{ BEGIN(FindMembers); }
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 1812 "scanner.l"
{ // guided template decl
					  QCString n=scanYYtext;
					  addType( current );
					  current->name=n.left(n.length()-2);
					}
	YY_BREAK
case 141:
/* rule 141 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1817 "scanner.l"
{ // Note: this could be a return type!
                                          roundCount=0;
  					  sharpCount=0;
					  lineCount();
					  addType( current );
  					  current->name=scanYYtext;
					  current->name=current->name.stripWhiteSpace();
					  //current->scopeSpec.resize(0);
					  // currentTemplateSpec = &current->scopeSpec;
					  if (nameIsOperator(current->name))
					    BEGIN( Operator );
					  else
					    BEGIN( EndTemplate );
					}
	YY_BREAK
case 142:
/* rule 142 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1831 "scanner.l"
{
  					  sharpCount=0;
					  roundCount=0;
					  lineCount();
  					  current->name+=((QCString)scanYYtext).stripWhiteSpace();
					  //current->memberSpec.resize(0);
					  // currentTemplateSpec = &current->memberSpec;
					  if (nameIsOperator(current->name))
					    BEGIN( Operator );
					  else
					    BEGIN( EndTemplate );
  					}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1843 "scanner.l"
{
  					  if (!insidePHP) 
					  {
					    REJECT;
					  }
					  else
					  {
                                            lastHereDocContext = YY_START;
					    BEGIN(HereDoc);
					  }
  					}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1854 "scanner.l"
{
  					  current->name+=scanYYtext;
  					  // *currentTemplateSpec+=scanYYtext; 
  					}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 1858 "scanner.l"
{ 
  					  current->name+='<';
  					  // *currentTemplateSpec+='<'; 
					  sharpCount++; 
					}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1863 "scanner.l"
{
  					  if (insideJava || insideCS || insideCli || roundCount==0)
					  {
					    unput('>');
					    unput(' ');
					    unput('>');
					  }
					  else
					  {
  					    current->name+=scanYYtext;
					  }
  					  // *currentTemplateSpec+=scanYYtext; 
  					}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 1876 "scanner.l"
{
  					  current->name+='>';
					  // *currentTemplateSpec+='>';
					  if (--sharpCount<=0)
					  {  
					    //printf("Found %s\n",current->name.data());
					    BEGIN(FindMembers);
					  }
					}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 1885 "scanner.l"
{ 
  					  lineCount();
  					  current->name+='>';
					  // *currentTemplateSpec+='>';
					  if (--sharpCount<=0)
					  {
					    current->bodyLine = yyLineNr;
					    current->args = "(";
					    currentArgumentContext = FuncQual;
					    fullArgString = current->args.copy();
					    copyArgString = &current->args;
					    //printf("Found %s\n",current->name.data());
					    BEGIN( ReadFuncArgType ) ;
					  }
					}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 1900 "scanner.l"
{ // function pointer returning a template instance
  					  lineCount();
  					  current->name+='>';
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 150:
/* rule 150 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 2;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1905 "scanner.l"
{
  					  lineCount();
  					  current->name+='>';
  					  // *currentTemplateSpec+='>';
					  if (--sharpCount<=0)
					  {
					    BEGIN(FindMemberName);
					  }
  					}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1914 "scanner.l"
{ current->name+=*scanYYtext;
                                          roundCount++; 
                                        }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 1917 "scanner.l"
{ current->name+=*scanYYtext;
                                          if (roundCount>0) roundCount--; 
                                        }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 1920 "scanner.l"
{ 
  					  current->name+=*scanYYtext;
  					  // *currentTemplateSpec+=*scanYYtext; 
					}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 1924 "scanner.l"
{
					  if (insidePHP)
					  {
					    current->bodyLine = yyLineNr;
					    BEGIN( DefinePHP );
					  }
					  else
					    REJECT;
					}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 1933 "scanner.l"
{ // PHP heredoc
  					  g_hereDocId = scanYYtext;
                                          *pCopyHereDocGString += scanYYtext;
					  BEGIN(CopyHereDocEnd);
                                        }
	YY_BREAK
case 156:
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1938 "scanner.l"
{ // PHP nowdoc
  					  g_hereDocId = &scanYYtext[1];
                                          *pCopyHereDocGString += scanYYtext;
					  BEGIN(CopyHereDocEnd);
                                        }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 1943 "scanner.l"
{ // PHP heredoc
  					  g_hereDocId = scanYYtext;
					  BEGIN(HereDocEnd);
  					}
	YY_BREAK
case 158:
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1947 "scanner.l"
{ // PHP nowdoc
  					  g_hereDocId = &scanYYtext[1];
					  BEGIN(HereDocEnd);
  					}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 1951 "scanner.l"
{ // id at start of the line could mark the end of the block
  					  if (g_hereDocId==scanYYtext) // it is the end marker
					  {
  					    BEGIN(lastHereDocContext);
					  }
  					}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1957 "scanner.l"
{ }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1958 "scanner.l"
{ // id at start of the line could mark the end of the block
                                          *pCopyHereDocGString += scanYYtext;
  					  if (g_hereDocId==scanYYtext) // it is the end marker
					  {
  					    BEGIN(lastHereDocContext);
					  }
  					}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 1965 "scanner.l"
{ 
                                          *pCopyHereDocGString += scanYYtext;
                                        }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 1968 "scanner.l"
{ 
                                          *pCopyHereDocGString += scanYYtext;
                                        }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 1971 "scanner.l"
{ // Qt object macro
  					}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 1973 "scanner.l"
{ // Qt property declaration
					  current->protection = protection = Public ;
  					  current->mtype = mtype = Property;
					  current->type.resize(0);
  					  BEGIN(QtPropType);
  					}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 1979 "scanner.l"
{ // start of property arguments
  					}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 1981 "scanner.l"
{ // end of property arguments
  					  unput(';');
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 1985 "scanner.l"
{
  				          current->type+=scanYYtext;
  					}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 1988 "scanner.l"
{
  				          current->type+=scanYYtext;
  					}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 1991 "scanner.l"
{
  					  current->type+=scanYYtext;
                                          BEGIN(QtPropName);
  					}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 1995 "scanner.l"
{
  					  current->name=scanYYtext;
  					  BEGIN(QtPropAttr);
  					}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 1999 "scanner.l"
{
  					  current->spec |= Entry::Readable;
					  BEGIN(QtPropRead);
  					}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 2003 "scanner.l"
{
  					  current->spec |= Entry::Writable;
					  BEGIN(QtPropWrite);
  					}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 2007 "scanner.l"
{ // reset method => not supported yet
  					}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 2009 "scanner.l"
{ // scriptable property => not supported yet
  					}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 2011 "scanner.l"
{ // designable property => not supported yet
  					}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 2013 "scanner.l"
{
  					  current->read = scanYYtext;
  					  BEGIN(QtPropAttr);
  					}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 2017 "scanner.l"
{
  					  current->write = scanYYtext;
					  BEGIN(QtPropAttr);
  					}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 2021 "scanner.l"
{
  					  current->name=scanYYtext;
				          BEGIN(FindMembers);
			 	        }
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 2025 "scanner.l"
{
					  lineCount();
                                          if (insideIDL && scanYYleng==9 && strcmp(scanYYtext,"cpp_quote")==0)
					  {
					    BEGIN(CppQuote);
					  }
					  else if ((insideIDL || insideJava || insideD) && scanYYleng==6 && strcmp(scanYYtext,"import")==0)
					  {
					    if (insideIDL)
					      BEGIN(NextSemi);
					    else // insideJava or insideD
					      BEGIN(JavaImport);
					  }
					  else if (insidePHP && strcmp(scanYYtext,"use")==0)
					  {
					    BEGIN(PHPUse);
					  }
					  else if (insideJava && strcmp(scanYYtext,"package")==0)
					  {
  					    lineCount();
					    BEGIN(PackageName);
					  }
					  else if (insideIDL && strcmp(scanYYtext,"case")==0)
					  {
					    BEGIN(IDLUnionCase);
					  }
					  else if (insideTryBlock && strcmp(scanYYtext,"catch")==0)
					  {
					    insideTryBlock=FALSE;
					    BEGIN(TryFunctionBlock);
					  }
					  else if (insideJS && strcmp(scanYYtext,"var")==0)
					  { // javascript variable
					    current->type="var";
					  }
					  else if (insideJS && strcmp(scanYYtext,"function")==0)
					  { // javascript function
					    current->type="function";
					  }
					  else if (insideCS && strcmp(scanYYtext,"this")==0)
					  {
					    // C# indexer
					    addType( current ) ;
					    current->name="this";
					    BEGIN(CSIndexer);
					  }
					  else
					  {
					    if (YY_START==FindMembers)
					    {
					      addType( current ) ;
					    }
					    bool javaLike = insideJava || insideCS || insideD || insidePHP || insideJS;
					    if (javaLike && strcmp(scanYYtext,"public")==0)
					    {
					      current->protection = Public;
					    }
					    else if (javaLike && strcmp(scanYYtext,"protected")==0)
					    {
					      current->protection = Protected;
					    }
					    else if (javaLike && strcmp(scanYYtext,"internal")==0)
					    {
					      current->protection = Package;
					    }
					    else if (javaLike && strcmp(scanYYtext,"private")==0)
					    {
					      current->protection = Private;
					    }
					    else if (javaLike && strcmp(scanYYtext,"static")==0)
					    {
					      if (YY_START==FindMembers)
					        current->name  = scanYYtext;
					      else
						current->name += scanYYtext;
			 		      current->stat = TRUE;
					    }
					    else
					    {
					      if (YY_START==FindMembers)
					        current->name  = scanYYtext;
					      else
						current->name += scanYYtext;
					      if (current->name.left(7)=="static ")
					      {
						current->stat = TRUE;
						current->name= current->name.mid(7);
					      }
					      else if (current->name.left(7)=="inline ")
					      {
						if (current->type.isEmpty())
						{
						  current->type="inline";
						}
						else
						{
						  current->type+="inline ";
						}
						current->name= current->name.mid(7);
					      }
					      else if (current->name.left(6)=="const ")
					      {
						if (current->type.isEmpty())
						{
						  current->type="const";
						}
						else
						{
						  current->type+="const ";
						}
						current->name=current->name.mid(6);
					      }
					    }
					    QCString tmp=scanYYtext;
					    if (nameIsOperator(tmp))
                                            {
					      BEGIN( Operator );
                                            }
					    else
                                            {
		 			      BEGIN(FindMembers);
                                            }
					  }
					}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 2149 "scanner.l"
{
					  current->name+=removeRedundantWhiteSpace(scanYYtext);
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 2153 "scanner.l"
{ // some number where we did not expect one
  					}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 2155 "scanner.l"
{
  					  if (insideJava || insideCS || insideD)
					  {
					    current->name+=".";
					  }
  					}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 2161 "scanner.l"
{
					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 2164 "scanner.l"
{
  					  insideCppQuote=TRUE;
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 2168 "scanner.l"

	YY_BREAK
case 187:
YY_RULE_SETUP
#line 2169 "scanner.l"
{ BEGIN(FindMembers); }
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 2170 "scanner.l"
{ yyLineNr++; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 2171 "scanner.l"

	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 2172 "scanner.l"
{ yyLineNr++; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 2173 "scanner.l"
{ 
					  curlyCount=0;
					  lastCurlyContext = TryFunctionBlockEnd ;
  					  BEGIN( SkipCurly );
					}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 2178 "scanner.l"

	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 2179 "scanner.l"
{ lineCount(); BEGIN(TryFunctionBlock); // {BN}* added to fix bug 611193
					}
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 2181 "scanner.l"
{ unput(*scanYYtext); // rule added to fix bug id 601138
  					  BEGIN( FindMembers );
					}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 2184 "scanner.l"
{ unput(*scanYYtext);
  					  BEGIN( FindMembers );
					}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 2187 "scanner.l"
{
  					  insideCppQuote=FALSE;
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 2191 "scanner.l"
{ if (insidePHP)
					    REJECT;
					  lastCPPContext = YY_START;
					  BEGIN( SkipCPP ) ;
					}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 2196 "scanner.l"
{
  					  if (insidePHP)
					    REJECT;
  					  current->bodyLine = yyLineNr;
                                          lastDefineContext = YY_START;
  					  BEGIN( Define );
  					}
	YY_BREAK
case 199:
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 2203 "scanner.l"
{ /* line control directive */
                                          yyLineNr = atoi(&scanYYtext[1]);
					  //printf("setting line number to %d\n",yyLineNr);
					  lastPreLineCtrlContext = YY_START;
					  if (YY_START==ReadBody || 
					      YY_START==ReadNSBody ||
					      YY_START==ReadBodyIntf)
					  {
  					    current->program+=scanYYtext;
					  }
  					  BEGIN( PreLineCtrl );
  					}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 2215 "scanner.l"
{
				          yyFileName = stripQuotes(scanYYtext);
					  if (lastPreLineCtrlContext==ReadBody || 
					      lastPreLineCtrlContext==ReadNSBody ||
					      lastPreLineCtrlContext==ReadBodyIntf)
					  {
					    current->program+=scanYYtext;
					  }
  					}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 2224 "scanner.l"
{
					  if (lastPreLineCtrlContext==ReadBody || 
					      lastPreLineCtrlContext==ReadNSBody ||
					      lastPreLineCtrlContext==ReadBodyIntf)
					  {
  					    current->program+=scanYYtext;
					  }
                                        }
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 2232 "scanner.l"
{
					  if (lastPreLineCtrlContext==ReadBody || 
					      lastPreLineCtrlContext==ReadNSBody ||
					      lastPreLineCtrlContext==ReadBodyIntf)
					  {
  					    current->program+=scanYYtext;
					  }
                                          yyLineNr++;
  					  BEGIN( lastPreLineCtrlContext );
  					}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 2242 "scanner.l"

	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 2243 "scanner.l"
{ yyLineNr++ ; }
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 2244 "scanner.l"
{ yyLineNr++ ;
					  BEGIN( lastCPPContext) ;
					}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 2247 "scanner.l"
{
  					  current->name = scanYYtext;
					  current->name = current->name.left(current->name.length()-1).stripWhiteSpace();
					  current->args = "(";
  					  current->bodyLine = yyLineNr;
					  currentArgumentContext = DefineEnd;
					  fullArgString=current->args.copy();
					  copyArgString=&current->args;
					  BEGIN( ReadFuncArgType ) ;
  					}
	YY_BREAK
/*
<DefineArg>")"				{
  					  //printf("Define with args\n");
  					  current->args += ')';
  					  BEGIN( DefineEnd );
  					}
<DefineArg>.				{
  					  current->args += *scanYYtext;
  					}
  */
case 207:
YY_RULE_SETUP
#line 2267 "scanner.l"
{
  					  //printf("Define `%s' without args\n",scanYYtext);
  					  current->bodyLine = yyLineNr;
  					  current->name = scanYYtext;
					  BEGIN(DefineEnd);
  					}
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
#line 2273 "scanner.l"
{
  					  //printf("End define: doc=%s docFile=%s docLine=%d\n",current->doc.data(),current->docFile.data(),current->docLine);
					  yyLineNr++;
					  current->fileName   = yyFileName;
					  current->startLine  = yyLineNr;
					  current->type.resize(0);
  					  current->args       = current->args.simplifyWhiteSpace();
  					  current->name       = current->name.stripWhiteSpace();
					  current->section    = Entry::DEFINE_SEC;
					  current_root->addSubEntry(current);
					  current             = new Entry ;
					  initEntry();
					  BEGIN(lastDefineContext);
  					}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 2287 "scanner.l"
{
  					  //printf("End define\n");
					  current->fileName   = yyFileName;
					  current->startLine  = yyLineNr;
					  current->type.resize(0);
  					  current->args       = current->args.simplifyWhiteSpace();
  					  current->name       = current->name.stripWhiteSpace();
					  current->section    = Entry::ENUM_SEC;  //HACK!
					  current_root->addSubEntry(current);
					  current             = new Entry ;
					  initEntry();
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 2300 "scanner.l"

	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 2301 "scanner.l"
{
  					  yyLineNr++;
  					}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 2304 "scanner.l"
{
					  if (insideIDL && insideCppQuote)
					  {
					    BEGIN(EndCppQuote);
					  }
					  else
					  {
					    lastStringContext=DefineEnd;
					    BEGIN(SkipString);
					  }
  					}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 2315 "scanner.l"

	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 2316 "scanner.l"
{
  					  current->name = scanYYtext;
					  current->name = current->name.stripWhiteSpace();
					  current->name = current->name.left(current->name.length()-1).stripWhiteSpace();
					  current->name = current->name.left(current->name.length()-1);
					  current->args = "(";
  					  current->bodyLine = yyLineNr;
  					  lastRoundContext = DefinePHPEnd;
  					  pCopyRoundString = &current->args;
					  roundCount = 0;
  					  BEGIN( CopyRound );
					}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 2329 "scanner.l"
{  // ^ and % are C++/CLI extensions
  					  if (insideCli)
					  {
  					    addType( current );
                                            current->name = scanYYtext ; 
					  }
					  else
					  {
					    REJECT;
					  }
  					}
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 2340 "scanner.l"
{ 
                                          current->name += scanYYtext ;  
  					  addType( current );
					}
	YY_BREAK
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 2344 "scanner.l"
{
  					  lineCount();
					  if (current->bodyLine==-1)
					  {
					    current->bodyLine=yyLineNr;
					  }
					  docBlockContext   = YY_START;
					  docBlockInBody    = FALSE;
					  docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                      ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					  docBlock.resize(0);
					  docBlockTerm = ';';
					  if (scanYYtext[scanYYleng-3]=='/')
					  {
					    startCommentBlock(TRUE);
					    BEGIN( DocLine );
					  }
					  else
					  {
					    startCommentBlock(FALSE);
					    BEGIN( DocBlock );
					  }
  					}
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 2367 "scanner.l"
{
  					  lineCount();
					  docBlockContext   = YY_START;
					  docBlockInBody    = FALSE;
					  docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                      ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					  docBlock.resize(0);
					  docBlockTerm = ',';
					  if (scanYYtext[scanYYleng-3]=='/')
					  {
					    startCommentBlock(TRUE);
					    BEGIN( DocLine );
					  }
					  else
					  {
					    startCommentBlock(FALSE);
					    BEGIN( DocBlock );
					  }
  					}
	YY_BREAK
case 219:
/* rule 219 can match eol */
YY_RULE_SETUP
#line 2386 "scanner.l"
{
  					  lineCount();
					  if (current->bodyLine==-1)
					  {
					    current->bodyLine=yyLineNr;
					  }
					  docBlockContext   = YY_START;
					  docBlockInBody    = FALSE;
					  docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                      ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					  docBlock.resize(0);
					  docBlockTerm = 0;
					  if (scanYYtext[scanYYleng-3]=='/')
					  {
					    startCommentBlock(TRUE);
					    BEGIN( DocLine );
					  }
					  else
					  {
					    startCommentBlock(FALSE);
					    BEGIN( DocBlock );
					  }
  					}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 2410 "scanner.l"
{
  					  //handleGroupStartCommand(current->name);
                                          if (previous && previous->section==Entry::GROUPDOC_SEC)
					  {
					    // link open command to the group defined in the previous entry
					    openGroup(previous,yyFileName,yyLineNr);
					  }
					  else
					  {
					    // link open command to the current entry
					    openGroup(current,yyFileName,yyLineNr);
					  }
					  //current = tmp;
					  initEntry();
					  if (scanYYtext[1]=='/')
					  {
					    if (scanYYtext[2]=='!' || scanYYtext[2]=='/')
					    {
					      docBlockContext   = YY_START;
					      docBlockInBody    = FALSE;
					      docBlockAutoBrief = FALSE;
					      docBlock.resize(0);
					      docBlockTerm = 0;
					      startCommentBlock(TRUE);
					      BEGIN(DocLine);
					    }
					    else
					    {
					      lastCContext=YY_START;
					      BEGIN(SkipCxxComment);
					    }
					  }
					  else
					  {
					    if (scanYYtext[2]=='!' || scanYYtext[2]=='*')
					    {
					      docBlockContext   = YY_START;
					      docBlockInBody    = FALSE;
					      docBlock.resize(0);
					      docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                          ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					      docBlockTerm = 0;
					      startCommentBlock(FALSE);
					      BEGIN(DocBlock);
					    }
					    else
					    {
					      lastCContext=YY_START;
					      BEGIN(SkipComment);
					    }
					  }
  					}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 2462 "scanner.l"
{
  					  closeGroup(current,yyFileName,yyLineNr);
  					}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 2465 "scanner.l"
{ // in PHP code this could also be due to "<?="
  					  current->bodyLine = yyLineNr;
					  lastInitializerContext = YY_START;
					  initBracketCount=0;
					  BEGIN(ReadInitializer);
  					}
	YY_BREAK
/* Read initializer rules */
case 223:
YY_RULE_SETUP
#line 2472 "scanner.l"
{
  					  lastRoundContext=YY_START;
  					  pCopyRoundGString=&current->initializer;
					  roundCount=0;
  					  current->initializer+=*scanYYtext; 
  					  BEGIN(GCopyRound);
  					}
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 2479 "scanner.l"
{
  					  lastCurlyContext=YY_START;
  					  pCopyCurlyGString=&current->initializer;
					  curlyCount=0;
  					  current->initializer+=*scanYYtext; 
  					  BEGIN(GCopyCurly);
  					}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 2486 "scanner.l"
{
  					  //printf(">> initializer `%s' <<\n",current->initializer.data());
                                          if (*scanYYtext==';' && (current_root->spec&Entry::Enum))
					  {
					    current->fileName   = yyFileName;
					    current->startLine  = yyLineNr;
  					    current->args       = current->args.simplifyWhiteSpace();
  					    current->name       = current->name.stripWhiteSpace();
					    current->section    = Entry::VARIABLE_SEC;
					    current_root->addSubEntry(current);
					    current = new Entry;
					    initEntry();
					    BEGIN(FindMembers);
					  }
					  else if (*scanYYtext==';' || (lastInitializerContext==FindFields && initBracketCount==0)) // initBracketCount==0 was added for bug 665778
					  {
  					    unput(*scanYYtext);
  					    BEGIN(lastInitializerContext);
					  }
					  else if (*scanYYtext==',' && initBracketCount==0) // for "int a=0,b=0"
					  {
  					    unput(*scanYYtext);
  					    BEGIN(lastInitializerContext);
					  }
					  else
					  {
  					    current->initializer+=*scanYYtext; 
					  }
  					}
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 2515 "scanner.l"
{
					  if (insideIDL && insideCppQuote)
  					  {
					    BEGIN(EndCppQuote);
					  }
					  else
					  {
                                            lastStringContext=YY_START;
  					    current->initializer=scanYYtext; 
  					    pCopyQuotedGString=&current->initializer;
					    BEGIN(CopyGString);
					  }
					}
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 2528 "scanner.l"
{
  					  current->initializer+=scanYYtext; 
					}
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 2531 "scanner.l"
{
  					  current->initializer+=scanYYtext; 
					}
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 2534 "scanner.l"
{
  					  current->initializer+=scanYYtext; 
  					}
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 2537 "scanner.l"
{
  					  initBracketCount++;
  					  current->initializer+=*scanYYtext; 
  					}
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 2541 "scanner.l"
{
  					  initBracketCount--;
  					  current->initializer+=*scanYYtext; 
  					}
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 2545 "scanner.l"
{	
  					  if (insidePHP)
					  {
					    current->initializer+=scanYYtext; 
                                            pCopyQuotedGString = &current->initializer;
                                            lastStringContext=YY_START;
					    BEGIN(CopyPHPGString);
					  }
					  else
					  {
					    current->initializer+=scanYYtext; 
					  }
  					}
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 2558 "scanner.l"
{ 
                                          if (insidePHP) 
					  {
					    REJECT;
					  }
					  else
					  {  
					    current->initializer+=scanYYtext; 
					  }
                                        } 
	YY_BREAK
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 2568 "scanner.l"
{
  					  current->initializer+=*scanYYtext;
					  yyLineNr++;
  					}
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 2572 "scanner.l"
{ 
  					  //printf("insideCS=%d\n",insideCS);
  					  current->initializer+=scanYYtext;
                                          if (!insideCS && !insideObjC) 
					  {
					    REJECT;
					  }
					  else
					  {
					    // C#/ObjC verbatim string
					    lastSkipVerbStringContext=YY_START;
					    pSkipVerbString=&current->initializer;
					    BEGIN(SkipVerbString);
					  }
					}
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 2587 "scanner.l"
{
					  *pSkipVerbString+=scanYYtext;
					}
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 2590 "scanner.l"
{ // quote escape
					  *pSkipVerbString+=scanYYtext;
					}
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 2593 "scanner.l"
{
					  *pSkipVerbString+=*scanYYtext;
					  BEGIN(lastSkipVerbStringContext);
					}
	YY_BREAK
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 2597 "scanner.l"
{
					  *pSkipVerbString+=*scanYYtext;
					  yyLineNr++;
  					}
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 2601 "scanner.l"
{
					  *pSkipVerbString+=*scanYYtext;
  					}
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 2604 "scanner.l"
{
					  if (insidePHP)
					    BEGIN( FindMembersPHP );
					  else
					    current->initializer+=scanYYtext;
  					}
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 2610 "scanner.l"
{ 
  					  current->initializer+=*scanYYtext; 
					}
	YY_BREAK
/* generic quoted string copy rules */
case 243:
YY_RULE_SETUP
#line 2615 "scanner.l"
{
  					  *pCopyQuotedString+=scanYYtext;
  					}
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 2618 "scanner.l"
{ 
  					  *pCopyQuotedString+=*scanYYtext;
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 2622 "scanner.l"
{ 
  					  *pCopyQuotedString+=*scanYYtext;
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 2626 "scanner.l"
{
  					  *pCopyQuotedString+=scanYYtext;
  					}
	YY_BREAK
case 247:
/* rule 247 can match eol */
YY_RULE_SETUP
#line 2629 "scanner.l"
{
  					  *pCopyQuotedString+=*scanYYtext;
  					  yyLineNr++;
  					}
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 2633 "scanner.l"
{
  					  *pCopyQuotedString+=*scanYYtext;
  					}
	YY_BREAK
/* generic quoted growable string copy rules */
case 249:
YY_RULE_SETUP
#line 2638 "scanner.l"
{
  					  *pCopyQuotedGString+=scanYYtext;
  					}
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 2641 "scanner.l"
{ 
  					  *pCopyQuotedGString+=*scanYYtext;
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 2645 "scanner.l"
{ 
  					  *pCopyQuotedGString+=*scanYYtext;
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 2649 "scanner.l"
{
  					  *pCopyQuotedGString+=scanYYtext;
  					}
	YY_BREAK
case 253:
/* rule 253 can match eol */
YY_RULE_SETUP
#line 2652 "scanner.l"
{
  					  *pCopyQuotedGString+=*scanYYtext;
  					  yyLineNr++;
  					}
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 2656 "scanner.l"
{
  					  *pCopyQuotedGString+=*scanYYtext;
  					}
	YY_BREAK
/* generic round bracket list copy rules */
case 255:
YY_RULE_SETUP
#line 2661 "scanner.l"
{
					  *pCopyRoundString+=*scanYYtext;
  					  pCopyQuotedString=pCopyRoundString;
					  lastStringContext=YY_START;
					  BEGIN(CopyString);
					}
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 2667 "scanner.l"
{
  					  *pCopyRoundString+=*scanYYtext;
  					  roundCount++;
  					}
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 2671 "scanner.l"
{
  					  *pCopyRoundString+=*scanYYtext;
					  if (--roundCount<0)
					    BEGIN(lastRoundContext);
  					}
	YY_BREAK
case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
#line 2676 "scanner.l"
{
  					  yyLineNr++;
  					  *pCopyRoundString+=*scanYYtext;
  					}
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 2680 "scanner.l"
{
  					  if (insidePHP)
					  {
					    current->initializer+=scanYYtext; 
                                            pCopyQuotedString = pCopyRoundString;
                                            lastStringContext=YY_START;
					    BEGIN(CopyPHPString);
					  }
					  else
					  {
					    *pCopyRoundString+=scanYYtext;
					  }
  					}
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 2693 "scanner.l"
{ 
                                          if (insidePHP)
					  {
					    REJECT;
					  }
					  else
					  {
                                            *pCopyRoundString+=scanYYtext; 
					  }
                                        }
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 2703 "scanner.l"
{
  					  *pCopyRoundString+=scanYYtext;
  					}
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 2706 "scanner.l"
{
  					  *pCopyRoundString+=*scanYYtext;
  					}
	YY_BREAK
/* generic round bracket list copy rules for growable strings */
case 263:
YY_RULE_SETUP
#line 2711 "scanner.l"
{
					  *pCopyRoundGString+=*scanYYtext;
  					  pCopyQuotedGString=pCopyRoundGString;
					  lastStringContext=YY_START;
					  BEGIN(CopyGString);
					}
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 2717 "scanner.l"
{
  					  *pCopyRoundGString+=*scanYYtext;
  					  roundCount++;
  					}
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 2721 "scanner.l"
{
  					  *pCopyRoundGString+=*scanYYtext;
					  if (--roundCount<0)
					    BEGIN(lastRoundContext);
  					}
	YY_BREAK
case 266:
/* rule 266 can match eol */
YY_RULE_SETUP
#line 2726 "scanner.l"
{
  					  yyLineNr++;
  					  *pCopyRoundGString+=*scanYYtext;
  					}
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 2730 "scanner.l"
{
  					  if (insidePHP)
					  {
					    current->initializer+=scanYYtext; 
                                            pCopyQuotedGString = pCopyRoundGString;
                                            lastStringContext=YY_START;
					    BEGIN(CopyPHPGString);
					  }
					  else
					  {
					    *pCopyRoundGString+=scanYYtext;
					  }
  					}
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 2743 "scanner.l"
{ 
                                          if (insidePHP)
					  {
					    REJECT;
					  }
					  else
					  {
                                            *pCopyRoundGString+=scanYYtext; 
					  }
                                        }
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 2753 "scanner.l"
{
  					  *pCopyRoundGString+=scanYYtext;
  					}
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 2756 "scanner.l"
{
  					  *pCopyRoundGString+=*scanYYtext;
  					}
	YY_BREAK
/* generic curly bracket list copy rules */
case 271:
YY_RULE_SETUP
#line 2761 "scanner.l"
{
					  *pCopyCurlyString+=*scanYYtext;
  					  pCopyQuotedString=pCopyCurlyString;
					  lastStringContext=YY_START;
					  BEGIN(CopyString);
					}
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 2767 "scanner.l"
{
					  *pCopyCurlyString+=*scanYYtext;
  					  if (insidePHP)
					  {
					    pCopyQuotedString=pCopyCurlyString;
					    lastStringContext=YY_START;
					    BEGIN(CopyPHPString);
					  }
					}
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 2776 "scanner.l"
{
  					  *pCopyCurlyString+=*scanYYtext;
					  curlyCount++;
  					}
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 2780 "scanner.l"
{
					  *pCopyCurlyString+=*scanYYtext;
					  if (--curlyCount<0)
					    BEGIN(lastCurlyContext); 
  					}
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 2785 "scanner.l"
{ if (insidePHP) 
                                          { 
					    REJECT; 
					  } 
					  else 
					  {
					    *pCopyCurlyString+=scanYYtext; 
					  }
                                        }
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 2794 "scanner.l"
{
  					  *pCopyCurlyString+=scanYYtext;
  					}
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 2797 "scanner.l"
{ *pCopyCurlyString+=scanYYtext; }
	YY_BREAK
case 278:
/* rule 278 can match eol */
YY_RULE_SETUP
#line 2798 "scanner.l"
{
  					  yyLineNr++;
					  *pCopyCurlyString+=*scanYYtext;
  					}
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 2802 "scanner.l"
{
					  *pCopyCurlyString+=*scanYYtext;
  					}
	YY_BREAK
/* generic curly bracket list copy rules for growable strings */
case 280:
/* rule 280 can match eol */
YY_RULE_SETUP
#line 2807 "scanner.l"
{ // start of included file marker
                                        }
	YY_BREAK
case 281:
/* rule 281 can match eol */
YY_RULE_SETUP
#line 2809 "scanner.l"
{ // end of included file marker
					  QCString line = QCString(scanYYtext);
					  int s = line.find(' ');
					  int e = line.find('"',s);
					  yyLineNr = line.mid(s,e-s).toInt();
					  if (scanYYtext[scanYYleng-1]=='\n')
					  {
					    yyLineNr++;
					  }
  					}
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 2819 "scanner.l"
{
					  *pCopyCurlyGString+=*scanYYtext;
  					  pCopyQuotedGString=pCopyCurlyGString;
					  lastStringContext=YY_START;
					  BEGIN(CopyGString);
					}
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 2825 "scanner.l"
{
					  *pCopyCurlyGString+=*scanYYtext;
  					  if (insidePHP)
					  {
					    pCopyQuotedGString=pCopyCurlyGString;
					    lastStringContext=YY_START;
					    BEGIN(CopyPHPGString);
					  }
					}
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 2834 "scanner.l"
{
  					  *pCopyCurlyGString+=*scanYYtext;
					  curlyCount++;
  					}
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 2838 "scanner.l"
{
					  *pCopyCurlyGString+=*scanYYtext;
					  if (--curlyCount<0)
					    BEGIN(lastCurlyContext); 
  					}
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 2843 "scanner.l"
{ if (insidePHP) 
                                          { 
					    REJECT; 
					  } 
					  else 
					  {
					    *pCopyCurlyGString+=scanYYtext; 
					  }
                                        }
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 2852 "scanner.l"
{
  					  *pCopyCurlyGString+=scanYYtext;
  					}
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 2855 "scanner.l"
{ *pCopyCurlyGString+=scanYYtext; }
	YY_BREAK
case 289:
/* rule 289 can match eol */
YY_RULE_SETUP
#line 2856 "scanner.l"
{
  					  yyLineNr++;
					  *pCopyCurlyGString+=*scanYYtext;
  					}
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 2860 "scanner.l"
{
					  *pCopyCurlyGString+=*scanYYtext;
  					}
	YY_BREAK
/* ---------------------- */
case 291:
YY_RULE_SETUP
#line 2867 "scanner.l"
{
  					  if (current->type.isEmpty()) // anonymous padding field, e.g. "int :7;"
					  {
					    addType(current);
					    current->name.sprintf("__pad%d__",padCount++);
					  }
  					  BEGIN(BitFields);
					  current->bitfields+=":";
  					}
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 2876 "scanner.l"
{
  					  current->bitfields+=*scanYYtext;
  					}
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 2879 "scanner.l"
{ 
  					  QCString oldType = current->type.copy();
					  if (current->bodyLine==-1)
					  {
					    current->bodyLine = yyLineNr;
					  }
                                          if ( insidePHP && current->type.left(3) == "var" )
                                          {
                                            current->type = current->type.mid(3);
                                          }
					  if (isTypedef && current->type.left(8)!="typedef ")
					  {
					    current->type.prepend("typedef ");
					  }
					  bool needNewCurrent=FALSE;
					  if (!current->name.isEmpty() && current->section!=Entry::ENUM_SEC)
					  {
					    current->type=current->type.simplifyWhiteSpace();
					    current->args=removeRedundantWhiteSpace(current->args);
					    current->name=current->name.stripWhiteSpace();
					    if (current->section==Entry::CLASS_SEC) // remove spec for "struct Bla bla;"
					    {
					    	current->spec = 0;
					    }
					    current->section = Entry::VARIABLE_SEC ;
					    current->fileName = yyFileName;
					    current->startLine = yyLineNr;
					    current_root->addSubEntry( current ) ;
					    needNewCurrent=TRUE;
					  }
					  if ( *scanYYtext == ',')
					  {
					    bool stat = current->stat;
					    if (needNewCurrent)
					    {
					      current = new Entry(*current);
					      initEntry();
					    }
					    current->stat = stat; // the static attribute holds for all variables
					    current->name.resize(0);
					    current->args.resize(0);
					    current->brief.resize(0);
					    current->doc.resize(0);
					    current->initializer.resize(0);
					    current->bitfields.resize(0);
					    int i=oldType.length(); 
					    while (i>0 && (oldType[i-1]=='*' || oldType[i-1]=='&' || oldType[i-1]==' ')) i--;
					    current->type = oldType.left(i);
					  }
					  else
					  {
					    if (needNewCurrent)
					    {
					      current = new Entry ;
					    }
					    else if (current->groups)
					    {
					      current->groups->clear();
					    }
					    initEntry();
					  }
					}
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 2942 "scanner.l"
{ 
  					  if (!insideCS &&  
					      (current->name.isEmpty() || 
					       current->name=="typedef"
					      )
					     ) // IDL function property
 					  {
          				    squareCount=1;
					    lastSquareContext = YY_START;
					    idlAttr.resize(0);
					    idlProp.resize(0);
					    current->mtype = mtype;
					    BEGIN( IDLAttribute );
					  }
                                          else if (insideCS &&
                                                  current->name.isEmpty())
                                          {
                                            squareCount=1;
                                            lastSquareContext = YY_START;
                                            // Skip the C# attribute
                                            // for this member
                                            current->args.resize(0);
                                            BEGIN( SkipSquare );
                                          }
					  else
					  {
  					    current->args += scanYYtext ;
					    squareCount=1;
					    BEGIN( Array ) ;
					  }
					}
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 2973 "scanner.l"
{
  					  // end of IDL function attribute
					  if (--squareCount<=0)
					  {
					    lineCount();
					    if (current->mtype == Property)
					      BEGIN( IDLPropName );
					    else
					      BEGIN( lastSquareContext );
					  }
					}
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 2984 "scanner.l"
{
                                          if (Config_getBool("IDL_PROPERTY_SUPPORT"))
					  {
					    current->mtype = Property;
					  }
					  current->spec |= Entry::Settable;
					}
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 2991 "scanner.l"
{
                                          if (Config_getBool("IDL_PROPERTY_SUPPORT"))
					  {
					    current->mtype = Property;
					  }
					  current->spec |= Entry::Gettable;
					}
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 2998 "scanner.l"
{
					}
	YY_BREAK
case 299:
/* rule 299 can match eol */
YY_RULE_SETUP
#line 3000 "scanner.l"
{
					  // return type (probably HRESULT) - skip it
					}
	YY_BREAK
case 300:
/* rule 300 can match eol */
YY_RULE_SETUP
#line 3003 "scanner.l"
{
  					  current->name = scanYYtext;
					  current->name = current->name.left(current->name.length()-1).stripWhiteSpace();
  					  current->startLine = yyLineNr;
					  BEGIN( IDLProp );
					}
	YY_BREAK
case 301:
/* rule 301 can match eol */
YY_RULE_SETUP
#line 3009 "scanner.l"
{  // attribute of a parameter
					   idlAttr = scanYYtext;
					   idlAttr=idlAttr.stripWhiteSpace();
					}
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 3013 "scanner.l"
{  // property type
					   idlProp = scanYYtext;
					}
	YY_BREAK
case 303:
/* rule 303 can match eol */
YY_RULE_SETUP
#line 3016 "scanner.l"
{  // Rare: Another parameter ([propput] HRESULT Item(int index, [in] Type theRealProperty);)
					  if (!current->args)
					    current->args = "(";
					  else
					    current->args += ", ";
					  current->args += idlAttr;
					  current->args += " ";
					  current->args += idlProp;	// prop was actually type of extra parameter
					  current->args += " ";
					  current->args += scanYYtext;
					  current->args = current->args.left(current->args.length() - 1);	// strip comma
					  idlProp.resize(0);
					  idlAttr.resize(0);
					  BEGIN( IDLProp );
					}
	YY_BREAK
case 304:
/* rule 304 can match eol */
YY_RULE_SETUP
#line 3031 "scanner.l"
{
					  // the parameter name for the property - just skip.
					}
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 3034 "scanner.l"
{
					  current->fileName   = yyFileName;
					  current->type		= idlProp;
  					  current->args       = current->args.simplifyWhiteSpace();
  					  if (current->args)
  					    current->args += ")";
  					  current->name       = current->name.stripWhiteSpace();
					  current->section    = Entry::VARIABLE_SEC;
					  current_root->addSubEntry(current);
					  current             = new Entry;
					  initEntry();
					  BEGIN( FindMembers );
					}
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 3047 "scanner.l"
{ // spaces, *, or other stuff
  					  //idlProp+=scanYYtext;
 					}
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 3050 "scanner.l"
{ current->args += *scanYYtext ;
					  if (--squareCount<=0)
	                                     BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 3054 "scanner.l"
{ current->args += *scanYYtext ;
					  if (--squareCount<=0)
	                                     BEGIN( Function ) ;
					}
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 3058 "scanner.l"
{ current->args += *scanYYtext ;
					  squareCount++;	
					}
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 3061 "scanner.l"
{ current->args += *scanYYtext ; }
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 3062 "scanner.l"
{ squareCount++; }
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 3063 "scanner.l"
{
  					  if (--squareCount<=0)
					    BEGIN( lastSquareContext );
  					}
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 3067 "scanner.l"
{
  					  lastStringContext=YY_START;
  				          BEGIN( SkipString ); 
					}
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 3071 "scanner.l"

	YY_BREAK
case 315:
YY_RULE_SETUP
#line 3072 "scanner.l"
{ addType( current ) ;
					  current->type += scanYYtext ;
					  BEGIN( Sharp ) ;
					}
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 3076 "scanner.l"
{ current->type += *scanYYtext ;
					  if (--sharpCount<=0)
	                                     BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 3080 "scanner.l"
{ current->type += *scanYYtext ;
					  sharpCount++;	
					}
	YY_BREAK
case 318:
/* rule 318 can match eol */
YY_RULE_SETUP
#line 3083 "scanner.l"
{
  					  lineCount();
					}
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 3086 "scanner.l"
{ current->type += *scanYYtext ; }
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 3087 "scanner.l"
{
  					  current->bodyLine = yyLineNr;
  					  current->name     = scanYYtext;
					}
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 3091 "scanner.l"
{
  					  // Java enum initializer
  					  unput('(');
  					  lastInitializerContext = YY_START;
					  initBracketCount=0;
  					  BEGIN(ReadInitializer);
  					}
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 3098 "scanner.l"
{
  					  lastInitializerContext = YY_START;
					  initBracketCount=0;
  					  BEGIN(ReadInitializer);
  					}
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 3103 "scanner.l"
{
  					  if (insideJava)  // last enum field in Java class
					  {
					    if (!current->name.isEmpty())
					    {
					      current->fileName   = yyFileName;
					      current->startLine  = yyLineNr;
					      current->type       = "@"; // enum marker
					      current->args       = current->args.simplifyWhiteSpace();
					      current->name       = current->name.stripWhiteSpace();
					      current->section    = Entry::VARIABLE_SEC;
					      current_root->addSubEntry(current);
					      current             = new Entry ;
					      initEntry();
					    }

					    BEGIN( FindMembers );
					  }
					  else
					  {
					    REJECT;
					  }
  					}
	YY_BREAK
case 324:
/* rule 324 can match eol */
YY_RULE_SETUP
#line 3126 "scanner.l"
{ 
                                          yyLineNr++;
                                        }
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 3129 "scanner.l"

	YY_BREAK
case 326:
YY_RULE_SETUP
#line 3130 "scanner.l"
{
					  //printf("adding `%s' `%s' `%s' to enum `%s' (mGrpId=%d)\n",
					  //     current->type.data(), current->name.data(),
					  //     current->args.data(), current_root->name.data(),current->mGrpId);
  					  if (!current->name.isEmpty())
					  {
					    current->fileName   = yyFileName;
					    current->startLine  = yyLineNr;
					    if (!(current_root->spec&Entry::Enum))
					    {
					      current->type       = "@"; // enum marker
					    }
  					    current->args       = current->args.simplifyWhiteSpace();
  					    current->name       = current->name.stripWhiteSpace();
					    current->section    = Entry::VARIABLE_SEC;
					    // add to the scope of the enum
					    current_root->addSubEntry(current);
					    if (!insideCS && !insideJava) // for C# and Java 1.5+ enum values always have to be explicitly qualified
					    {
					      current             = new Entry(*current);
					      // add to the scope surrounding the enum (copy!)
					      current_root->parent()->addSubEntry(current);
					    }
					    current             = new Entry ;
					    initEntry();
					  }
					  else // probably a redundant , 
					  {
				     	    current->reset();
					    initEntry();
					  }
  					}
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 3162 "scanner.l"
{ // attribute list in IDL
					  squareCount=1;
					  lastSquareContext = YY_START;
					  BEGIN(SkipSquare);
  					}
	YY_BREAK
/*
<FindFieldArg>","			{ unput(*scanYYtext); BEGIN(FindFields); }
  */
case 328:
YY_RULE_SETUP
#line 3170 "scanner.l"
{ current->program += scanYYtext ; }
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 3171 "scanner.l"
{ current->program += scanYYtext ; }
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 3172 "scanner.l"
{ if (!insidePHP) 
					    REJECT;
					  // append PHP comment.
					  current->program += scanYYtext ;
					}
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 3177 "scanner.l"
{ current->program += scanYYtext ; 
                                          pSkipVerbString = &current->program;
                                          lastSkipVerbStringContext=YY_START;
                                          BEGIN( SkipVerbString );
					}
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 3182 "scanner.l"
{ if (insidePHP)
                                          {
                                            current->program += scanYYtext ; 
                                            pCopyHereDocGString = &current->program;
                                            lastHereDocContext=YY_START;
                                            BEGIN( CopyHereDoc );
                                          }
                                          else
                                          {
                                            REJECT;
                                          }
					}
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 3194 "scanner.l"
{ current->program += scanYYtext ; 
                                          pCopyQuotedGString = &current->program;
                                          lastStringContext=YY_START;
                                          BEGIN( CopyGString );
					}
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 3199 "scanner.l"
{ current->program += scanYYtext ;
					  lastContext = YY_START ;
					  BEGIN( Comment ) ;
					}
	YY_BREAK
case 335:
/* rule 335 can match eol */
YY_RULE_SETUP
#line 3203 "scanner.l"
{ current->program += scanYYtext ;
					  ++yyLineNr ;
					  lastContext = YY_START ;
					  BEGIN( Comment ) ;
					}
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 3208 "scanner.l"
{
  					  if (!insidePHP)
					  {
					    current->program += scanYYtext;
					  }
					  else
					  { // begin of single quoted string
					    current->program += scanYYtext;
                                            pCopyQuotedGString = &current->program;
                                            lastStringContext=YY_START;
					    BEGIN(CopyPHPGString);
					  }
  					}
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 3221 "scanner.l"
{ 
                                              if (insidePHP) 
					      {
						REJECT; // for PHP code single quotes 
					                // are used for strings of arbitrary length
					      }
					      else
					      {
                                                current->program += scanYYtext; 
					      }
                                            }
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 3232 "scanner.l"
{ current->program += scanYYtext ;
					  ++curlyCount ;
					}
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 3235 "scanner.l"
{
					  current->program += scanYYtext ;
					  --curlyCount ;
  					}
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 3239 "scanner.l"
{ //err("ReadBody count=%d\n",curlyCount);
  					  if ( curlyCount>0 )
					  {
					    current->program += scanYYtext ;
					    --curlyCount ;
					  }
					  else
					  {
					    current->endBodyLine = yyLineNr;
					    QCString &cn = current->name;
					    QCString rn = current_root->name.copy();
					    //printf("cn=`%s' rn=`%s' isTypedef=%d\n",cn.data(),rn.data(),isTypedef);
					    if (!cn.isEmpty() && !rn.isEmpty())
					    {
					      prependScope();
					    }
					    if (isTypedef && cn.isEmpty())
					    {
					      //printf("Typedef Name\n");
					      BEGIN( TypedefName );
					    }
					    else
					    {
					      if (current->section == Entry::ENUM_SEC)
					      {
					        current->program+=','; // add field terminator
					      }
					      // add compound definition to the tree
					      current->args=removeRedundantWhiteSpace(current->args);
					                // was: current->args.simplifyWhiteSpace();
  					      current->type = current->type.simplifyWhiteSpace();
  					      current->name = current->name.stripWhiteSpace();
					      //printf("adding `%s' `%s' `%s' brief=%s insideObjC=%d %x\n",current->type.data(),current->name.data(),current->args.data(),current->brief.data(),insideObjC,current->section);
					      if (insideObjC && 
						  ((current->spec&Entry::Interface) || (current->spec==Entry::Category))
						 ) // method definition follows
					      {
				                BEGIN( ReadBodyIntf ) ;
					      }
					      else
					      {
					        current_root->addSubEntry( current ) ;
					        memspecEntry = current;
						current = new Entry(*current);
						if (current->section==Entry::NAMESPACE_SEC || 
						    (current->spec==Entry::Interface) ||
						    insideJava || insidePHP || insideCS || insideD || insideJS
						   )
						{ // namespaces and interfaces and java classes ends with a closing bracket without semicolon
						  current->reset();
						  initEntry();
						  memspecEntry = 0;
						  BEGIN( FindMembers ) ;
						}
						else
						{
						  if (!isTypedef && cn.find('@')==-1) // not typedef or unnamed struct
						  {
						    // enabled the next two lines for bug 623424
						    current->doc.resize(0);
						    current->brief.resize(0);
						  }
						  BEGIN( MemberSpec ) ;
						}
					      }
					    }
					  }
					}
	YY_BREAK
case 341:
/* rule 341 can match eol */
YY_RULE_SETUP
#line 3307 "scanner.l"
{ //err("ReadBody count=%d\n",curlyCount);
					  lineCount();
  					  if ( curlyCount>0 )
					  {
					    current->program += scanYYtext ;
					    --curlyCount ;
					  }
					  else
					  {
					    isTypedef = TRUE;
					    current->endBodyLine = yyLineNr;
					    QCString &cn = current->name;
					    QCString rn = current_root->name.copy();
					    if (!cn.isEmpty() && !rn.isEmpty())
					    {
					      prependScope();
					    }
					    BEGIN( TypedefName );
					  }
					}
	YY_BREAK
case 342:
/* rule 342 can match eol */
YY_RULE_SETUP
#line 3327 "scanner.l"
{ // late "const" or "volatile" keyword
					  lineCount();
  					  current->type.prepend(scanYYtext);
  					}
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 3331 "scanner.l"
{
  					  if (current->section == Entry::ENUM_SEC)
					  {
					    current->program+=","; // add field terminator
					  }
  				          current->name=scanYYtext;
					  prependScope();
  					  current->args = current->args.simplifyWhiteSpace();
  					  current->type = current->type.simplifyWhiteSpace();
					  //printf("Adding compound %s %s %s\n",current->type.data(),current->name.data(),current->args.data());
					  current_root->addSubEntry( current ) ;
					  if (!firstTypedefEntry)
					  {
					    firstTypedefEntry = current;
					  }
					  current = new Entry;
					  initEntry();
					  isTypedef=TRUE; // to undo reset by initEntry()
  					  BEGIN(MemberSpecSkip); 
  					}
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 3351 "scanner.l"
{ /* typedef of anonymous type */
					  current->name.sprintf("@%d",anonCount++);
					  if (current->section == Entry::ENUM_SEC)
					  {
					    current->program+=','; // add field terminator
					  }
					  // add compound definition to the tree
  					  current->args = current->args.simplifyWhiteSpace();
  					  current->type = current->type.simplifyWhiteSpace();
					  current_root->addSubEntry( current ) ;
					  memspecEntry = current;
					  current = new Entry(*current);
					  initEntry();
					  unput(';');
					  BEGIN( MemberSpec ) ;
  					}
	YY_BREAK
case 345:
/* rule 345 can match eol */
YY_RULE_SETUP
#line 3367 "scanner.l"
{ // the [] part could be improved.
  					  lineCount();
  					  int i=0,l=scanYYleng,j;
					  while (i<l && (!isId(scanYYtext[i]))) i++;
					  msName = QCString(scanYYtext).right(l-i).stripWhiteSpace();
					  j=msName.find("[");
					  if (j!=-1) 
					  {
					    msArgs=msName.right(msName.length()-j);
					    msName=msName.left(j);
					  }
					  msType=QCString(scanYYtext).left(i);

					  // handle *pName in: typedef { ... } name, *pName;
					  if (firstTypedefEntry) 
					  {
					    if (firstTypedefEntry->spec&Entry::Struct)
					    {
					      msType.prepend("struct "+firstTypedefEntry->name);
					    }
					    else if (firstTypedefEntry->spec&Entry::Union)
					    {
					      msType.prepend("union "+firstTypedefEntry->name);
					    }
					    else if (firstTypedefEntry->section==Entry::ENUM_SEC)
					    {
					      msType.prepend("enum "+firstTypedefEntry->name);
					    }
					    else
					    {
					      msType.prepend(firstTypedefEntry->name);
					    }
					  }
					}
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 3401 "scanner.l"
{ // function with struct return type
  					  addType(current);
  					  current->name = msName;
					  current->spec = 0;
  					  unput('(');
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 3408 "scanner.l"
{
  					  if (msName.isEmpty() && !current->name.isEmpty())
					  { 
					    // see if the compound does not have a name or is inside another
					    // anonymous compound. If so we insert a 
					    // special `anonymous' variable.
					    //Entry *p=current_root;
					    Entry *p=current;
					    while (p)
					    {
					      // only look for class scopes, not namespace scopes
					      if ((p->section & Entry::COMPOUND_MASK) && !p->name.isEmpty())
					      {
						//printf("Trying scope `%s'\n",p->name.data());
						int i=p->name.findRev("::");
						int pi = (i==-1) ? 0 : i+2;
						if (p->name.at(pi)=='@')
						{
						  // anonymous compound inside -> insert dummy variable name
						  //printf("Adding anonymous variable for scope %s\n",p->name.data());
						  msName.sprintf("@%d",anonCount++); 
						  break;
						}
					      }
					      //p=p->parent;
					      if (p==current) p=current_root; else p=p->parent();
					    }
					  }
					  //printf("msName=%s current->name=%s\n",msName.data(),current->name.data());
					  if (!msName.isEmpty() 
					      /*&& msName!=current->name*/) // skip typedef T {} T;, removed due to bug608493
					  {
					    static bool typedefHidesStruct = Config_getBool("TYPEDEF_HIDES_STRUCT");
					    // case 1: typedef struct _S { ... } S_t; 
					    // -> omit typedef and use S_t as the struct name
					    if (typedefHidesStruct && 
						isTypedef && 
						((current->spec&(Entry::Struct|Entry::Union)) ||
						 current->section==Entry::ENUM_SEC )&&
						msType.stripWhiteSpace().isEmpty() && 
						memspecEntry)
					    {
					      memspecEntry->name=msName;
					    }
					    else // case 2: create a typedef field
					    {
					      Entry *varEntry=new Entry;
					      varEntry->lang = language;
					      varEntry->protection = current->protection ;
					      varEntry->mtype = current->mtype;
					      varEntry->virt = current->virt;
					      varEntry->stat = current->stat;
					      varEntry->section = Entry::VARIABLE_SEC;
					      varEntry->name = msName.stripWhiteSpace();
					      varEntry->type = current->type.simplifyWhiteSpace()+" ";
					      varEntry->args = msArgs; 
					      if (isTypedef)
					      {
						varEntry->type.prepend("typedef ");
						//  //printf("current->name = %s %s\n",current->name.data(),msName.data());
					      }
					      if (typedefHidesStruct &&
						  isTypedef &&
						  (current->spec&(Entry::Struct|Entry::Union)) &&
						  memspecEntry
						 ) // case 1: use S_t as type for pS_t in "typedef struct _S {} S_t, *pS_t;"
					      {
						varEntry->type+=memspecEntry->name+msType;
					      }
					      else // case 2: use _S as type for for pS_t
					      {
						varEntry->type+=current->name+msType;
					      }
					      varEntry->fileName = yyFileName;
					      varEntry->startLine = yyLineNr;
					      varEntry->doc = current->doc.copy();
					      varEntry->brief = current->brief.copy();
					      varEntry->mGrpId = current->mGrpId;

					      // deep copy group list
					      QListIterator<Grouping> gli(*current->groups);
					      Grouping *g;
					      for (;(g=gli.current());++gli)
					      {
						varEntry->groups->append(new Grouping(*g));
					      }
					      if (current->sli) // copy special list items
					      {
						QListIterator<ListItemInfo> li(*current->sli);
						ListItemInfo *lii;
						for (li.toFirst();(lii=li.current());++li)
						{
						  varEntry->addSpecialListItem(lii->type,lii->itemId);
						}
					      }

					      //printf("Add: type=`%s',name=`%s',args=`%s' brief=%s doc=%s\n",
					      //      varEntry->type.data(),varEntry->name.data(),
					      //      varEntry->args.data(),varEntry->brief.data(),varEntry->doc.data());
					      current_root->addSubEntry(varEntry);
					    }
					  }
					  if (*scanYYtext==';') // end of a struct/class ...
					  {
					    if (!isTypedef && msName.isEmpty() && memspecEntry && (current->section&Entry::COMPOUND_MASK))
					    { // case where a class/struct has a doc block after it
					      if (!current->doc.isEmpty())
					      {
					        memspecEntry->doc += current->doc;
					      }
					      if (!current->brief.isEmpty())
					      {
					        memspecEntry->brief += current->brief;
					      }
				  	    }
					    msType.resize(0);
					    msName.resize(0);
					    msArgs.resize(0);
					    isTypedef=FALSE;
					    firstTypedefEntry=0;
					    memspecEntry=0;
					    current->reset();
					    initEntry();
					    BEGIN( FindMembers );
					  }
					  else
					  {
					    current->doc.resize(0);
					    current->brief.resize(0);
					  }

  					}
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 3540 "scanner.l"
{ 
  					  lastInitializerContext=YY_START;
					  initBracketCount=0;
  					  BEGIN(ReadInitializer);
  					  /* BEGIN(MemberSpecSkip); */
					}
	YY_BREAK
/*
<MemberSpecSkip>"{"			{
  					  curlyCount=0;
					  lastCurlyContext = MemberSpecSkip;
					  previous = current;
  					  BEGIN(SkipCurly);
  					}
  */
case 349:
YY_RULE_SETUP
#line 3554 "scanner.l"
{ BEGIN(MemberSpec); }
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 3555 "scanner.l"
{ unput(';'); BEGIN(MemberSpec); }
	YY_BREAK
case 351:
/* rule 351 can match eol */
YY_RULE_SETUP
#line 3556 "scanner.l"
{ current->program += scanYYtext ;
					  lineCount() ;
					}
	YY_BREAK
case 352:
/* rule 352 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3559 "scanner.l"
{ // end of Objective C block
					  current_root->addSubEntry( current ) ;
  					  current=new Entry;
					  initEntry();
					  insideObjC=FALSE;
					  BEGIN( FindMembers ); 
  					}
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 3566 "scanner.l"
{ current->program += scanYYtext ; }
	YY_BREAK
case 354:
/* rule 354 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
#line 3569 "scanner.l"
case 355:
/* rule 355 can match eol */
YY_RULE_SETUP
#line 3569 "scanner.l"
{   /* typedef void (A::*ptr_t)(args...) or int (*func(int))[], the ^ is for Obj-C blocks */
  					  if (insidePHP) // reference parameter
					  {
					    REJECT
					  }
					  else
					  {
					    current->bodyLine = yyLineNr;
					    lineCount();
					    addType(current);
					    funcPtrType=scanYYtext;
					    roundCount=0;
					    //current->type += scanYYtext;
					    BEGIN( FuncPtr );
					  }
  					}
	YY_BREAK
case 356:
/* rule 356 can match eol */
YY_RULE_SETUP
#line 3585 "scanner.l"
{
  					  current->name = scanYYtext;
					  if (nameIsOperator(current->name))
					  {
					    BEGIN( FuncPtrOperator );
					  }
					  else
					  {
					    if (current->name=="const" || current->name=="volatile")
					    {
					      funcPtrType += current->name;
					    }
					    else
					    {
					      BEGIN( EndFuncPtr );
					    }
					  }
  					}
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 3603 "scanner.l"
{
  					  //printf("error: FuncPtr `%c' unexpected at line %d of %s\n",*scanYYtext,yyLineNr,yyFileName);
  					}
	YY_BREAK
case 358:
/* rule 358 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3606 "scanner.l"
{
  					  current->name += scanYYtext;
					  current->name = current->name.simplifyWhiteSpace();
					  lineCount();
  					}
	YY_BREAK
case 359:
/* rule 359 can match eol */
YY_RULE_SETUP
#line 3611 "scanner.l"
{
                                          yyLineNr++;
  					  current->name += *scanYYtext;
  					}
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 3615 "scanner.l"
{
  					  unput(*scanYYtext);
					  BEGIN( EndFuncPtr );
                                        }
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 3619 "scanner.l"
{
  					  current->name += *scanYYtext;
  					}
	YY_BREAK
case 362:
/* rule 362 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3622 "scanner.l"
{ // a variable with extra braces
 					  lineCount();
					  current->type+=funcPtrType.data()+1;
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 363:
/* rule 363 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3627 "scanner.l"
{ // a function pointer
  					  lineCount();
					  current->type+=funcPtrType+")";
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 364:
/* rule 364 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3632 "scanner.l"
{ // an array of variables
  					  lineCount();
					  current->type+=funcPtrType.data();
					  current->args += ")";
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 3638 "scanner.l"
{ // a function returning a function or 
                                          // a function returning a pointer to an array
  					  current->args += *scanYYtext ;
					  //roundCount=0;
					  //BEGIN( FuncFunc );
					  current->bodyLine = yyLineNr;
					  currentArgumentContext = FuncFuncEnd;
					  fullArgString=current->args.copy();
					  copyArgString=&current->args;
					  BEGIN( ReadFuncArgType ) ;
  					}
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 3649 "scanner.l"
{
  					  funcPtrType+=scanYYtext;
  					}
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 3652 "scanner.l"
{
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 3655 "scanner.l"
{
  					  current->args += *scanYYtext ;
  					  ++roundCount;
					}
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 3659 "scanner.l"
{
  					  current->args += *scanYYtext ;
  					  if ( roundCount )
					    --roundCount;
					  else
					  {
					    BEGIN(FuncFuncEnd);
					  }
  					}
	YY_BREAK
case 370:
/* rule 370 can match eol */
YY_RULE_SETUP
#line 3668 "scanner.l"
{
  					  lineCount();
					  current->type+=funcPtrType+")(";
					  BEGIN(FuncFuncType);
  					}
	YY_BREAK
case 371:
/* rule 371 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3673 "scanner.l"
{
  					  lineCount();
					  current->type+=funcPtrType.data()+1;
  					  BEGIN(Function);
  					}
	YY_BREAK
case 372:
/* rule 372 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3678 "scanner.l"
{ // function returning a pointer to an array
                                          lineCount();
					  current->type+=funcPtrType;
					  current->args+=")";
					  BEGIN(FuncFuncArray);
  					}
	YY_BREAK
case 373:
YY_RULE_SETUP
#line 3684 "scanner.l"
{
  					  current->args += *scanYYtext;
  					}
	YY_BREAK
case 374:
YY_RULE_SETUP
#line 3687 "scanner.l"
{
  					  current->type += *scanYYtext;
					  roundCount++;
  					}
	YY_BREAK
case 375:
YY_RULE_SETUP
#line 3691 "scanner.l"
{
  					  current->type += *scanYYtext;
  					  if (roundCount)
					    --roundCount;
					  else
					    BEGIN(Function);
					}
	YY_BREAK
case 376:
/* rule 376 can match eol */
YY_RULE_SETUP
#line 3698 "scanner.l"
{ lineCount() ; current->type += ", " ; }
	YY_BREAK
case 377:
/* rule 377 can match eol */
YY_RULE_SETUP
#line 3699 "scanner.l"
{ lineCount() ; current->type += ' ' ; }
	YY_BREAK
case 378:
YY_RULE_SETUP
#line 3700 "scanner.l"
{
  					  current->type += *scanYYtext;
  					}
	YY_BREAK
case 379:
/* rule 379 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3703 "scanner.l"
{ // for catching typedef void (__stdcall *f)() like definitions
                                          if (current->type.left(7)=="typedef" && current->bodyLine==-1) 
					    // the bodyLine check is to prevent this guard to be true more than once
					  {
  					    current->bodyLine = yyLineNr;
					    BEGIN( GetCallType );
					  }
					  else if (!current->name.isEmpty()) // normal function
					  {
					    current->args = scanYYtext;
					    current->bodyLine = yyLineNr;
					    currentArgumentContext = FuncQual;
					    fullArgString=current->args.copy();
					    copyArgString=&current->args;
					    BEGIN( ReadFuncArgType ) ;
					    //printf(">>> Read function arguments!\n");
					  }
					}
	YY_BREAK
case 380:
/* rule 380 can match eol */
YY_RULE_SETUP
#line 3721 "scanner.l"
{
  					  lineCount();
  					  addType(current);
					  funcPtrType="(";
					  funcPtrType+=scanYYtext;
					  roundCount=0;
					  BEGIN( FuncPtr );
  					}
	YY_BREAK
case 381:
YY_RULE_SETUP
#line 3729 "scanner.l"
{ 
                                          if (!current->name.isEmpty())
					  {
					    current->args = scanYYtext;
					    current->bodyLine = yyLineNr;
					    currentArgumentContext = FuncQual;
					    fullArgString=current->args.copy();
					    copyArgString=&current->args;
					    BEGIN( ReadFuncArgType ) ;
					    //printf(">>> Read function arguments current->argList->count()=%d\n",current->argList->count());
					  }
					}
	YY_BREAK
/*
<FindMembers>"("{BN}*("void"{BN}*)?")"	{
  					  lineCount();
  					  current->args = "()"; 
  					  BEGIN( FuncQual );
  					}
  */
/*- Function argument reading rules ---------------------------------------*/
case 382:
YY_RULE_SETUP
#line 3751 "scanner.l"
{ *copyArgString+=scanYYtext; 
  					  fullArgString+=scanYYtext;
  					}
	YY_BREAK
case 383:
YY_RULE_SETUP
#line 3754 "scanner.l"
{ *copyArgString+=scanYYtext; 
					  fullArgString+=scanYYtext;
					}
	YY_BREAK
case 384:
YY_RULE_SETUP
#line 3757 "scanner.l"
{ 
  					  *copyArgString+=scanYYtext; 
  					  fullArgString+=scanYYtext;
  					}
	YY_BREAK
case 385:
/* rule 385 can match eol */
YY_RULE_SETUP
#line 3761 "scanner.l"
{
  					  *copyArgString+=" ";
  					  fullArgString+=" ";
  					  lineCount();
  					}
	YY_BREAK
case 386:
YY_RULE_SETUP
#line 3766 "scanner.l"
{
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
					  lastCopyArgStringContext = YY_START;
  					  BEGIN( CopyArgString );
  					}
	YY_BREAK
case 387:
YY_RULE_SETUP
#line 3772 "scanner.l"
{
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
  					  argRoundCount=0; 
					  lastCopyArgContext = YY_START;
					  BEGIN( CopyArgRound ); 
  					}
	YY_BREAK
case 388:
YY_RULE_SETUP
#line 3779 "scanner.l"
{ 
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
					  stringToArgumentList(fullArgString,current->argList);
					  if (insideJS)
					  {
					    fixArgumentListForJavaScript(current->argList);
					  }
                                          handleParametersCommentBlocks(current->argList);

					  /* remember the current documentation block, since
					     we could overwrite it with the documentation of
					     a function argument, which we then have to correct later
					     on
					   */
					  docBackup = current->doc;
					  briefBackup = current->brief;

					  BEGIN( currentArgumentContext );
					}
	YY_BREAK
/* a special comment */
case 389:
YY_RULE_SETUP
#line 3800 "scanner.l"
{ 
                                          if (currentArgumentContext==DefineEnd)
					  {
					    // for defines we interpret a comment
					    // as documentation for the define 
					    int i;for (i=scanYYleng-1;i>=0;i--)
					    {
					      unput(scanYYtext[i]);
					    }
					    stringToArgumentList(fullArgString,current->argList);
                                            handleParametersCommentBlocks(current->argList);
					    BEGIN( currentArgumentContext );
					  }
					  else // not a define
					  {
					    // for functions we interpret a comment
					    // as documentation for the argument
					    fullArgString+=scanYYtext;
					    lastCopyArgChar=0;
					    lastCommentInArgContext=YY_START;
					    if (scanYYtext[1]=='/')
					      BEGIN( CopyArgCommentLine );
					    else
					      BEGIN( CopyArgComment );
					  }
  					}
	YY_BREAK
/* a non-special comment */
case 390:
YY_RULE_SETUP
#line 3827 "scanner.l"
{ /* empty comment */ }
	YY_BREAK
case 391:
YY_RULE_SETUP
#line 3828 "scanner.l"
{
  					  lastCContext = YY_START;
					  BEGIN( SkipComment );
  					}
	YY_BREAK
case 392:
YY_RULE_SETUP
#line 3832 "scanner.l"
{
  					  lastCContext = YY_START;
					  BEGIN( SkipCxxComment );
  					}
	YY_BREAK
/*
<ReadFuncArgType,ReadTempArgs>"'#"	{ if (insidePHP)
                                            REJECT;
  					  *copyArgString+=scanYYtext; 
  					  fullArgString+=scanYYtext; 
					}
<ReadFuncArgType,ReadTempArgs>"#"	{
  					  if (!insidePHP)
  					    REJECT;
  					  lastCContext = YY_START;
					  BEGIN( SkipCxxComment );
  					}
  */
/* `)' followed by a special comment */
case 393:
/* rule 393 can match eol */
YY_RULE_SETUP
#line 3850 "scanner.l"
{
  					  lineCount();
                                          if (currentArgumentContext==DefineEnd)
					  {
					    // for defines we interpret a comment
					    // as documentation for the define 
					    int i;for (i=scanYYleng-1;i>0;i--)
					    {
					      unput(scanYYtext[i]);
					    }
					    *copyArgString+=*scanYYtext;
					    fullArgString+=*scanYYtext;
					    stringToArgumentList(fullArgString,current->argList);
                                            handleParametersCommentBlocks(current->argList);
					    BEGIN( currentArgumentContext );
					  }
					  else
					  {
					    // for functions we interpret a comment
					    // as documentation for the last argument
					    lastCopyArgChar=*scanYYtext;
					    QCString text=&scanYYtext[1];
					    text=text.stripWhiteSpace();
					    lastCommentInArgContext=YY_START;
					    fullArgString+=text;
					    if (text.find("//")!=-1)
					      BEGIN( CopyArgCommentLine );
					    else
					      BEGIN( CopyArgComment );
					  }
  					}
	YY_BREAK
case 394:
/* rule 394 can match eol */
YY_RULE_SETUP
#line 3881 "scanner.l"

	YY_BREAK
case 395:
YY_RULE_SETUP
#line 3882 "scanner.l"
{ fullArgString+=scanYYtext; }
	YY_BREAK
case 396:
YY_RULE_SETUP
#line 3883 "scanner.l"
{ fullArgString+=scanYYtext; 
  					  if (lastCopyArgChar!=0)
					    unput(lastCopyArgChar); 
                                          BEGIN( lastCommentInArgContext ); 
					}
	YY_BREAK
case 397:
/* rule 397 can match eol */
YY_RULE_SETUP
#line 3888 "scanner.l"
{ fullArgString+=scanYYtext;
  					  yyLineNr++;
  					  if (lastCopyArgChar!=0)
					    unput(lastCopyArgChar);
					  BEGIN( lastCommentInArgContext );
  					}
	YY_BREAK
case 398:
/* rule 398 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3894 "scanner.l"
{ // verbatim command (which could contain nested comments!)
				          docBlockName=&scanYYtext[1];
  					  fullArgString+=scanYYtext;
					  BEGIN(CopyArgVerbatim);
  					}
	YY_BREAK
case 399:
YY_RULE_SETUP
#line 3899 "scanner.l"
{
				          docBlockName=&scanYYtext[1];
					  if (docBlockName.at(1)=='[')
					  {
				            docBlockName.at(1)='}';
					  }
					  if (docBlockName.at(1)=='{')
					  {
				            docBlockName.at(1)='}';
					  }
  					  fullArgString+=scanYYtext;
  					  BEGIN(CopyArgVerbatim);
                                        }
	YY_BREAK
case 400:
/* rule 400 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3912 "scanner.l"
{ // end of verbatim block
  					  fullArgString+=scanYYtext;
				          if (scanYYtext[1]=='f') // end of formula
				          {
				            BEGIN(CopyArgCommentLine);
				          }
					  if (&scanYYtext[4]==docBlockName)
					  {
  					    BEGIN(CopyArgCommentLine);
					  }
  					}
	YY_BREAK
case 401:
YY_RULE_SETUP
#line 3923 "scanner.l"
{ fullArgString+=scanYYtext; }
	YY_BREAK
case 402:
YY_RULE_SETUP
#line 3924 "scanner.l"
{ fullArgString+=*scanYYtext; }
	YY_BREAK
case 403:
/* rule 403 can match eol */
YY_RULE_SETUP
#line 3925 "scanner.l"
{ fullArgString+=*scanYYtext; yyLineNr++; }
	YY_BREAK
case 404:
YY_RULE_SETUP
#line 3926 "scanner.l"
{ fullArgString+=*scanYYtext; }
	YY_BREAK
case 405:
YY_RULE_SETUP
#line 3927 "scanner.l"
{
  					  warn(yyFileName,yyLineNr,
					      "warning: Ignoring %cbrief command inside argument documentation",*scanYYtext
					     );
                                          fullArgString+=' ';
                                        }
	YY_BREAK
case 406:
YY_RULE_SETUP
#line 3933 "scanner.l"
{
					  *copyArgString+=*scanYYtext;
					  fullArgString+=*scanYYtext;
					  argSharpCount=1;
					  BEGIN( CopyArgSharp );
					}
	YY_BREAK
case 407:
YY_RULE_SETUP
#line 3939 "scanner.l"
{
					  *copyArgString+=*scanYYtext;
					  fullArgString+=*scanYYtext;
					  //printf("end template list %s\n",copyArgString->data());
					  stringToArgumentList(fullArgString,currentArgumentList);
					  BEGIN( currentArgumentContext );
					}
	YY_BREAK
case 408:
YY_RULE_SETUP
#line 3946 "scanner.l"
{
  					  argRoundCount++;
					  *copyArgString+=*scanYYtext;
					  fullArgString+=*scanYYtext;
  					}
	YY_BREAK
case 409:
YY_RULE_SETUP
#line 3951 "scanner.l"
{
					  *copyArgString+=*scanYYtext;
					  fullArgString+=*scanYYtext;
					  if (argRoundCount>0) 
					    argRoundCount--;
					  else 
					    BEGIN( lastCopyArgContext );
  					}
	YY_BREAK
case 410:
YY_RULE_SETUP
#line 3959 "scanner.l"
{
  					  argSharpCount++;
					  //printf("argSharpCount++=%d  copy\n",argSharpCount);
					  *copyArgString+=*scanYYtext;
					  fullArgString+=*scanYYtext;
  					}
	YY_BREAK
case 411:
YY_RULE_SETUP
#line 3965 "scanner.l"
{
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
					  argSharpCount--;
					  if (argSharpCount>0)
					  {
					    //printf("argSharpCount--=%d copy\n",argSharpCount);
					  }
					  else
					  {
					    BEGIN( ReadTempArgs );
					    //printf("end of argSharpCount\n");
					  }
  					}
	YY_BREAK
case 412:
YY_RULE_SETUP
#line 3979 "scanner.l"
{
  					  *copyArgString+=scanYYtext;
  					  fullArgString+=scanYYtext;
  					}
	YY_BREAK
case 413:
YY_RULE_SETUP
#line 3983 "scanner.l"
{
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
					  BEGIN( lastCopyArgStringContext );
  					}
	YY_BREAK
case 414:
YY_RULE_SETUP
#line 3988 "scanner.l"
{
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
					  BEGIN( lastCopyArgStringContext );
  					}
	YY_BREAK
case 415:
YY_RULE_SETUP
#line 3993 "scanner.l"
{ 
                                          if (insidePHP)
					  {
					    REJECT;
					  }
					  else
					  {
  					    *copyArgString+=scanYYtext; 
  					    fullArgString+=scanYYtext; 
					  }
					}
	YY_BREAK
case 416:
YY_RULE_SETUP
#line 4004 "scanner.l"
{ 
  					  *copyArgString+=scanYYtext; 
  					  fullArgString+=scanYYtext; 
					  if (insidePHP)
					  {
					    lastCopyArgStringContext=YY_START;
					    BEGIN(CopyArgPHPString);
					  }
  					}
	YY_BREAK
case 417:
/* rule 417 can match eol */
YY_RULE_SETUP
#line 4013 "scanner.l"
{ 
  					  yyLineNr++; 
					  *copyArgString+=*scanYYtext; 
					  fullArgString+=*scanYYtext; 
					}
	YY_BREAK
case 418:
YY_RULE_SETUP
#line 4018 "scanner.l"
{ 
  					  *copyArgString+=*scanYYtext; 
  					  fullArgString+=*scanYYtext; 
					}
	YY_BREAK
/*------------------------------------------------------------------------*/
case 419:
YY_RULE_SETUP
#line 4028 "scanner.l"
{ current->args += *scanYYtext ;
					  ++roundCount ;
					}
	YY_BREAK
case 420:
YY_RULE_SETUP
#line 4031 "scanner.l"
{ current->args += *scanYYtext ; 
					  if ( roundCount )
					    --roundCount ;
				          else
					    BEGIN( FuncQual ) ;
					}
	YY_BREAK
/*
<FuncQual>"#"				{ if (insidePHP)
  					    REJECT;
  					  lastCPPContext = YY_START;
  					  BEGIN(SkipCPP);
					}
  */
case 421:
YY_RULE_SETUP
#line 4044 "scanner.l"
{
                                          if ( strcmp(scanYYtext,";")==0 && 
					       insidePHP && 
					       !containsWord(current->type,"function") )
                                          {
                                            current->reset();
                                            initEntry();
                                            BEGIN( FindMembers );
                                          }
                                          else
                                          {
                                            unput(*scanYYtext); BEGIN( Function );
                                          }
                                        }
	YY_BREAK
case 422:
/* rule 422 can match eol */
YY_RULE_SETUP
#line 4058 "scanner.l"
{ // pure virtual member function
                                          lineCount() ; 
                                          current->virt = Pure;
                                          current->args += " override "; 
                                        }
	YY_BREAK
case 423:
/* rule 423 can match eol */
YY_RULE_SETUP
#line 4063 "scanner.l"
{ // overridden virtual member function
                                          lineCount() ; 
                                          current->spec |= Entry::Override;
                                          current->args += " override "; 
                                        }
	YY_BREAK
case 424:
/* rule 424 can match eol */
YY_RULE_SETUP
#line 4068 "scanner.l"
{ // sealed member function
                                          lineCount() ; 
                                          current->spec |= Entry::Sealed;
                                          current->args += " sealed "; 
                                        }
	YY_BREAK
case 425:
/* rule 425 can match eol */
YY_RULE_SETUP
#line 4073 "scanner.l"
{ // new member function
                                          lineCount() ; 
                                          current->spec |= Entry::New;
                                          current->args += " new "; 
                                        }
	YY_BREAK
case 426:
/* rule 426 can match eol */
YY_RULE_SETUP
#line 4078 "scanner.l"
{ // const member function
  					  lineCount() ; 
  					  current->args += " const "; 
					  current->argList->constSpecifier=TRUE;
					}
	YY_BREAK
case 427:
/* rule 427 can match eol */
YY_RULE_SETUP
#line 4083 "scanner.l"
{ // volatile member function
  					  lineCount() ; 
  					  current->args += " volatile "; 
					  current->argList->volatileSpecifier=TRUE;
					}
	YY_BREAK
case 428:
/* rule 428 can match eol */
YY_RULE_SETUP
#line 4088 "scanner.l"
{ // pure virtual member function
  					  lineCount() ; 
					  current->args += " = 0"; 
					  current->virt = Pure; 
					  current->argList->pureSpecifier=TRUE;
					}
	YY_BREAK
case 429:
/* rule 429 can match eol */
YY_RULE_SETUP
#line 4094 "scanner.l"
{ 
  					  lineCount() ; 
					  current->args += ", " ; 
					}
	YY_BREAK
case 430:
/* rule 430 can match eol */
YY_RULE_SETUP
#line 4098 "scanner.l"
{ 
  					  lineCount() ; 
					  current->args += ' ' ; 
					}
	YY_BREAK
case 431:
YY_RULE_SETUP
#line 4102 "scanner.l"
{ if (insidePHP)
  					    REJECT;
  					  lastCPPContext = YY_START;
  					  BEGIN(SkipCPP);
					}	
	YY_BREAK
case 432:
YY_RULE_SETUP
#line 4107 "scanner.l"
{ 
                                          if (insideCli && 
					      (current_root->section&Entry::COMPOUND_MASK) 
					     )
					  {
					    BEGIN(CliOverride);
					  }
					  else
					  {
                                            // typically an initialized function pointer
  					    lastInitializerContext=YY_START;
					    initBracketCount=0;
  					    BEGIN(ReadInitializer);
					  }
  					}
	YY_BREAK
case 433:
YY_RULE_SETUP
#line 4122 "scanner.l"
{
  					}
	YY_BREAK
case 434:
YY_RULE_SETUP
#line 4124 "scanner.l"
{ 
  					  unput(*scanYYtext);
					  BEGIN(FuncQual);
  					}
	YY_BREAK
case 435:
/* rule 435 can match eol */
YY_RULE_SETUP
#line 4128 "scanner.l"
{
  					  yyLineNr++;
  					}
	YY_BREAK
case 436:
YY_RULE_SETUP
#line 4131 "scanner.l"
{
  					}
	YY_BREAK
case 437:
YY_RULE_SETUP
#line 4133 "scanner.l"
{
  					  unput(*scanYYtext);
					  BEGIN(FuncQual);
  					}
	YY_BREAK
case 438:
YY_RULE_SETUP
#line 4137 "scanner.l"
{
                                          current->args += *scanYYtext; 
  					  pCopyQuotedString=&current->args;
					  lastStringContext=FuncPtrInit;
					  BEGIN(CopyString);
					}
	YY_BREAK
case 439:
YY_RULE_SETUP
#line 4143 "scanner.l"
{
                                          current->args += *scanYYtext; 
					  if (insidePHP)
					  {
					    pCopyQuotedString=&current->args;
					    lastStringContext=FuncPtrInit;
					    BEGIN(CopyPHPString);
					  }
					}
	YY_BREAK
case 440:
YY_RULE_SETUP
#line 4152 "scanner.l"
{
                                          if (insidePHP)
					  {
					    REJECT;
					  }
					  else
					  {
                                            current->args += scanYYtext; 
					  }
  					}
	YY_BREAK
case 441:
YY_RULE_SETUP
#line 4162 "scanner.l"
{
                                          current->args += scanYYtext; 
					}
	YY_BREAK
case 442:
YY_RULE_SETUP
#line 4165 "scanner.l"
{
                                          current->args += *scanYYtext; 
  					}
	YY_BREAK
case 443:
/* rule 443 can match eol */
YY_RULE_SETUP
#line 4168 "scanner.l"
{
                                          current->args += *scanYYtext; 
					  yyLineNr++;
  					}
	YY_BREAK
case 444:
YY_RULE_SETUP
#line 4172 "scanner.l"
{ // typically a K&R style C function
                                          if (insideCS && strcmp(scanYYtext,"where")==0)
					  { 
					    // type contraint for a method
                                            delete current->typeConstr;
                                            current->typeConstr = new ArgumentList;
					    current->typeConstr->append(new Argument);
					    lastCSConstraint = YY_START;
					    BEGIN( CSConstraintName );
					  }
					  else if (checkForKnRstyleC())
					  {
					    //fprintf(stderr,"===> got a K&R style function\n");
                                            current->args = scanYYtext; 
					    oldStyleArgType.resize(0);
					    BEGIN(OldStyleArgs);
					  }
					  else
					  {
                                            current->args += scanYYtext; 
					  }
  					}
	YY_BREAK
case 445:
YY_RULE_SETUP
#line 4194 "scanner.l"
{
  					  QCString oldStyleArgPtr;
  					  QCString oldStyleArgName;
					  splitKnRArg(oldStyleArgPtr,oldStyleArgName);
					  QCString doc,brief;
					  if (current->doc!=docBackup)
					  {
                                            doc=current->doc.copy();
					    current->doc=docBackup;
					  }
					  if (current->brief!=briefBackup)
					  {
                                            brief=current->brief.copy();
					    current->brief=briefBackup;
					  }
					  addKnRArgInfo(oldStyleArgType+oldStyleArgPtr,
					                oldStyleArgName,brief,doc);
					  current->args.resize(0);
					  if (*scanYYtext==';') oldStyleArgType.resize(0);
  					}
	YY_BREAK
case 446:
YY_RULE_SETUP
#line 4214 "scanner.l"
{ current->args += scanYYtext; }
	YY_BREAK
case 447:
YY_RULE_SETUP
#line 4215 "scanner.l"
{
  					  current->args = argListToString(current->argList);
  					  unput('{');
					  BEGIN(FuncQual);
  					}
	YY_BREAK
case 448:
YY_RULE_SETUP
#line 4220 "scanner.l"
{ current->args += *scanYYtext; }
	YY_BREAK
case 449:
YY_RULE_SETUP
#line 4221 "scanner.l"
{ current->args += *scanYYtext; }
	YY_BREAK
case 450:
/* rule 450 can match eol */
#line 4223 "scanner.l"
case 451:
/* rule 451 can match eol */
YY_RULE_SETUP
#line 4223 "scanner.l"
{ /* try-function-block */ 
					  insideTryBlock=TRUE;
					  lineCount();
  					  if (scanYYtext[scanYYleng-1]==':')
					  {
					    unput(':');
					    BEGIN( Function );
					  }
					}
	YY_BREAK
case 452:
/* rule 452 can match eol */
YY_RULE_SETUP
#line 4232 "scanner.l"
{ // C++ style throw clause
  					  current->exception = " throw (" ;
					  roundCount=0;
					  lineCount() ;
					  BEGIN( ExcpRound ) ;
					}
	YY_BREAK
case 453:
/* rule 453 can match eol */
YY_RULE_SETUP
#line 4238 "scanner.l"
{
  					  current->exception = " raises (" ;
					  lineCount() ;
					  roundCount=0;
					  BEGIN( ExcpRound ) ;
  					}
	YY_BREAK
case 454:
/* rule 454 can match eol */
YY_RULE_SETUP
#line 4244 "scanner.l"
{ // Java style throw clause
  					  current->exception = " throws " ;
					  lineCount() ;
					  BEGIN( ExcpList );
  					}
	YY_BREAK
case 455:
YY_RULE_SETUP
#line 4249 "scanner.l"
{ current->exception += *scanYYtext ;
					  ++roundCount ;
					}
	YY_BREAK
case 456:
YY_RULE_SETUP
#line 4252 "scanner.l"
{ current->exception += *scanYYtext ; 
					  if ( roundCount )
					    --roundCount ;
				          else
					    BEGIN( FuncQual ) ;
					}
	YY_BREAK
case 457:
YY_RULE_SETUP
#line 4258 "scanner.l"
{
  					  current->exception += *scanYYtext;
  					}
	YY_BREAK
case 458:
YY_RULE_SETUP
#line 4261 "scanner.l"
{
  					  unput('{'); BEGIN( FuncQual );
  					}
	YY_BREAK
case 459:
YY_RULE_SETUP
#line 4264 "scanner.l"
{
  					  unput(';'); BEGIN( FuncQual );
  					}
	YY_BREAK
case 460:
/* rule 460 can match eol */
YY_RULE_SETUP
#line 4267 "scanner.l"
{
  					  current->exception += ' ';
					  yyLineNr++;
  					}
	YY_BREAK
case 461:
YY_RULE_SETUP
#line 4271 "scanner.l"
{
  					  current->exception += *scanYYtext;
  					}
	YY_BREAK
case 462:
YY_RULE_SETUP
#line 4274 "scanner.l"
{ current->type += current->name ;
					  current->name  = current->args ;
					  current->args  = scanYYtext ;
					  roundCount=0;
					  BEGIN( FuncRound ) ;
					}
	YY_BREAK
case 463:
YY_RULE_SETUP
#line 4280 "scanner.l"
{
  					  if (!insidePHP) BEGIN(SkipInits);
  					}
	YY_BREAK
case 464:
YY_RULE_SETUP
#line 4283 "scanner.l"
{ 
					  current->name=current->name.simplifyWhiteSpace();
  					  current->type=current->type.simplifyWhiteSpace();
					  current->args=removeRedundantWhiteSpace(current->args);
					                // was: current->args.simplifyWhiteSpace();
					  current->fileName = yyFileName;
					  current->startLine = yyLineNr;
					  static QRegExp re("([^)]*[*&][^)]*)"); // (...*...)
					  if (*scanYYtext!=';' || (current_root->section&Entry::COMPOUND_MASK) )
					  {
					    int tempArg=current->name.find('<');
					    QCString tempName;
					    if (tempArg==-1) tempName=current->name; else tempName=current->name.left(tempArg);
					    if (!current->type.isEmpty() &&
						(current->type.find(re,0)!=-1 || current->type.left(8)=="typedef "))
					    {
					      //printf("Scanner.l: found in class variable: `%s' `%s' `%s'\n", current->type.data(),current->name.data(),current->args.data());
					      if (isTypedef && current->type.left(8)!="typedef ")
					      {
						current->type.prepend("typedef ");
					      }
					      current->section = Entry::VARIABLE_SEC ;
					    }
					    else	      
					    {
					      //printf("Scanner.l: found in class function: `%s' `%s' `%s'\n", current->type.data(),current->name.data(),current->args.data());
					      current->section = Entry::FUNCTION_SEC ;
			                      current->proto = *scanYYtext==';';
					    }
					  }
					  else // a global function prototype or function variable
					  {
					    //printf("Scanner.l: prototype? type=`%s' name=`%s' args=`%s'\n",current->type.data(),current->name.data(),current->args.data());
					    if (!current->type.isEmpty() && 
						(current->type.find(re,0)!=-1 || current->type.left(8)=="typedef "))
					    {
					      if (isTypedef && current->type.left(8)!="typedef ")
					      {
						current->type.prepend("typedef ");
					      }
					      //printf("Scanner.l: found function variable!\n");
					      current->section = Entry::VARIABLE_SEC;
					    }
					    else
					    {
					      //printf("Scanner.l: found prototype\n");
					      current->section = Entry::FUNCTION_SEC;
					      current->proto = TRUE;
					    }
					  }
					  //printf("Adding entry `%s'\n",current->name.data());
					  if ( insidePHP)
					  {
					    if (findAndRemoveWord(current->type,"final"))
					    {
					      current->spec |= Entry::Final;
					    }
					    if (findAndRemoveWord(current->type,"abstract"))
					    {
					      current->spec |= Entry::Abstract;
					    }
					  }
					  if ( insidePHP && !containsWord(current->type,"function"))
					  {
					    initEntry();
					    if ( *scanYYtext == '{' )
					    {
					      lastCurlyContext = FindMembers;
					      curlyCount=0;
					      BEGIN( SkipCurly );
					    }
					    else
					    {
					      BEGIN( FindMembers );
					    }
					  }
					  else
					  {
					    if ( insidePHP)
					    {
					      findAndRemoveWord(current->type,"function");
					    }
					    previous = current;
					    current_root->addSubEntry(current);
					    current = new Entry ;
					    initEntry();
					    // Objective C 2.0: Required/Optional section
					    if (previous->spec & (Entry::Optional | Entry::Required))
					    {
					      current->spec |= previous->spec & (Entry::Optional|Entry::Required);
					    }
					    lastCurlyContext = FindMembers;
					    if ( *scanYYtext == ',' )
					    {
					      current->type = previous->type;
					      // we need to strip any trailing * and & (see bugs 623023 and 649103 for test cases)
					      int i=current->type.length(); 
					      while (i>0 && (current->type[i-1]=='*' || current->type[i-1]=='&' || current->type[i-1]==' ')) i--;
					      current->type = current->type.left(i);
					    }
					    if ( *scanYYtext == '{' )
					    {
					      if ( !insidePHP && (current_root->section & Entry::COMPOUND_MASK) )
					      {
						previous->spec |= Entry::Inline;
					      }
					      //addToBody(scanYYtext);
					      curlyCount=0;
					      BEGIN( SkipCurly ) ;
					    }
					    else
					    {
					      if (previous->section!=Entry::VARIABLE_SEC)
						previous->bodyLine=-1; // a function/member declaration
					      BEGIN( FindMembers ) ;
					    }
					  }
                                        }
	YY_BREAK
case 465:
YY_RULE_SETUP
#line 4401 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  				          //lastCurlyContext = FindMembers;
					  //curlyCount=0;
  					  //BEGIN( SkipCurly ) ; 
  					  unput('{');
					  BEGIN( Function );
					}
	YY_BREAK
case 466:
YY_RULE_SETUP
#line 4409 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  					  ++curlyCount ; 
					}
	YY_BREAK
case 467:
YY_RULE_SETUP
#line 4413 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  					  if( curlyCount )
					  {
					    --curlyCount ;
					  }
					  else
					  {
#if 0
					    if (!Config_getBool("HIDE_IN_BODY_DOCS") && 
						!current->doc.isEmpty())
					    {
					      // copy documentation found inside the body
					      // to the previous item
					      if (previous->inbodyLine==-1)
					      {
					        previous->inbodyLine = current->docLine;
					        previous->inbodyFile = current->docFile;
					      }
					      //printf("*** inbodyDocs+=%s\n",current->doc.data());
					      previous->inbodyDocs += current->doc;
					      current->doc.resize(0);
					    }
#endif
					    if (current->sli && previous) // copy special list items
					    {
					      QListIterator<ListItemInfo> li(*current->sli);
					      ListItemInfo *lii;
					      for (li.toFirst();(lii=li.current());++li)
					      {
						previous->addSpecialListItem(lii->type,lii->itemId);
					      }
					      delete current->sli;
					      current->sli = 0;
					    }
					    if (previous) previous->endBodyLine=yyLineNr;
					    BEGIN( lastCurlyContext ) ;
					  }
					}
	YY_BREAK
case 468:
/* rule 468 can match eol */
YY_RULE_SETUP
#line 4452 "scanner.l"
{ 
					  lineCount();
  					  if ( curlyCount )
					  {
					    //addToBody(scanYYtext);
					    --curlyCount ;
					  }
					  else
					  {
					    current->endBodyLine=yyLineNr;

					    tempEntry = current; // temporarily switch to the previous entry
					    current = previous;

					    docBlockContext   = SkipCurlyEndDoc;
					    docBlockInBody    = FALSE;
					    docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                        ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					    docBlock.resize(0);
					    docBlockTerm = '}';
					    if (scanYYtext[scanYYleng-3]=='/')
					    {
					      startCommentBlock(TRUE);
					      BEGIN( DocLine );
					    }
					    else
					    {
					      startCommentBlock(FALSE);
					      BEGIN( DocBlock );
					    }
					  }
					}
	YY_BREAK
case 469:
/* rule 469 can match eol */
YY_RULE_SETUP
#line 4484 "scanner.l"
{ // desc is followed by another one
					  docBlockContext   = SkipCurlyEndDoc;
					  docBlockInBody    = FALSE;
					  docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                      ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					  docBlock.resize(0);
					  docBlockTerm = '}';
					  if (scanYYtext[scanYYleng-3]=='/')
					  {
					    startCommentBlock(TRUE);
					    BEGIN( DocLine );
					  }
					  else
					  {
					    startCommentBlock(FALSE);
					    BEGIN( DocBlock );
					  }
  					}
	YY_BREAK
case 470:
YY_RULE_SETUP
#line 4502 "scanner.l"
{
  				          //addToBody("}");
					  current = tempEntry;
  					  BEGIN( lastCurlyContext );
  					}
	YY_BREAK
case 471:
YY_RULE_SETUP
#line 4507 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  					  lastStringContext=SkipCurly;
  				          BEGIN( SkipString ); 
					}
	YY_BREAK
case 472:
YY_RULE_SETUP
#line 4512 "scanner.l"
{ 
  				          if (insidePHP)
  				            REJECT;
  				          //addToBody(scanYYtext);
  					  BEGIN( SkipCurlyCpp );
					}
	YY_BREAK
case 473:
/* rule 473 can match eol */
YY_RULE_SETUP
#line 4518 "scanner.l"
{
  					  yyLineNr++;
  				          //addToBody(scanYYtext);
  					}
	YY_BREAK
case 474:
YY_RULE_SETUP
#line 4522 "scanner.l"
{
  					  if (!insidePHP) 
					  {
					    REJECT;
					  }
					  else
					  {
                                            lastHereDocContext = YY_START;
					    BEGIN(HereDoc);
					  }
  					}
	YY_BREAK
case 475:
YY_RULE_SETUP
#line 4533 "scanner.l"
{
  				          //addToBody(scanYYtext);
  					}
	YY_BREAK
case 476:
/* rule 476 can match eol */
YY_RULE_SETUP
#line 4536 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  					  yyLineNr++; 
  					  lastCurlyContext = FindMembers;
  					  BEGIN( SkipCurly ); 
					}
	YY_BREAK
case 477:
/* rule 477 can match eol */
YY_RULE_SETUP
#line 4542 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  					  yyLineNr++; 
					}
	YY_BREAK
case 478:
YY_RULE_SETUP
#line 4546 "scanner.l"
{
  				          //addToBody(scanYYtext);
  					  lastCContext = YY_START;
					  BEGIN(SkipComment);
  					}
	YY_BREAK
case 479:
YY_RULE_SETUP
#line 4551 "scanner.l"
{
  				          //addToBody(scanYYtext);
  					  lastCContext = YY_START;
					  BEGIN(SkipCxxComment);
  					}
	YY_BREAK
case 480:
YY_RULE_SETUP
#line 4556 "scanner.l"
{
  					  lastStringContext=YY_START;
  				          BEGIN( SkipString ); 
					}
	YY_BREAK
case 481:
YY_RULE_SETUP
#line 4560 "scanner.l"
{
  					  warn(yyFileName,yyLineNr,
					      "warning: Found ';' while parsing initializer list! "
					      "(doxygen could be confused by a macro call without semicolon)"
					     );
					  BEGIN( FindMembers );
  					}
	YY_BREAK
case 482:
YY_RULE_SETUP
#line 4567 "scanner.l"
{
  				          if (!insidePHP)
  				            REJECT;
  				          //addToBody(scanYYtext);
  					  lastCContext = YY_START;
					  BEGIN(SkipCxxComment);
  					}
	YY_BREAK
case 483:
YY_RULE_SETUP
#line 4574 "scanner.l"
{
  				          if (!insideCS) REJECT;
					  // C# verbatim string
					  lastSkipVerbStringContext=YY_START;
					  pSkipVerbString=&current->initializer;
					  BEGIN(SkipVerbString);
  					}
	YY_BREAK
case 484:
YY_RULE_SETUP
#line 4581 "scanner.l"
{
                                          if (insidePHP) REJECT;
                                        }
	YY_BREAK
case 485:
YY_RULE_SETUP
#line 4584 "scanner.l"
{
  					  if (insidePHP)
					  {
					    lastStringContext=YY_START;
					    BEGIN(SkipPHPString);
					  }
					}
	YY_BREAK
case 486:
YY_RULE_SETUP
#line 4591 "scanner.l"
{ }
	YY_BREAK
case 487:
YY_RULE_SETUP
#line 4592 "scanner.l"
{ }
	YY_BREAK
case 488:
YY_RULE_SETUP
#line 4593 "scanner.l"
{ 
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 489:
YY_RULE_SETUP
#line 4596 "scanner.l"
{ 
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 490:
YY_RULE_SETUP
#line 4599 "scanner.l"
{ }
	YY_BREAK
case 491:
/* rule 491 can match eol */
YY_RULE_SETUP
#line 4600 "scanner.l"
{
  					  yyLineNr++;
  					}
	YY_BREAK
case 492:
YY_RULE_SETUP
#line 4603 "scanner.l"
{ }
	YY_BREAK
case 493:
YY_RULE_SETUP
#line 4604 "scanner.l"
{ // for "class : public base {} var;" construct, see bug 608359
  					  unput(':');
					  BEGIN(ClassVar);
  					}
	YY_BREAK
case 494:
YY_RULE_SETUP
#line 4608 "scanner.l"
{ 
					  current->section = Entry::EMPTY_SEC ;
					  current->type.resize(0) ;
					  current->name.resize(0) ;
					  current->args.resize(0) ;
					  current->argList->clear();
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 495:
/* rule 495 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4616 "scanner.l"
{
  					  sharpCount = 0;
  					  current->name = scanYYtext ;
					  if (current->spec & Entry::Protocol)
					  {
					    current->name+="-p";
					  }
					  lineCount();
					  lastClassTemplSpecContext = ClassVar;
					  if (insideObjC) // protocol list
					  {
					    BEGIN( ObjCProtocolList );
					  }
					  else if (insideCS) // C# generic class
					  {
					    current->name+="-g"; 
					    BEGIN( CSGeneric );
					  }
					  else // C++ template specialization
					  {
					    roundCount=0;
					    BEGIN( ClassTemplSpec );
					  }
					}
	YY_BREAK
case 496:
YY_RULE_SETUP
#line 4640 "scanner.l"
{
					  if (current->tArgLists==0)
					  {
					    current->tArgLists = new QList<ArgumentList>;
					    current->tArgLists->setAutoDelete(TRUE);
					  }
					  ArgumentList *al = new ArgumentList;
					  // check bug 612858 before enabling the next line
					  //current->spec |= Entry::Template;
					  current->tArgLists->append(al);
					  currentArgumentList = al;
					  templateStr="<";
					  //current->name += "<";
					  fullArgString = templateStr;
					  //copyArgString = &current->name;
					  copyArgString = &templateStr;
					  currentArgumentContext = ClassVar;
					  BEGIN( ReadTempArgs );
  					}
	YY_BREAK
case 497:
YY_RULE_SETUP
#line 4659 "scanner.l"
{
  					  insideProtocolList=TRUE;
  					  BEGIN( Bases );
  					}
	YY_BREAK
case 498:
/* rule 498 can match eol */
YY_RULE_SETUP
#line 4663 "scanner.l"
{
					  current->name += scanYYtext;
					  lineCount();
  					  if (--sharpCount<=0)
					  {
					    current->name = removeRedundantWhiteSpace(current->name);
					    if (current->spec & Entry::Protocol)
					    { // Objective-C protocol
					      unput('{'); // fake start of body
					      BEGIN( ClassVar );
					    }
					    else
					    {
					      BEGIN( lastClassTemplSpecContext );
					    }
					  }
					}
	YY_BREAK
case 499:
YY_RULE_SETUP
#line 4680 "scanner.l"
{
  					  current->name += scanYYtext;
  					  sharpCount++;
  					}
	YY_BREAK
case 500:
YY_RULE_SETUP
#line 4684 "scanner.l"
{
  					  current->name += scanYYtext;
					}
	YY_BREAK
case 501:
/* rule 501 can match eol */
YY_RULE_SETUP
#line 4687 "scanner.l"
{ // forward declaration
    					  unput(';');
					  current->reset();
					  initEntry();
					  if (isTypedef) // typedef of a class, put typedef keyword back
					  {
					    current->type.prepend("typedef");
					  }
					  BEGIN( FindMembers );
					}
	YY_BREAK
case 502:
/* rule 502 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4697 "scanner.l"
{ 
					  current->name = scanYYtext ;
					  lineCount();
					  if (current->spec & Entry::Protocol)
					  {
					    current->name += "-p";
					  }
					  BEGIN( ClassVar );
					}
	YY_BREAK
case 503:
/* rule 503 can match eol */
YY_RULE_SETUP
#line 4706 "scanner.l"
{  // multiple forward declarations on one line
                                           // e.g. @protocol A,B;
					  current->reset();
					  initEntry();
  					}
	YY_BREAK
case 504:
/* rule 504 can match eol */
YY_RULE_SETUP
#line 4711 "scanner.l"
{ 
					  current->name = scanYYtext ;
					  lineCount();
					  if (current->spec & Entry::Protocol)
					  {
					    current->name += "-p";
					  }
					  if ((current->spec & Entry::Protocol) ||
					      current->section == Entry::OBJCIMPL_SEC)
					  {
					    unput('{'); // fake start of body
					  }
					  BEGIN( ClassVar );
					}
	YY_BREAK
case 505:
/* rule 505 can match eol */
YY_RULE_SETUP
#line 4725 "scanner.l"
{ // C# style scope
					  current->name = substitute(scanYYtext,".","::");
					  lineCount();
					  BEGIN( ClassVar );
                                        }
	YY_BREAK
case 506:
/* rule 506 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4730 "scanner.l"
{
  					  if (insideIDL && strncmp(scanYYtext,"switch",6)==0 && !isId(scanYYtext[6]))
					  {
					    // Corba IDL style union
					    roundCount=0;
					    BEGIN(SkipUnionSwitch);
					  }
					  else
					  {
  					    addType(current);
					    current->name = scanYYtext;
					    current->name = current->name.stripWhiteSpace();
					    lineCount();
  					    BEGIN( FindMembers );
					  }
  					}
	YY_BREAK
case 507:
YY_RULE_SETUP
#line 4746 "scanner.l"
{
 					  if (isTypedef)
					  {
					    // multiple types in one typedef
					    unput(',');
					    current->type.prepend("typedef ");
					    BEGIN(FindMembers);
					  }
					  else
					  { 
  					    // Multiple class forward declaration
					  }
  					}
	YY_BREAK
case 508:
/* rule 508 can match eol */
YY_RULE_SETUP
#line 4759 "scanner.l"
{
  					  if (insideCli)
					  {
					    if (scanYYtext[0]=='s') // sealed
					      current->spec |= Entry::SealedClass;
					    else // abstract
					      current->spec |= Entry::AbstractClass;
					    BEGIN( ClassVar ); 
					  }
					  else
					  {
					    REJECT;
					  }
					}
	YY_BREAK
case 509:
YY_RULE_SETUP
#line 4773 "scanner.l"
{
  					  if (insideIDL && strcmp(scanYYtext,"switch")==0)
					  {
					    // Corba IDL style union
					    roundCount=0;
					    BEGIN(SkipUnionSwitch);
					  }
					  else if ((insideJava || insidePHP || insideJS) && (strcmp(scanYYtext,"implements")==0 || strcmp(scanYYtext,"extends")==0))
					  {
  					    current->type.resize(0);
					    baseProt=Public;
                                            baseVirt=Normal;
					    baseName.resize(0);
					    BEGIN( BasesProt ) ;
					  }
					  else if (insideCS && strcmp(scanYYtext,"where")==0) // C# type contraint
					  {
                                            delete current->typeConstr;
                                            current->typeConstr = new ArgumentList;
					    current->typeConstr->append(new Argument);
					    lastCSConstraint = YY_START;
					    BEGIN( CSConstraintName );
					  }
					  else if (insideCli &&  strcmp(scanYYtext,"abstract"))
					  {
					    current->spec|=Entry::Abstract;
					  }
					  else if (insideCli &&  strcmp(scanYYtext,"sealed"))
					  {
					    current->spec|=Entry::Sealed;
					  }
					  else
					  {
					    if (current->section == Entry::ENUM_SEC)
					    { // found "enum a b" -> variable
					      current->section = Entry::VARIABLE_SEC ;
					    }
					    current->type += ' ' ;
					    current->type += current->name ;
					    current->name = scanYYtext ;
					    
					    if (nameIsOperator(current->name))
					    {
				              BEGIN( Operator );
					    }
					  }
  					}
	YY_BREAK
case 510:
YY_RULE_SETUP
#line 4820 "scanner.l"
{
    					  if (insideObjC && *scanYYtext=='(') // class category
					  {
					    current->name+='(';
                                            if (current->section!=Entry::OBJCIMPL_SEC)
                                            {
					      current->spec|=Entry::Category;
                                            }
					    BEGIN( ClassCategory );
					  }
					  else
					  {
                                            // probably a function anyway
                                            unput(*scanYYtext);
					    BEGIN( FindMembers );
					  }
					}
	YY_BREAK
case 511:
YY_RULE_SETUP
#line 4837 "scanner.l"
{ /* empty comment */ }
	YY_BREAK
case 512:
YY_RULE_SETUP
#line 4838 "scanner.l"
{ // special comment
                                          fullArgString.resize(0);
					  lastCopyArgChar='#'; // end marker
					  lastCommentInArgContext=YY_START;
					  if (scanYYtext[1]=='/')
					    BEGIN( CopyArgCommentLine );
					  else
					    BEGIN( CopyArgComment );
					}
	YY_BREAK
case 513:
YY_RULE_SETUP
#line 4847 "scanner.l"
{ // artificially inserted token to signal end of comment block
                                          current->typeConstr->last()->docs = fullArgString;
  					}
	YY_BREAK
case 514:
YY_RULE_SETUP
#line 4850 "scanner.l"
{ // end of type constraint reached
                                          // parse documentation of the constraints
                                          handleParametersCommentBlocks(current->typeConstr);
					  unput('{');
					  BEGIN( lastCSConstraint );
					}
	YY_BREAK
case 515:
YY_RULE_SETUP
#line 4856 "scanner.l"
{
                                          handleParametersCommentBlocks(current->typeConstr);
					  unput(';');
					  BEGIN( lastCSConstraint );
  					}
	YY_BREAK
case 516:
YY_RULE_SETUP
#line 4861 "scanner.l"
{
                                          BEGIN( CSConstraintType );
                                        }
	YY_BREAK
case 517:
YY_RULE_SETUP
#line 4864 "scanner.l"
{
                                          // parameter name
                                          current->typeConstr->last()->name=scanYYtext;
                                        }
	YY_BREAK
case 518:
YY_RULE_SETUP
#line 4868 "scanner.l"
{ // another constraint for a different param
					  current->typeConstr->append(new Argument);
                                          BEGIN( CSConstraintName );
  					}
	YY_BREAK
case 519:
YY_RULE_SETUP
#line 4872 "scanner.l"
{
                                          if (current->typeConstr->last()->type.isEmpty())
                                              // first type constraint for this parameter
                                          {
                                            current->typeConstr->last()->type=scanYYtext;
                                          }
                                          else // new type constraint for same parameter
                                          {
                                            QCString name = current->typeConstr->last()->name;
                                            current->typeConstr->append(new Argument);
                                            current->typeConstr->last()->name=name;
                                            current->typeConstr->last()->type=scanYYtext;
                                          }
                                        }
	YY_BREAK
case 520:
/* rule 520 can match eol */
YY_RULE_SETUP
#line 4886 "scanner.l"
{
					  yyLineNr++;
					}
	YY_BREAK
case 521:
YY_RULE_SETUP
#line 4889 "scanner.l"
{
					}
	YY_BREAK
case 522:
YY_RULE_SETUP
#line 4891 "scanner.l"
{
					  current->name+=scanYYtext;
					}
	YY_BREAK
case 523:
YY_RULE_SETUP
#line 4894 "scanner.l"
{
					  current->name+=')';
					  if ((current->section & Entry::Protocol) ||
					      current->section == Entry::OBJCIMPL_SEC)
					  {
					    unput('{'); // fake start of body
					  }
					  else // category has no variables so push back an empty body
					  {
					    unput('}');
					    unput('{');
					  }
					  BEGIN( ClassVar );
					}
	YY_BREAK
case 524:
YY_RULE_SETUP
#line 4908 "scanner.l"
{ 
					  if (current->section == Entry::VARIABLE_SEC) // enum a b:2, see bug 313527
					  {
  					    BEGIN(BitFields);
					    current->bitfields+=":";
					  }
					  else
					  {
					    current->type.resize(0);
					    if ((current->spec & Entry::Interface) || 
						(current->spec & Entry::Struct)    || 
						(current->spec & Entry::Ref)       || 
						(current->spec & Entry::Value)     || 
						insidePHP || insideCS || insideD || insideObjC
					       )
					      baseProt=Public;
					    else
					      baseProt=Private;
					    baseVirt=Normal;
					    baseName.resize(0);
					    BEGIN( BasesProt ) ;
					  }
					}
	YY_BREAK
case 525:
YY_RULE_SETUP
#line 4931 "scanner.l"
{
    					  unput(*scanYYtext);
					  if (isTypedef) // typedef of a class, put typedef keyword back
					  {
					    current->type.prepend("typedef");
					  }
					  if ((scanYYtext[0]=='*' || scanYYtext[0]=='&') && 
					      current->section == Entry::ENUM_SEC)
					  { // found "enum a *b" -> variable
					    current->section = Entry::VARIABLE_SEC ;
					  }
					  BEGIN( FindMembers );
    					}
	YY_BREAK
case 526:
/* rule 526 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4944 "scanner.l"
{
  					  if (!insideObjC)
					  {
					    REJECT;
					  }
					  else
					  {
					    lineCount();
					    current->program+=scanYYtext;
                                            current->fileName = yyFileName ;
					    current->startLine = yyLineNr ;
					    curlyCount=0;
					    BEGIN( ReadBodyIntf );
					  }
  					}
	YY_BREAK
case 527:
/* rule 527 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
#line 4960 "scanner.l"
case 528:
/* rule 528 can match eol */
#line 4961 "scanner.l"
case 529:
/* rule 529 can match eol */
#line 4962 "scanner.l"
case 530:
/* rule 530 can match eol */
YY_RULE_SETUP
#line 4962 "scanner.l"
{
  					  if (!insideObjC)
					  {
					    REJECT;
					  }
					  else
					  {
					    lineCount();
					    current->program+=scanYYtext;
                                            current->fileName = yyFileName ;
					    current->startLine = yyLineNr ;
					    curlyCount=0;
					    BEGIN( ReadBodyIntf );
					  }
  					}
	YY_BREAK
case 531:
YY_RULE_SETUP
#line 4977 "scanner.l"
{ 
                                          current->fileName = yyFileName ;
					  current->startLine = yyLineNr ;
					  current->name = removeRedundantWhiteSpace(current->name);
					  if (current->name.isEmpty() && !isTypedef) // anonymous compound
					  {
					    if (current->section==Entry::NAMESPACE_SEC) // allow reopening of anonymous namespaces
					    {
					      if (Config_getBool("EXTRACT_ANON_NSPACES")) // use visible name
					      {
					        current->name="anonymous_namespace{"+stripPath(current->fileName)+"}";
					      }
					      else // use invisible name
					      {
					        current->name.sprintf("@%d",anonNSCount);
					      }
					    }
					    else
					    {
					      current->name.sprintf("@%d",anonCount++);
					    }
					  }
					  curlyCount=0;
					  if (current_root && // not a nested struct inside an @interface section
					      !(current_root->spec & Entry::Interface) &&
					      ((current->spec & (Entry::Interface | Entry::Protocol | Entry::Category) ||
					        current->section==Entry::OBJCIMPL_SEC)
					      ) &&
					      insideObjC
					     )
					  { // ObjC body that ends with @end
					    BEGIN( ReadBodyIntf );
					  }
					  else if (current->section==Entry::NAMESPACE_SEC)
					  { // namespace body
					    BEGIN( ReadNSBody );
					  }
					  else
					  { // class body
					    BEGIN( ReadBody ) ;
					  }
					}
	YY_BREAK
case 532:
/* rule 532 can match eol */
YY_RULE_SETUP
#line 5019 "scanner.l"
{ lineCount(); baseVirt = Virtual; }
	YY_BREAK
case 533:
/* rule 533 can match eol */
YY_RULE_SETUP
#line 5020 "scanner.l"
{ lineCount(); baseProt = Public; }
	YY_BREAK
case 534:
/* rule 534 can match eol */
YY_RULE_SETUP
#line 5021 "scanner.l"
{ lineCount(); baseProt = Protected; }
	YY_BREAK
case 535:
/* rule 535 can match eol */
YY_RULE_SETUP
#line 5022 "scanner.l"
{ lineCount(); baseProt = Package; }
	YY_BREAK
case 536:
/* rule 536 can match eol */
YY_RULE_SETUP
#line 5023 "scanner.l"
{ lineCount(); baseProt = Private; }
	YY_BREAK
case 537:
/* rule 537 can match eol */
YY_RULE_SETUP
#line 5024 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 538:
YY_RULE_SETUP
#line 5025 "scanner.l"
{ unput(*scanYYtext); BEGIN(Bases); }
	YY_BREAK
case 539:
YY_RULE_SETUP
#line 5026 "scanner.l"
{ // PHP namespace token, not sure if interspacing is allowed but it gives problems (see bug 640847)
                                          if (!insidePHP)
					  {
					    REJECT;
					  }
					  else // PHP base class of the form \Ns\Cl or Ns\Cl
					  {
  					    lineCount();
					    QCString bn=scanYYtext;
					    bn = substitute(bn,"\\","::");
					    baseName += bn;
					    current->args += ' ';
					    current->args += scanYYtext;
					  }
                                        }
	YY_BREAK
case 540:
/* rule 540 can match eol */
YY_RULE_SETUP
#line 5041 "scanner.l"
{ 
  					  lineCount();
                                          QCString baseScope = scanYYtext;
                                          if (insideCS && baseScope.stripWhiteSpace()=="where")
					  { 
					    // type contraint for a class
                                            delete current->typeConstr;
                                            current->typeConstr = new ArgumentList;
					    current->typeConstr->append(new Argument);
					    lastCSConstraint = YY_START;
					    BEGIN( CSConstraintName );
					  }
					  else
					  {
  					    baseName+=scanYYtext;
					    current->args += ' ';
					    current->args += scanYYtext;
					  }
					}
	YY_BREAK
case 541:
/* rule 541 can match eol */
YY_RULE_SETUP
#line 5060 "scanner.l"
{ // Java style class
    					  QCString name = substitute(scanYYtext,".","::");
					  baseName += name;
					  current->args += ' ';
					  current->args += name;
    					}
	YY_BREAK
case 542:
/* rule 542 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5066 "scanner.l"
{
                                          if (!insideObjC) 
					  {
					    REJECT;
					  }
					  else
					  {
					    yyLineNr++;
					    unput('{');
					  }
					}
	YY_BREAK
case 543:
YY_RULE_SETUP
#line 5077 "scanner.l"
{ // empty ObjC interface
  					  unput('d'); // insert fake body: {}@end
  					  unput('n'); 
  					  unput('e'); 
  					  unput('@'); 
  					  unput('}'); 
  					  unput('{');
					}
	YY_BREAK
case 544:
YY_RULE_SETUP
#line 5085 "scanner.l"
{ current->name += *scanYYtext;
  					  sharpCount=1; 
					  roundCount=0;
					  lastSkipSharpContext = YY_START;
					  specName = &current->name;
					  BEGIN ( Specialization );
					}
	YY_BREAK
case 545:
YY_RULE_SETUP
#line 5092 "scanner.l"
{ 
  					  sharpCount=1; 
					  roundCount=0;
					  lastSkipSharpContext = YY_START;
					  if (insideObjC) // start of protocol list
					  {
					    unput(',');
					  }
					  else // template specialization
					  {
					    //if (insideCS) // generic
					    //{
					    //  baseName+="-g";
					    //}
                                            templateStr = scanYYtext;
					    specName = &templateStr;
					    BEGIN ( Specialization );
					  }
					}
	YY_BREAK
case 546:
YY_RULE_SETUP
#line 5111 "scanner.l"
{ *specName += *scanYYtext;
  					  if (roundCount==0) sharpCount++;
  					}
	YY_BREAK
case 547:
YY_RULE_SETUP
#line 5114 "scanner.l"
{
  					  *specName += *scanYYtext;
  					  if (roundCount==0 && --sharpCount<=0)
					  {
					    if (1 /*!insideCS*/) 
					    {
					      baseName+=*specName;
					    }
					    else
					    {
					      if (current->tArgLists==0)
					      {
						current->tArgLists = new QList<ArgumentList>;
						current->tArgLists->setAutoDelete(TRUE);
					      }
					      ArgumentList *al = new ArgumentList;
					      current->tArgLists->append(al);
					      stringToArgumentList(*specName,al);
					    }
					    BEGIN(lastSkipSharpContext);
					  }
  					}
	YY_BREAK
case 548:
/* rule 548 can match eol */
YY_RULE_SETUP
#line 5136 "scanner.l"
{ lineCount(); *specName +=' '; }
	YY_BREAK
case 549:
YY_RULE_SETUP
#line 5137 "scanner.l"
{ *specName += scanYYtext; }
	YY_BREAK
case 550:
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5138 "scanner.l"
{ // M$ C++ extension to allow >> to close a template...
  					  unput('>');
  					  unput(' ');
  					  unput('>');
                                        }
	YY_BREAK
case 551:
YY_RULE_SETUP
#line 5143 "scanner.l"
{
                                          if (insideCS) // for C# >> ends a nested template
					  {
					    REJECT;
					  }
					  else // for C++ >> is a bitshift 
					       // operator and > > would end 
					       // a nested template.
					       // We require the bitshift to be enclosed in braces.
					       // See http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1757.html
					  {
					    if (roundCount>0)
					    {
                                              *specName += scanYYtext; 
					    }
					    else
					    {
  					      unput('>');
  					      unput(' ');
  					      unput('>');
					    }
					  }
                                        }
	YY_BREAK
case 552:
/* rule 552 can match eol */
YY_RULE_SETUP
#line 5166 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 553:
YY_RULE_SETUP
#line 5167 "scanner.l"
{ *specName += *scanYYtext; roundCount++; }
	YY_BREAK
case 554:
YY_RULE_SETUP
#line 5168 "scanner.l"
{ *specName += *scanYYtext; roundCount--; }
	YY_BREAK
case 555:
YY_RULE_SETUP
#line 5169 "scanner.l"
{
  					  *specName += *scanYYtext;
  					}
	YY_BREAK
case 556:
YY_RULE_SETUP
#line 5172 "scanner.l"
{ ++sharpCount; }
	YY_BREAK
case 557:
YY_RULE_SETUP
#line 5173 "scanner.l"
{ if (--sharpCount<=0)
					    BEGIN ( lastSkipSharpContext );
					}
	YY_BREAK
case 558:
YY_RULE_SETUP
#line 5176 "scanner.l"
{ ++roundCount; }
	YY_BREAK
case 559:
YY_RULE_SETUP
#line 5177 "scanner.l"
{ if (--roundCount<=0)
					    BEGIN ( lastSkipRoundContext );
					}
	YY_BREAK
case 560:
YY_RULE_SETUP
#line 5180 "scanner.l"
{
  					  lastStringContext=SkipRound;
					  BEGIN(SkipString);
  					}
	YY_BREAK
case 561:
/* rule 561 can match eol */
YY_RULE_SETUP
#line 5184 "scanner.l"
{ lineCount();
                                          if (insideProtocolList)
					  {
					    baseName+="-p";
					  }
					  else
					  {
                                            current->args += ',' ; 
					  }
					  current->name = removeRedundantWhiteSpace(current->name);
  					  if (!baseName.isEmpty())
					  {
  					    current->extends->append(
					      new BaseInfo(baseName,baseProt,baseVirt)
					    );
					  }
					  if ((current->spec & (Entry::Interface|Entry::Struct)) || 
					      insideJava || insidePHP || insideCS || 
					      insideD || insideObjC)
					  {
					    baseProt=Public;
					  }
					  else
					  {
					    baseProt=Private;
					  }
					  baseVirt=Normal;
					  baseName.resize(0);
                                          if (*scanYYtext=='>')
					  { // end of a ObjC protocol list
  					    insideProtocolList=FALSE;
					    if (scanYYleng==1)
					    {
					      unput('{'); // dummy start body
					    }
					    else
					    {
					      yyless(1);
					    }
					  }
					  else
					  {
					    if (*scanYYtext==',' && insideObjC) // Begin of protocol list
					    {
  					      insideProtocolList=TRUE;
					    }
					    BEGIN(BasesProt);
					  }
					}
	YY_BREAK
case 562:
YY_RULE_SETUP
#line 5233 "scanner.l"
{ current->fileName = yyFileName ;
					  current->startLine = yyLineNr ;
					  current->name = removeRedundantWhiteSpace(current->name);
  					  if (!baseName.isEmpty())
  					    current->extends->append(
					      new BaseInfo(baseName,baseProt,baseVirt)
					    );
					  curlyCount=0;
					  if (insideObjC)
					  {
					    BEGIN( ReadBodyIntf );
					  }
					  else
					  {
					    BEGIN( ReadBody ) ;
					  }
					}
	YY_BREAK
case 563:
YY_RULE_SETUP
#line 5250 "scanner.l"
{
  					  roundCount++;
  					}
	YY_BREAK
case 564:
YY_RULE_SETUP
#line 5253 "scanner.l"
{
  					  if (--roundCount==0)
					  {
					    BEGIN(ClassVar);
					  }
  					}
	YY_BREAK
case 565:
/* rule 565 can match eol */
YY_RULE_SETUP
#line 5259 "scanner.l"
{ yyLineNr++; }
	YY_BREAK
case 566:
YY_RULE_SETUP
#line 5260 "scanner.l"

	YY_BREAK
case 567:
/* rule 567 can match eol */
YY_RULE_SETUP
#line 5261 "scanner.l"
{ current->program += scanYYtext ;
					  lineCount() ;
					}
	YY_BREAK
case 568:
YY_RULE_SETUP
#line 5264 "scanner.l"
{ current->program += scanYYtext ; } 
	YY_BREAK
case 569:
YY_RULE_SETUP
#line 5265 "scanner.l"
{ current->program += scanYYtext ; }
	YY_BREAK
case 570:
YY_RULE_SETUP
#line 5266 "scanner.l"
{
                                          insideCode=TRUE;
  					  current->program += scanYYtext ;
  					}
	YY_BREAK
case 571:
YY_RULE_SETUP
#line 5270 "scanner.l"
{
                                          insideCode=FALSE;
  					  current->program += scanYYtext ;
  					}
	YY_BREAK
case 572:
YY_RULE_SETUP
#line 5274 "scanner.l"
{ current->program += scanYYtext ; }
	YY_BREAK
case 573:
YY_RULE_SETUP
#line 5275 "scanner.l"
{ current->program += scanYYtext ;
					  if (!insideCode) BEGIN( lastContext ) ;
					}
	YY_BREAK
case 574:
YY_RULE_SETUP
#line 5278 "scanner.l"
{ current->program += *scanYYtext ; }
	YY_BREAK
case 575:
YY_RULE_SETUP
#line 5280 "scanner.l"
{ 
  					  //printf("Start doc block at %d\n",yyLineNr);
					  removeSlashes=(scanYYtext[1]=='/');
					  tmpDocType=-1;
					  if (!current->doc.isEmpty())
					  {
					    current->doc+="\n\n";
					  }
					  else
					  {
					    current->docLine = yyLineNr;
					    current->docFile = yyFileName;
					  }

					  lastDocContext = YY_START;
					  if (current_root->section & Entry::SCOPE_MASK)
                                          {
					    current->inside = current_root->name+"::";
                                          }
					  docBlockContext   = YY_START;
					  docBlockInBody    = YY_START==SkipCurly;
					  docBlockAutoBrief = Config_getBool("QT_AUTOBRIEF");
					  docBlock.resize(0);
					  if (docBlockAutoBrief)
					  {
					    current->briefLine = yyLineNr;
					    current->briefFile = yyFileName;
					  }
					  startCommentBlock(FALSE);
					  BEGIN( DocBlock );
					}
	YY_BREAK
case 576:
/* rule 576 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5311 "scanner.l"
{
  					  removeSlashes=(scanYYtext[1]=='/');
					  lastDocContext = YY_START;

					  //printf("Found comment block at %s:%d\n",yyFileName,yyLineNr);
					  if (current_root->section & Entry::SCOPE_MASK)
                                          {
					    current->inside = current_root->name+"::";
                                          }
					  current->docLine = yyLineNr;
					  current->docFile = yyFileName;
					  docBlockContext = YY_START;
					  docBlockInBody  = YY_START==SkipCurly;
					  docBlockAutoBrief = Config_getBool("JAVADOC_AUTOBRIEF");
					  docBlock.resize(0);
					  if (docBlockAutoBrief)
					  {
					    current->briefLine = yyLineNr;
					    current->briefFile = yyFileName;
					  }
					  startCommentBlock(FALSE);
					  BEGIN( DocBlock );
  					}
	YY_BREAK
case 577:
YY_RULE_SETUP
#line 5334 "scanner.l"
{ 
					  tmpDocType=-1;
					  lastDocContext = YY_START;
					  if (current_root->section & Entry::SCOPE_MASK)
                                          {
					    current->inside = current_root->name+"::";
                                          }
					  docBlockContext   = YY_START;
					  docBlockInBody    = YY_START==SkipCurly;
					  docBlockAutoBrief = FALSE;
					  docBlock.resize(0);
					  startCommentBlock(current->brief.isEmpty());
					  BEGIN( DocLine );
					}
	YY_BREAK
case 578:
/* rule 578 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5348 "scanner.l"
{ 
					  tmpDocType=-1;
					  lastDocContext = YY_START;
					  if (current_root->section & Entry::SCOPE_MASK)
                                          {
					    current->inside = current_root->name+"::";
                                          }
					  docBlockContext   = YY_START;
					  docBlockInBody    = YY_START==SkipCurly;
					  docBlockAutoBrief = FALSE;
					  docBlock.resize(0);
					  startCommentBlock(current->brief.isEmpty());
					  BEGIN( DocLine );
					}
	YY_BREAK
case 579:
/* rule 579 can match eol */
YY_RULE_SETUP
#line 5362 "scanner.l"
{
					  lineCount();
					  externC=TRUE;
					}
	YY_BREAK
case 580:
YY_RULE_SETUP
#line 5366 "scanner.l"
{
                                          if (externC) 
					  {
					    externC=FALSE;
					  }
                                          else if (insideCS &&    
					      !current->name.isEmpty() && 
					      !current->type.isEmpty())
					  {
					    if (containsWord(current->type,"event")) // event
					    {
  					      current->mtype = mtype = Event;
					    }
					    else // property
					    {				
  					      current->mtype = mtype = Property;
					    }
					    current->bodyLine = yyLineNr;
					    curlyCount=0;
					    BEGIN( CSAccessorDecl );
					  }
					  else
					  {
					    if ((insideJava || insideCS || insideD) &&
						current->name.isEmpty()
					       )
					    {
					      // static Java initializer
					      needsSemi = FALSE;
					      if (current->stat)
					      {
						current->name="[static initializer]";
						current->type.resize(0);
					      }
					      else
					      {
						current->name="[instance initializer]";
					      }
                                              unput(*scanYYtext); 
					      BEGIN( Function );
					    }
					    else
					    {
					      needsSemi = TRUE;
					      current->type.resize(0);
					      current->name.resize(0);
					      current->args.resize(0);
					      current->argList->clear();
					      curlyCount=0;
					      BEGIN( SkipCurlyBlock );
					    }
					  }
  					}
	YY_BREAK
case 581:
YY_RULE_SETUP
#line 5419 "scanner.l"
{ curlyCount++; }
	YY_BREAK
case 582:
YY_RULE_SETUP
#line 5420 "scanner.l"
{ 
                                          if (curlyCount) 
                                          {
                                            curlyCount--; 
					  }
					  else
					  {
  					    mtype = Method;
                                            unput(';');
					    BEGIN(FindMembers);
					  }
                                        }
	YY_BREAK
case 583:
YY_RULE_SETUP
#line 5432 "scanner.l"
{ if (curlyCount==0) current->spec |= Entry::Settable;  }
	YY_BREAK
case 584:
YY_RULE_SETUP
#line 5433 "scanner.l"
{ if (curlyCount==0) current->spec |= Entry::Gettable;  }
	YY_BREAK
case 585:
YY_RULE_SETUP
#line 5434 "scanner.l"
{ if (curlyCount==0) current->spec |= Entry::Addable;   }
	YY_BREAK
case 586:
YY_RULE_SETUP
#line 5435 "scanner.l"
{ if (curlyCount==0) current->spec |= Entry::Removable; }
	YY_BREAK
case 587:
YY_RULE_SETUP
#line 5436 "scanner.l"
{ if (curlyCount==0) current->spec |= Entry::Raisable;  }
	YY_BREAK
case 588:
YY_RULE_SETUP
#line 5437 "scanner.l"
{}
	YY_BREAK
case 589:
/* rule 589 can match eol */
YY_RULE_SETUP
#line 5438 "scanner.l"
{ yyLineNr++; }
	YY_BREAK
/**********************************************************************************/
/******************** Documentation block related rules ***************************/
/**********************************************************************************/
/* ---- Single line comments ------ */
case 590:
/* rule 590 can match eol */
YY_RULE_SETUP
#line 5448 "scanner.l"
{ // continuation of multiline C++-style comment
				           docBlock+=scanYYtext;
          		                   docBlock.resize(docBlock.length() - 3);
					   yyLineNr++;
                                        }
	YY_BREAK
case 591:
/* rule 591 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5453 "scanner.l"
{ // whole line
  					  docBlock+=scanYYtext;
					  handleCommentBlock(docBlock.data(),current->brief.isEmpty());
					  BEGIN( docBlockContext );
  					}
	YY_BREAK
/* ---- Comments blocks ------ */
case 592:
YY_RULE_SETUP
#line 5461 "scanner.l"
{ // end of comment block
  				          handleCommentBlock(docBlock.data(),FALSE);
					  BEGIN(docBlockContext);
  					}
	YY_BREAK
case 593:
/* rule 593 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5465 "scanner.l"
{ // start of a comment line
  					}
	YY_BREAK
case 594:
YY_RULE_SETUP
#line 5467 "scanner.l"
{ // strip embedded C++ comments if at the start of a line
  					}
	YY_BREAK
case 595:
YY_RULE_SETUP
#line 5469 "scanner.l"
{ // slashes in the middle of a comment block
  					  docBlock+=scanYYtext;
  					}
	YY_BREAK
case 596:
YY_RULE_SETUP
#line 5472 "scanner.l"
{ // start of a new comment in the 
                                          // middle of a comment block
  					  docBlock+=scanYYtext;
  					}
	YY_BREAK
case 597:
/* rule 597 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5476 "scanner.l"
{ // escaped command
  					  docBlock+=scanYYtext;
  					}
	YY_BREAK
case 598:
YY_RULE_SETUP
#line 5479 "scanner.l"
{
                                          docBlock+=scanYYtext;
				          docBlockName=&scanYYtext[1];
					  if (docBlockName.at(1)=='{')
					  {
				            docBlockName.at(1)='}';
					  }
  					  BEGIN(DocCopyBlock);
                                        }
	YY_BREAK
case 599:
YY_RULE_SETUP
#line 5488 "scanner.l"
{
                                          docBlock+=scanYYtext;
				          docBlockName="<pre>";
  					  BEGIN(DocCopyBlock);
  					}
	YY_BREAK
case 600:
/* rule 600 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5493 "scanner.l"
{ // verbatim command (which could contain nested comments!)
                                          docBlock+=scanYYtext;
				          docBlockName=&scanYYtext[1];
  					  BEGIN(DocCopyBlock);
  					}
	YY_BREAK
case 601:
YY_RULE_SETUP
#line 5498 "scanner.l"
{
  					  if (insideCS)
					  {
					    docBlock+=scanYYtext;
					    docBlockName="<code>";
					    BEGIN(DocCopyBlock);
					  }
					  else
					  {
					    REJECT;
					  }
  					}
	YY_BREAK
case 602:
YY_RULE_SETUP
#line 5510 "scanner.l"
{ // any character that isn't special
  					  docBlock+=scanYYtext;
  					}
	YY_BREAK
case 603:
/* rule 603 can match eol */
YY_RULE_SETUP
#line 5513 "scanner.l"
{ // newline
  					  yyLineNr++;
					  docBlock+=*scanYYtext;
  					}
	YY_BREAK
case 604:
YY_RULE_SETUP
#line 5517 "scanner.l"
{ // command block
					  docBlock+=*scanYYtext;
  					}
	YY_BREAK
/* ---- Copy verbatim sections ------ */
case 605:
YY_RULE_SETUP
#line 5523 "scanner.l"
{ // end of a <pre> block
  					  docBlock+=scanYYtext;
					  if (docBlockName=="<pre>")
					  {
  					    BEGIN(DocBlock);
					  }
  					}
	YY_BREAK
case 606:
YY_RULE_SETUP
#line 5530 "scanner.l"
{ // end of a <code> block
  					  docBlock+=scanYYtext;
					  if (docBlockName=="<code>")
					  {
  					    BEGIN(DocBlock);
					  }
  					}
	YY_BREAK
case 607:
YY_RULE_SETUP
#line 5537 "scanner.l"
{
  					  docBlock+=scanYYtext;
					  BEGIN(DocBlock);
  					}
	YY_BREAK
case 608:
/* rule 608 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5541 "scanner.l"
{ // end of verbatim block
  					  docBlock+=scanYYtext;
					  if (&scanYYtext[4]==docBlockName)
					  {
  					    BEGIN(DocBlock);
					  }
  					}
	YY_BREAK
case 609:
/* rule 609 can match eol */
YY_RULE_SETUP
#line 5548 "scanner.l"
{ // start of a comment line
  					  if (docBlockName=="verbatim")
					  {
					    REJECT;
					  }
  					}
	YY_BREAK
case 610:
YY_RULE_SETUP
#line 5554 "scanner.l"
{ // any character that is not special
  					  docBlock+=scanYYtext;
  					}
	YY_BREAK
case 611:
YY_RULE_SETUP
#line 5557 "scanner.l"
{
  					  docBlock+=scanYYtext;
					}
	YY_BREAK
case 612:
/* rule 612 can match eol */
YY_RULE_SETUP
#line 5560 "scanner.l"
{ // newline
  					  docBlock+=*scanYYtext;
					  yyLineNr++;
  					}
	YY_BREAK
case 613:
YY_RULE_SETUP
#line 5564 "scanner.l"
{ // any other character
  					  docBlock+=*scanYYtext;
  					}
	YY_BREAK
case YY_STATE_EOF(DocCopyBlock):
#line 5567 "scanner.l"
{
  					  warn(yyFileName,yyLineNr,
					      "warning: reached end of file while inside a %s block!\n"
					      "The command that should end the block seems to be missing!\n",
					      docBlockName.data());
  					  yyterminate();
  					}
	YY_BREAK
/* ------------- Prototype parser -------------- */
case 614:
YY_RULE_SETUP
#line 5578 "scanner.l"
{
  					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 615:
YY_RULE_SETUP
#line 5581 "scanner.l"
{
  					  current->args+=*scanYYtext;
					  currentArgumentContext = PrototypeQual;
					  fullArgString = current->args.copy();
					  copyArgString = &current->args;
					  BEGIN( ReadFuncArgType ) ;
  					}
	YY_BREAK
case 616:
YY_RULE_SETUP
#line 5588 "scanner.l"
{
  					  current->type+=current->name+scanYYtext;
					  current->name.resize(0);
  					  BEGIN( PrototypePtr );
  					}
	YY_BREAK
case 617:
/* rule 617 can match eol */
YY_RULE_SETUP
#line 5593 "scanner.l"
{
  					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 618:
YY_RULE_SETUP
#line 5596 "scanner.l"
{
  					  current->args+=*scanYYtext;
					  currentArgumentContext = PrototypeQual;
					  fullArgString = current->args.copy();
					  copyArgString = &current->args;
					  BEGIN( ReadFuncArgType ) ;
  					}
	YY_BREAK
case 619:
YY_RULE_SETUP
#line 5603 "scanner.l"
{
  					  current->type+=')';
  					  BEGIN( Prototype );
  					}
	YY_BREAK
case 620:
YY_RULE_SETUP
#line 5607 "scanner.l"
{
  					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 621:
YY_RULE_SETUP
#line 5610 "scanner.l"
{
  					  BEGIN( PrototypeSkipLine);
  					}
	YY_BREAK
case 622:
YY_RULE_SETUP
#line 5613 "scanner.l"
{ 
  					  current->args += " const "; 
					  current->argList->constSpecifier=TRUE;
					}
	YY_BREAK
case 623:
YY_RULE_SETUP
#line 5617 "scanner.l"
{ 
  					  current->args += " volatile "; 
					  current->argList->volatileSpecifier=TRUE;
					}
	YY_BREAK
case 624:
YY_RULE_SETUP
#line 5621 "scanner.l"
{ 
					  current->args += " = 0"; 
					  current->virt = Pure; 
					  current->argList->pureSpecifier=TRUE;
					}
	YY_BREAK
case 625:
YY_RULE_SETUP
#line 5626 "scanner.l"
{
  					  current->exception = "throw(";
					  BEGIN(PrototypeExc);
  					}
	YY_BREAK
case 626:
YY_RULE_SETUP
#line 5630 "scanner.l"
{
  					  current->exception += ')';
					  BEGIN(PrototypeQual);
  					}
	YY_BREAK
case 627:
YY_RULE_SETUP
#line 5634 "scanner.l"
{
  					  current->exception += *scanYYtext;
  					}
	YY_BREAK
case 628:
YY_RULE_SETUP
#line 5637 "scanner.l"
{
  					  current->args += *scanYYtext;
  					}
	YY_BREAK
case 629:
YY_RULE_SETUP
#line 5640 "scanner.l"
{
  					  current->name += *scanYYtext;
  					}
	YY_BREAK
case 630:
YY_RULE_SETUP
#line 5643 "scanner.l"
{
  					}
	YY_BREAK
/* ------------ Generic rules -------------- */
case 631:
/* rule 631 can match eol */
YY_RULE_SETUP
#line 5650 "scanner.l"
{  // line continuation
  					  if (insideCS) 
					  {
					    REJECT;
					  }
					  else 
					  {
					    yyLineNr++; 
					  }
  					}
	YY_BREAK
case 632:
/* rule 632 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5660 "scanner.l"
{ 
					  BEGIN( lastCContext ) ;
					}
	YY_BREAK
case 633:
YY_RULE_SETUP
#line 5663 "scanner.l"

	YY_BREAK
case 634:
/* rule 634 can match eol */
YY_RULE_SETUP
#line 5664 "scanner.l"
{ yyLineNr++ ; }
	YY_BREAK
case 635:
YY_RULE_SETUP
#line 5665 "scanner.l"
{
					  if (insideIDL && insideCppQuote)
					  {
					    BEGIN(EndCppQuote);
					  }
					}
	YY_BREAK
case 636:
YY_RULE_SETUP
#line 5671 "scanner.l"
{	
  					  if (!insidePHP)
  					    REJECT;
  					  lastCContext = YY_START ;
					  BEGIN( SkipCxxComment ) ;
					}
	YY_BREAK
case 637:
YY_RULE_SETUP
#line 5677 "scanner.l"
{
  					  if (insidePHP)
					  {
  					    lastStringContext=YY_START;
					    BEGIN(SkipPHPString);
					  }
  					}
	YY_BREAK
case 638:
YY_RULE_SETUP
#line 5684 "scanner.l"
{
  					  if (insidePHP)
					  {
  					    lastStringContext=YY_START;
					    BEGIN(SkipString);
					  }
  					}
	YY_BREAK
case 639:
YY_RULE_SETUP
#line 5691 "scanner.l"

	YY_BREAK
case 640:
YY_RULE_SETUP
#line 5692 "scanner.l"

	YY_BREAK
case 641:
YY_RULE_SETUP
#line 5693 "scanner.l"
{ lastCContext = YY_START ;
					  BEGIN( SkipComment ) ;
					}
	YY_BREAK
case 642:
YY_RULE_SETUP
#line 5696 "scanner.l"
{ BEGIN( lastCContext ) ; }
	YY_BREAK
case 643:
YY_RULE_SETUP
#line 5697 "scanner.l"
{	
  					  lastCContext = YY_START ;
					  BEGIN( SkipCxxComment ) ;
					}
	YY_BREAK
case 644:
YY_RULE_SETUP
#line 5701 "scanner.l"
ECHO;
	YY_BREAK
#line 17919 "<stdout>"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Define):
			case YY_STATE_EOF(DefineEnd):
			case YY_STATE_EOF(CompoundName):
			case YY_STATE_EOF(ClassVar):
			case YY_STATE_EOF(CSConstraintName):
			case YY_STATE_EOF(CSConstraintType):
			case YY_STATE_EOF(CSIndexer):
			case YY_STATE_EOF(ClassCategory):
			case YY_STATE_EOF(ClassTemplSpec):
			case YY_STATE_EOF(CliPropertyType):
			case YY_STATE_EOF(CliPropertyIndex):
			case YY_STATE_EOF(CliOverride):
			case YY_STATE_EOF(Bases):
			case YY_STATE_EOF(BasesProt):
			case YY_STATE_EOF(NextSemi):
			case YY_STATE_EOF(BitFields):
			case YY_STATE_EOF(FindMembers):
			case YY_STATE_EOF(FindMembersPHP):
			case YY_STATE_EOF(FindMemberName):
			case YY_STATE_EOF(FindFields):
			case YY_STATE_EOF(FindFieldArg):
			case YY_STATE_EOF(Function):
			case YY_STATE_EOF(FuncRound):
			case YY_STATE_EOF(ExcpRound):
			case YY_STATE_EOF(ExcpList):
			case YY_STATE_EOF(FuncQual):
			case YY_STATE_EOF(Operator):
			case YY_STATE_EOF(Array):
			case YY_STATE_EOF(ReadBody):
			case YY_STATE_EOF(ReadNSBody):
			case YY_STATE_EOF(ReadBodyIntf):
			case YY_STATE_EOF(Using):
			case YY_STATE_EOF(UsingDirective):
			case YY_STATE_EOF(SkipCurly):
			case YY_STATE_EOF(SkipCurlyCpp):
			case YY_STATE_EOF(SkipCurlyEndDoc):
			case YY_STATE_EOF(SkipString):
			case YY_STATE_EOF(SkipPHPString):
			case YY_STATE_EOF(SkipInits):
			case YY_STATE_EOF(SkipCPP):
			case YY_STATE_EOF(SkipCPPBlock):
			case YY_STATE_EOF(SkipComment):
			case YY_STATE_EOF(SkipCxxComment):
			case YY_STATE_EOF(SkipCurlyBlock):
			case YY_STATE_EOF(SkipRoundBlock):
			case YY_STATE_EOF(Sharp):
			case YY_STATE_EOF(SkipSharp):
			case YY_STATE_EOF(SkipRound):
			case YY_STATE_EOF(SkipSquare):
			case YY_STATE_EOF(SkipRemainder):
			case YY_STATE_EOF(TypedefName):
			case YY_STATE_EOF(TryFunctionBlock):
			case YY_STATE_EOF(TryFunctionBlockEnd):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(PackageName):
			case YY_STATE_EOF(JavaImport):
			case YY_STATE_EOF(PHPUse):
			case YY_STATE_EOF(PHPUseAs):
			case YY_STATE_EOF(CSAccessorDecl):
			case YY_STATE_EOF(CSGeneric):
			case YY_STATE_EOF(PreLineCtrl):
			case YY_STATE_EOF(DefinePHP):
			case YY_STATE_EOF(DefinePHPEnd):
			case YY_STATE_EOF(OldStyleArgs):
			case YY_STATE_EOF(SkipVerbString):
			case YY_STATE_EOF(ObjCMethod):
			case YY_STATE_EOF(ObjCReturnType):
			case YY_STATE_EOF(ObjCParams):
			case YY_STATE_EOF(ObjCParamType):
			case YY_STATE_EOF(ObjCProtocolList):
			case YY_STATE_EOF(ObjCPropAttr):
			case YY_STATE_EOF(ObjCSkipStatement):
			case YY_STATE_EOF(QtPropType):
			case YY_STATE_EOF(QtPropName):
			case YY_STATE_EOF(QtPropAttr):
			case YY_STATE_EOF(QtPropRead):
			case YY_STATE_EOF(QtPropWrite):
			case YY_STATE_EOF(ReadInitializer):
			case YY_STATE_EOF(GetCallType):
			case YY_STATE_EOF(CppQuote):
			case YY_STATE_EOF(EndCppQuote):
			case YY_STATE_EOF(MemberSpec):
			case YY_STATE_EOF(MemberSpecSkip):
			case YY_STATE_EOF(EndTemplate):
			case YY_STATE_EOF(FuncPtr):
			case YY_STATE_EOF(FuncPtrOperator):
			case YY_STATE_EOF(EndFuncPtr):
			case YY_STATE_EOF(ReadFuncArgType):
			case YY_STATE_EOF(ReadTempArgs):
			case YY_STATE_EOF(IDLUnionCase):
			case YY_STATE_EOF(NSAliasName):
			case YY_STATE_EOF(NSAliasArg):
			case YY_STATE_EOF(CopyString):
			case YY_STATE_EOF(CopyPHPString):
			case YY_STATE_EOF(CopyGString):
			case YY_STATE_EOF(CopyPHPGString):
			case YY_STATE_EOF(CopyRound):
			case YY_STATE_EOF(CopyCurly):
			case YY_STATE_EOF(GCopyRound):
			case YY_STATE_EOF(GCopyCurly):
			case YY_STATE_EOF(SkipUnionSwitch):
			case YY_STATE_EOF(Specialization):
			case YY_STATE_EOF(FuncPtrInit):
			case YY_STATE_EOF(FuncFunc):
			case YY_STATE_EOF(FuncFuncEnd):
			case YY_STATE_EOF(FuncFuncType):
			case YY_STATE_EOF(FuncFuncArray):
			case YY_STATE_EOF(CopyArgString):
			case YY_STATE_EOF(CopyArgPHPString):
			case YY_STATE_EOF(CopyArgRound):
			case YY_STATE_EOF(CopyArgSharp):
			case YY_STATE_EOF(CopyArgComment):
			case YY_STATE_EOF(CopyArgCommentLine):
			case YY_STATE_EOF(CopyArgVerbatim):
			case YY_STATE_EOF(HereDoc):
			case YY_STATE_EOF(HereDocEnd):
			case YY_STATE_EOF(CopyHereDoc):
			case YY_STATE_EOF(CopyHereDocEnd):
			case YY_STATE_EOF(IDLAttribute):
			case YY_STATE_EOF(IDLProp):
			case YY_STATE_EOF(IDLPropName):
			case YY_STATE_EOF(Prototype):
			case YY_STATE_EOF(PrototypePtr):
			case YY_STATE_EOF(PrototypeQual):
			case YY_STATE_EOF(PrototypeExc):
			case YY_STATE_EOF(PrototypeSkipLine):
			case YY_STATE_EOF(DocLine):
			case YY_STATE_EOF(DocBlock):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed scanYYin at a new source and called
			 * scanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = scanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( scanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * scanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of scanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			scanYYrestart(scanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) scanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 3916 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 3916 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 3915);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up scanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					scanYYrestart(scanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( scanYYwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve scanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void scanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        scanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            scanYY_create_buffer(scanYYin,YY_BUF_SIZE );
	}

	scanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	scanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void scanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		scanYYpop_buffer_state();
	 *		scanYYpush_buffer_state(new_buffer);
     */
	scanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	scanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (scanYYwrap()) processing, but the only time this flag
	 * is looked at is after scanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void scanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	scanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE scanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) scanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in scanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) scanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in scanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	scanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with scanYY_create_buffer()
 * 
 */
    void scanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		scanYYfree((void *) b->yy_ch_buf  );

	scanYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a scanYYrestart() or at EOF.
 */
    static void scanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	scanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then scanYY_init_buffer was _probably_
     * called from scanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void scanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		scanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void scanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	scanYYensure_buffer_stack();

	/* This block is copied from scanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from scanYY_switch_to_buffer. */
	scanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void scanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	scanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		scanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void scanYYensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)scanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in scanYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)scanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in scanYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE scanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) scanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in scanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	scanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to scanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       scanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE scanYY_scan_string (yyconst char * yystr )
{
    
	return scanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to scanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE scanYY_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) scanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in scanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = scanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in scanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up scanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		scanYYtext[scanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = scanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		scanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int scanYYget_lineno  (void)
{
        
    return scanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *scanYYget_in  (void)
{
        return scanYYin;
}

/** Get the output stream.
 * 
 */
FILE *scanYYget_out  (void)
{
        return scanYYout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t scanYYget_leng  (void)
{
        return scanYYleng;
}

/** Get the current token.
 * 
 */

char *scanYYget_text  (void)
{
        return scanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void scanYYset_lineno (int  line_number )
{
    
    scanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see scanYY_switch_to_buffer
 */
void scanYYset_in (FILE *  in_str )
{
        scanYYin = in_str ;
}

void scanYYset_out (FILE *  out_str )
{
        scanYYout = out_str ;
}

int scanYYget_debug  (void)
{
        return scanYY_flex_debug;
}

void scanYYset_debug (int  bdebug )
{
        scanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from scanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    scanYYin = stdin;
    scanYYout = stdout;
#else
    scanYYin = (FILE *) 0;
    scanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * scanYYlex_init()
     */
    return 0;
}

/* scanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int scanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		scanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		scanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	scanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    scanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * scanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *scanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *scanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void scanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see scanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 5701 "scanner.l"



//----------------------------------------------------------------------------

static void startCommentBlock(bool brief)
{
  if (brief)
  {
    current->briefFile = yyFileName;
    current->briefLine = yyLineNr;
  }
  else
  {
    current->docFile = yyFileName;
    current->docLine = yyLineNr;
  }
}
  
//----------------------------------------------------------------------------

static void newEntry()
{
  current_root->addSubEntry(current);
  previous = current;
  current = new Entry ;
  initEntry();
}

static void handleCommentBlock(const QCString &doc,bool brief)
{
  static bool hideInBodyDocs = Config_getBool("HIDE_IN_BODY_DOCS");
  int position=0;
  bool needsEntry=FALSE;
  if (docBlockInBody && hideInBodyDocs) return;
  //printf("parseCommentBlock [%s] brief=%d\n",doc.data(),brief);
  int lineNr = brief ? current->briefLine : current->docLine;   // line of block start
  
  // fill in inbodyFile && inbodyLine the first time, see bug 633891
  Entry *docEntry = docBlockInBody && previous ? previous : current;
  if (docBlockInBody && docEntry && docEntry->inbodyLine==-1)
  {
    docEntry->inbodyFile = yyFileName;
    docEntry->inbodyLine = lineNr;
  }

  while (parseCommentBlock(
	g_thisParser,
	docBlockInBody && previous ? previous : current,
	doc,        // text
	yyFileName, // file
	lineNr,     // line of block start
	docBlockInBody ? FALSE : brief,               // isBrief
	docBlockInBody ? FALSE : docBlockAutoBrief,   // isJavaDocStyle
	docBlockInBody,                               // isInBody
	protection,
        position,
        needsEntry
        )
     ) 
  {
    //printf("parseCommentBlock position=%d [%s]\n",position,doc.data()+position);
    if (needsEntry) 
    {
      QCString docFile = current->docFile;
      newEntry();
      current->docFile = docFile;
      current->docLine = lineNr;
    }
  }
  if (needsEntry)
  {
    newEntry();
  }

  if (docBlockTerm)
  {
    unput(docBlockTerm);
    docBlockTerm=0;
  }
}

static void handleParametersCommentBlocks(ArgumentList *al)
{
  //printf(">>>>>>> handleParametersCommentBlocks()\n");
  ArgumentListIterator ali(*al);
  Argument *a;
  for (ali.toFirst();(a=ali.current());++ali)
  {
    //printf("    Param %s docs=%s\n",a->name.data(),a->docs.data());
    if (!a->docs.isEmpty())
    {
      int position=0;
      bool needsEntry;

      // save context
      QCString orgDoc   = current->doc;
      QCString orgBrief = current->brief;
      int orgDocLine    = current->docLine;
      int orgBriefLine  = current->briefLine;

      current->doc.resize(0);
      current->brief.resize(0);

      //printf("handleParametersCommentBlock [%s]\n",doc.data());
      while (parseCommentBlock(
	     g_thisParser,
	     current,
	     a->docs,            // text
	     yyFileName,         // file
	     current->docLine,   // line of block start
	     FALSE, 
	     FALSE,
	     FALSE,
	     protection,
	     position,
	     needsEntry
	    )
	  ) 
      {
	//printf("handleParametersCommentBlock position=%d [%s]\n",position,doc.data()+position);
	if (needsEntry) newEntry();
      }
      if (needsEntry)
      {
	newEntry();
      }
      a->docs = current->doc;

      // restore context
      current->doc       = orgDoc;
      current->brief     = orgBrief;
      current->docLine   = orgDocLine;
      current->briefLine = orgBriefLine;
    }
  }
}


//----------------------------------------------------------------------------

static void parseCompounds(Entry *rt)
{
  //printf("parseCompounds(%s)\n",rt->name.data());
  g_inputFromFile = FALSE;
  EntryListIterator eli(*rt->children());
  Entry *ce;
  for (;(ce=eli.current());++eli)
  {
    if (!ce->program.isEmpty())
    {
      //printf("-- %s ---------\n%s\n---------------\n",
      //  ce->name.data(),ce->program.data());
      // init scanner state
      padCount=0;
      //depthIf = 0;
      inputString = ce->program;
      inputPosition = 0;
      scanYYrestart( scanYYin ) ;
      if (ce->section==Entry::ENUM_SEC || (ce->spec&Entry::Enum))
	BEGIN( FindFields ) ;
      else
	BEGIN( FindMembers ) ;
      current_root = ce ;
      yyFileName = ce->fileName;
      //setContext();
      yyLineNr = ce->startLine ;
      insideObjC = ce->lang==SrcLangExt_ObjC;
      //printf("---> Inner block starts at line %d objC=%d\n",yyLineNr,insideObjC);
      //current->reset();
      if (current) delete current;
      current = new Entry;
      initEntry();
      gstat = FALSE;
      int ni=ce->name.findRev("::"); if (ni==-1) ni=0; else ni+=2;
      // set default protection based on the compound type
      if( ce->section==Entry::CLASS_SEC ) // class
      {

        if (insidePHP || insideD || insideJS)
	{
          current->protection = protection = Public ; 
	}
	else if (insideJava)
	{
          current->protection = protection = (ce->spec & (Entry::Interface|Entry::Enum)) ?  Public : Package;
	}
	else if (ce->spec&(Entry::Interface | Entry::Ref | Entry::Value | Entry::Struct | Entry::Union))
	{
	  if (ce->lang==SrcLangExt_ObjC)
	  {
	    current->protection = protection = Protected ;
	  }
	  else
	  {
	    current->protection = protection = Public ;
	  }
	}
	else 
	{
          current->protection = protection = Private ;
	}
      }
      else if (ce->section == Entry::ENUM_SEC ) // enum
      {
	current->protection = protection = ce->protection;
      }
      else if (!ce->name.isEmpty() && ce->name.at(ni)=='@') // unnamed union or namespace
      {
	if (ce->section == Entry::NAMESPACE_SEC ) // unnamed namespace
	{
          current->stat = gstat = TRUE;
	}
	current->protection = protection = ce->protection;
      }
      else // named struct, union, protocol, category
      {
	current->protection = protection = Public ;
      }
      mtype = Method;
      virt = Normal;
      //printf("name=%s current->stat=%d gstat=%d\n",ce->name.data(),current->stat,gstat);

      //memberGroupId = DOX_NOGROUP;
      //memberGroupRelates.resize(0);
      //memberGroupInside.resize(0);
      groupEnterCompound(yyFileName,yyLineNr,ce->name);
      
      scanYYlex() ;
      g_lexInit=TRUE;
      //forceEndGroup();

      groupLeaveCompound(yyFileName,yyLineNr,ce->name);
      
      delete current; current=0;
      ce->program.resize(0);


      //if (depthIf>0)
      //{
      //	warn(yyFileName,yyLineNr,"Documentation block ended in the middle of a conditional section!");
      //}
    }
    parseCompounds(ce);
  }
}

//----------------------------------------------------------------------------

static void parseMain(const char *fileName,const char *fileBuf,Entry *rt)
{
  initParser();
  //g_inputFromFile = TRUE;

  inputString = fileBuf;
  inputPosition = 0;
  g_inputFromFile = FALSE;

  //anonCount     = 0;  // don't reset per file
  //depthIf       = 0;
  protection    = Public;
  mtype         = Method;
  gstat         = FALSE;
  virt          = Normal;
  current_root  = rt;
  global_root   = rt;
  inputFile.setName(fileName);
  if (inputFile.open(IO_ReadOnly))
  {
    yyLineNr= 1 ; 
    yyFileName = fileName;
    setContext();
    rt->lang = language;
    msg("Parsing file %s...\n",yyFileName.data());

    current_root  = rt ;
    initParser();
    groupEnterFile(yyFileName,yyLineNr);
    current       = new Entry;
    //printf("current=%p current_root=%p\n",current,current_root);
    int sec=guessSection(yyFileName);
    if (sec)
    {
      current->name    = yyFileName;
      current->section = sec;
      current_root->addSubEntry(current);
      current          = new Entry;
    }
    current->reset();
    initEntry();
    scanYYrestart( scanYYin );
    if ( insidePHP )
    {
      BEGIN( FindMembersPHP );
    }
    else
    {
      BEGIN( FindMembers );
    }

    scanYYlex();
    g_lexInit=TRUE;

    if (YY_START==Comment)
    {
      warn(yyFileName,yyLineNr,"File ended in the middle of a comment block! Perhaps a missing \\endcode?");
    }

    //forceEndGroup();
    groupLeaveFile(yyFileName,yyLineNr);

    //if (depthIf>0)
    //{
    //  warn(yyFileName,yyLineNr,"Documentation block ended in the middle of a conditional section!");
    //}

    rt->program.resize(0);
    if (rt->children()->contains(current)==0) 
      // it could be that current is already added as a child to rt, so we
      // only delete it if this is not the case. See bug 635317.
    {
      delete current; current=0;
    }

    parseCompounds(rt);

    inputFile.close();

    anonNSCount++;
  }
}

//----------------------------------------------------------------------------

static void parsePrototype(const QCString &text)
{
  //printf("**** parsePrototype(%s) begin\n",text.data());
  if (text.isEmpty()) 
  {
    warn(yyFileName,yyLineNr,"Empty prototype found!");
    return;
  }

  const char *orgInputString;
  int orgInputPosition;
  YY_BUFFER_STATE orgState;
  bool orgInputFromFile;
  
  // save scanner state
  orgState = YY_CURRENT_BUFFER;
  scanYY_switch_to_buffer(scanYY_create_buffer(scanYYin,YY_BUF_SIZE));
  orgInputString = inputString; 
  orgInputPosition = inputPosition;
  orgInputFromFile = g_inputFromFile;

  // set new string
  inputString = text;
  inputPosition = 0;
  g_inputFromFile = FALSE;
  scanYYrestart( scanYYin );
  BEGIN(Prototype);
  scanYYlex();
  g_lexInit=TRUE;

  current->name = current->name.stripWhiteSpace();
  if (current->section == Entry::MEMBERDOC_SEC && current->args.isEmpty())
    current->section = Entry::VARIABLEDOC_SEC;

  // restore original scanner state
  YY_BUFFER_STATE tmpState = YY_CURRENT_BUFFER;
  scanYY_switch_to_buffer(orgState);
  scanYY_delete_buffer(tmpState);
  inputString = orgInputString; 
  inputPosition = orgInputPosition;
  g_inputFromFile = orgInputFromFile;

  //printf("**** parsePrototype end\n");
}

void scanFreeScanner()
{
#if defined(YY_FLEX_SUBMINOR_VERSION)
  if (g_lexInit)
  {
    scanYYlex_destroy();
  }
#endif
}

//static void handleGroupStartCommand(const char *header)
//{
//  memberGroupHeader=header;
//  startGroupInDoc();
//}
//
//static void handleGroupEndCommand()
//{
//  endGroup();
//  previous=0;
//}

//----------------------------------------------------------------------------

void CLanguageScanner::parseInput(const char *fileName,const char *fileBuf,Entry *root)
{
  g_thisParser = this;
  ::parseMain(fileName,fileBuf,root);
}

void CLanguageScanner::parseCode(CodeOutputInterface & codeOutIntf,
                   const char * scopeName,
                   const QCString & input,
                   bool isExampleBlock,
                   const char * exampleName,
                   FileDef * fileDef,
                   int startLine,
                   int endLine,
                   bool inlineFragment,
		   MemberDef *memberDef,
		   bool showLineNumbers
                  )
{
  ::parseCCode(codeOutIntf,scopeName,input,isExampleBlock,exampleName,
               fileDef,startLine,endLine,inlineFragment,memberDef,
	       showLineNumbers);
}

bool CLanguageScanner::needsPreprocessing(const QCString &extension)
{
  QCString fe=extension.lower();
  return 
   !( fe==".java" || fe==".as"  || fe==".d"    || fe==".php" || 
      fe==".php4" || fe==".inc" || fe==".phtml" 
    );
}

void CLanguageScanner::resetCodeParserState()
{
  ::resetCCodeParserState();
}

void CLanguageScanner::parsePrototype(const char *text)
{
  ::parsePrototype(text);
}

//----------------------------------------------------------------------------

#if !defined(YY_FLEX_SUBMINOR_VERSION) 
//----------------------------------------------------------------------------
extern "C" { // some bogus code to keep the compiler happy
  void scannerYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


