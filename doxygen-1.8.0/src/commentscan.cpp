
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer commentScanYY_create_buffer
#define yy_delete_buffer commentScanYY_delete_buffer
#define yy_flex_debug commentScanYY_flex_debug
#define yy_init_buffer commentScanYY_init_buffer
#define yy_flush_buffer commentScanYY_flush_buffer
#define yy_load_buffer_state commentScanYY_load_buffer_state
#define yy_switch_to_buffer commentScanYY_switch_to_buffer
#define yyin commentScanYYin
#define yyleng commentScanYYleng
#define yylex commentScanYYlex
#define yylineno commentScanYYlineno
#define yyout commentScanYYout
#define yyrestart commentScanYYrestart
#define yytext commentScanYYtext
#define yywrap commentScanYYwrap
#define yyalloc commentScanYYalloc
#define yyrealloc commentScanYYrealloc
#define yyfree commentScanYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE commentScanYYrestart(commentScanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 262144
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t commentScanYYleng;

extern FILE *commentScanYYin, *commentScanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentScanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via commentScanYYrestart()), so that the user can continue scanning by
	 * just pointing commentScanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when commentScanYYtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t commentScanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow commentScanYYwrap()'s to do buffer switches
 * instead of setting up a fresh commentScanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void commentScanYYrestart (FILE *input_file  );
void commentScanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE commentScanYY_create_buffer (FILE *file,int size  );
void commentScanYY_delete_buffer (YY_BUFFER_STATE b  );
void commentScanYY_flush_buffer (YY_BUFFER_STATE b  );
void commentScanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void commentScanYYpop_buffer_state (void );

static void commentScanYYensure_buffer_stack (void );
static void commentScanYY_load_buffer_state (void );
static void commentScanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER commentScanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE commentScanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE commentScanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE commentScanYY_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *commentScanYYalloc (yy_size_t  );
void *commentScanYYrealloc (void *,yy_size_t  );
void commentScanYYfree (void *  );

#define yy_new_buffer commentScanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        commentScanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        commentScanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentScanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *commentScanYYin = (FILE *) 0, *commentScanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int commentScanYYlineno;

int commentScanYYlineno = 1;

extern char *commentScanYYtext;
#define yytext_ptr commentScanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up commentScanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	commentScanYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 188
#define YY_END_OF_BUFFER 189
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[770] =
    {   0,
       68,   68,  112,  112,  125,  125,  135,  135,  179,  179,
      189,  188,   36,  188,   36,  188,   35,  188,   36,  188,
       36,  188,   36,  188,   34,   36,  188,   36,  188,   36,
      188,   23,   36,  188,   36,  188,   36,  188,   36,  188,
       36,  188,   36,  188,   34,   36,  188,   36,  188,   81,
      188,   80,  188,   81,  188,   78,   81,  188,   81,  188,
       81,  188,  188,   82,  188,  102,  188,  101,  188,  102,
      188,   99,  102,  188,  102,  188,   63,  188,   63,  188,
       62,  188,   63,  188,   63,  188,   63,  188,   59,   63,
      188,   63,  188,   63,  188,   67,  188,   66,  188,   67,

      188,   64,   67,  188,   67,  188,   67,  188,   67,  188,
       71,  188,   70,  188,   71,  188,   68,   71,  188,   71,
      188,   68,   71,  188,   68,   71,  188,   71,  188,   63,
      188,   62,  188,   63,  188,   63,  188,   63,  188,   63,
      188,   63,  188,   90,  188,   89,  188,   87,   90,  188,
       90,  188,   94,  188,   93,  188,   94,  188,   94,  188,
       98,  188,   97,  188,   98,  188,   98,  188,   86,  188,
       83,  188,   86,  188,   84,   86,  188,   86,  188,   86,
      188,   50,  188,   49,  188,   50,  188,   47,   50,  188,
       50,  188,   54,  188,   54,  188,   53,  188,   54,  188,

       54,  188,   54,  188,   51,   54,  188,   54,  188,   54,
      188,   58,  188,   57,  188,   58,  188,   55,   58,  188,
       58,  188,   74,  188,   72,  188,  188,   76,  188,   77,
      188,  188,  108,  188,  107,  188,  106,  108,  188,  108,
      188,  112,  115,  188,  109,  188,  112,  115,  188,  115,
      188,  115,  188,  117,  188,  116,  188,  188,  120,  188,
      120,  188,  118,  188,  120,  188,  120,  188,  125,  129,
      188,  126,  188,  129,  188,  129,  188,  129,  188,  129,
      188,  129,  188,  105,  188,  103,  188,  105,  188,  133,
      188,  131,  188,  130,  133,  188,  133,  188,  136,  188,

      135,  136,  188,  134,  188,  136,  188,  143,  144,  188,
      142,  188,  144,  188,  144,  188,  144,  188,  154,  155,
      188,  145,  188,  155,  188,  155,  188,  155,  188,  158,
      188,  156,  188,  158,  188,  162,  188,  160,  188,  159,
      162,  188,  162,  188,  165,  168,  188,  163,  188,  166,
      168,  188,  167,  168,  188,  168,  188,  168,  188,  171,
      188,  169,  188,  171,  188,  174,  188,  173,  188,  174,
      188,  172,  174,  188,  174,  188,  177,  188,  176,  188,
      177,  188,  175,  177,  188,  177,  188,   44,   46,  188,
       45,  188,   46,  188,   46,  188,  123,  188,  122,  188,

      121,  123,  188,  123,  188,   39,   40,  188,   38,  188,
       40,  188,   40,  188,  179,  181,  188,  180,  188,  181,
      188,  181,  188,  181,  188,  184,  188,  183,  188,  182,
      184,  188,  184,  188,  186,  187,  188,  185,  188,  187,
      188,   33,    4,   28,   30,   28,   22,   22,   14,   22,
       14,   14,   14,   14,   14,   14,   20,   21,   16,   22,
       23,   14,   14,   14,   14,   14,   14,   14,   14,   26,
       27,   24,   78,   78,   79,   78,   82,   99,   99,  100,
       59,   59,   61,   59,   64,   64,   65,   64,   68,   68,
       68,   69,   68,   87,   88,   91,   92,   96,   95,   96,

       84,   84,   85,   84,   47,   47,   47,   48,   51,   51,
       52,   51,   55,   55,   56,   72,   73,   76,   75,  106,
      112,  109,  112,  114,  114,  111,  116,  119,  125,  128,
      127,  104,  130,  132,  135,  134,  143,  154,  157,  159,
      161,  165,  164,  170,  172,  172,  175,  175,   44,  121,
       39,  179,  178,  182,  186,   22,   32,   28,   32,   32,
       32,   28,   32,   32,   29,    7,    1,    1,    2,   14,
       14,   14,   14,   18,   19,   14,   14,   14,   16,    5,
       14,   14,   14,   14,   14,   14,   14,   25,   78,   78,
       59,   64,   64,   68,   68,   84,   84,   47,   47,   47,

       47,   51,   55,  113,   41,   42,   43,   37,  178,   32,
       32,   12,    1,   15,    2, 8198,   14,16390,   14,   14,
       14,   14,   14,   14, 8198,   14,16390,   14,   14,   14,
       14,   14,   78,   64,   68,   60,   84,   47,   47,   47,
       55,  113,  138,  146,   37,   11,   31, 8198, 8198,   14,
       14,   14,   17,   14,   14,    5, 8198,   14,   14,   14,
       78,   64,   68,   84,    3,   14,   14,   17,   14,   14,
       14,   14,   14,   78,   64,   68,   84,   72,  140,  148,
       14,   14,   14,   14,   14,   14,   14,   78,   64,   68,
       84,  139,  137,  147,   14,   14,   14,   14,   14,   14,

       14,   78,   80,  101,   62,   64,   66,   68,   70,   89,
       93,   97,   83,   84,   49,   53,   57,   74,   77,  107,
      110,  117,  118,  124,  126,  103,  131,  141,  142,  145,
      156,  160,  163,  169,  173,  176,  122,   38,  180,  183,
      185,    9,    8,   14,   14,   14,    5,   14,   14,  149,
       10,   14,   14,   14,   14,   14,   14,  152,   13,   14,
       13,   14,  153,  150,   13,   14,  153,  151,   33
    } ;

static yyconst flex_int16_t yy_accept[1096] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    4,
        5,    5,    5,    5,    5,    6,    7,    7,    7,    7,
        7,    8,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,   11,   11,
       11,   11,   11,   12,   13,   15,   17,   19,   21,   23,
       25,   28,   30,   32,   35,   37,   39,   41,   43,   45,

       48,   50,   52,   54,   56,   59,   61,   63,   64,   66,
       68,   70,   72,   75,   77,   79,   81,   83,   85,   87,
       89,   92,   94,   96,   98,  100,  102,  105,  107,  109,
      111,  113,  115,  117,  120,  122,  125,  128,  130,  132,
      134,  136,  138,  140,  142,  144,  146,  148,  151,  153,
      155,  157,  159,  161,  163,  165,  167,  169,  171,  173,
      175,  178,  180,  182,  184,  186,  188,  191,  193,  195,
      197,  199,  201,  203,  205,  208,  210,  212,  214,  216,
      218,  221,  223,  225,  227,  228,  230,  232,  233,  235,
      237,  240,  242,  245,  247,  250,  252,  254,  256,  258,

      259,  261,  263,  265,  267,  269,  272,  274,  276,  278,
      280,  282,  284,  286,  288,  290,  292,  294,  297,  299,
      301,  304,  306,  308,  311,  313,  315,  317,  319,  322,
      324,  326,  328,  330,  332,  334,  336,  338,  340,  343,
      345,  348,  350,  353,  356,  358,  360,  362,  364,  366,
      368,  370,  372,  375,  377,  379,  381,  383,  386,  388,
      391,  393,  395,  397,  399,  401,  404,  406,  409,  411,
      413,  415,  418,  420,  422,  424,  426,  428,  430,  433,
      435,  438,  440,  442,  442,  442,  442,  442,  443,  443,
      443,  444,  444,  444,  444,  444,  445,  446,  446,  447,

      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  448,  449,  450,  451,  452,  453,  454,  455,
      456,  457,  458,  459,  461,  462,  463,  464,  465,  466,
      467,  468,  469,  470,  470,  470,  470,  470,  470,  471,
      472,  472,  473,  473,  473,  473,  474,  475,  475,  475,
      475,  476,  477,  477,  478,  479,  479,  480,  480,  480,
      481,  481,  481,  481,  481,  481,  482,  482,  482,  483,
      483,  484,  484,  484,  484,  485,  485,  486,  487,  487,
      487,  487,  488,  489,  489,  490,  491,  491,  491,  492,
      492,  492,  493,  494,  494,  494,  494,  494,  494,  494,

      494,  494,  494,  494,  494,  494,  494,  495,  495,  496,
      496,  496,  497,  497,  499,  499,  499,  500,  500,  501,
      501,  501,  502,  503,  503,  503,  503,  504,  505,  506,
      506,  506,  507,  507,  508,  508,  509,  509,  509,  509,
      509,  509,  510,  510,  510,  511,  511,  512,  512,  512,
      512,  513,  514,  514,  515,  515,  516,  516,  517,  517,
      517,  518,  518,  519,  519,  520,  520,  521,  521,  522,
      523,  524,  524,  525,  526,  526,  527,  527,  528,  528,
      528,  528,  528,  529,  529,  530,  531,  532,  532,  532,
      532,  533,  533,  534,  534,  535,  535,  536,  537,  537,

      537,  538,  538,  538,  538,  539,  539,  539,  539,  539,
      539,  539,  540,  540,  541,  541,  542,  542,  543,  543,
      544,  544,  544,  545,  545,  546,  546,  547,  547,  547,
      548,  548,  549,  549,  549,  550,  550,  550,  551,  551,
      552,  552,  552,  553,  554,  554,  555,  555,  556,  556,
      557,  557,  557,  557,  557,  558,  560,  561,  562,  564,
      565,  566,  566,  566,  566,  566,  566,  566,  567,  567,
      567,  567,  567,  567,  568,  569,  570,  571,  572,  573,
      574,  575,  576,  576,  577,  578,  579,  580,  581,  582,
      583,  584,  585,  586,  587,  588,  588,  588,  589,  590,

      590,  591,  591,  591,  591,  592,  593,  593,  594,  595,
      595,  596,  596,  596,  596,  596,  596,  596,  597,  597,
      598,  599,  600,  601,  602,  602,  602,  603,  603,  604,
      604,  604,  604,  604,  604,  604,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  606,  607,  608,  608,  608,  609,  609,
      610,  610,  610,  610,  610,  610,  610,  610,  611,  612,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  614,
      615,  616,  619,  620,  621,  621,  622,  623,  624,  624,

      625,  628,  629,  630,  631,  632,  633,  634,  634,  634,
      635,  636,  637,  637,  637,  637,  638,  638,  639,  640,
      641,  641,  641,  642,  642,  642,  642,  642,  642,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      644,  644,  644,  644,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  646,  646,  646,
      646,  646,  646,  647,  647,  647,  648,  648,  648,  648,
      648,  648,  649,  651,  652,  653,  654,  655,  656,  658,
      659,  660,  661,  662,  662,  662,  663,  664,  664,  664,
      664,  665,  665,  665,  665,  665,  665,  665,  665,  665,

      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  666,  666,  666,
      666,  666,  667,  668,  669,  670,  671,  672,  673,  674,
      675,  675,  675,  676,  677,  677,  677,  677,  678,  678,
      678,  678,  678,  678,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  680,  680,  680,  680,  680,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,

      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  682,  683,  684,  685,  686,  687,  688,
      689,  689,  689,  690,  691,  691,  691,  691,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  693,  694,  694,  694,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  696,  697,  698,
      699,  700,  701,  702,  704,  705,  706,  708,  710,  711,
      712,  713,  715,  716,  717,  718,  719,  720,  721,  722,

      723,  724,  725,  725,  725,  725,  725,  725,  725,  726,
      727,  728,  729,  730,  730,  730,  730,  730,  730,  731,
      732,  733,  734,  735,  736,  737,  738,  739,  740,  741,
      742,  742,  742,  743,  744,  745,  746,  747,  748,  749,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  751,
      751,  751,  752,  753,  754,  754,  755,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  757,  757,
      758,  758,  758,  758,  758,  759,  759,  759,  761,  761,
      763,  763,  764,  765,  765,  767,  767,  768,  768,  768,
      768,  768,  769,  770,  770

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,    8,    8,    1,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   20,   20,   20,   21,    1,   22,
        1,   23,    1,   24,   25,   26,   27,   28,   29,   27,
       30,   31,   32,   27,   27,   33,   34,   27,   35,   36,
       27,   37,   27,   38,   39,   27,   27,   27,   27,   27,
       40,   41,   42,    1,   43,    1,   44,   45,   46,   47,

       48,   49,   50,   51,   52,   27,   53,   54,   55,   56,
       57,   58,   27,   59,   60,   61,   62,   63,   27,   64,
       65,   27,   66,    1,   67,   68,    1,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,

       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69
    } ;

static yyconst flex_int32_t yy_meta[70] =
    {   0,
        1,    2,    3,    4,    5,    1,    1,    6,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   16,   16,
       17,    6,   18,   19,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,    1,
       21,    1,   22,   20,   20,   20,   20,   20,   20,   20,
       20,   23,   20,   20,   20,   24,   20,   20,   20,   20,
       20,   20,   20,   20,   20,    6,   25,   26,   27
    } ;

static yyconst flex_int16_t yy_base[1305] =
    {   0,
        0,    0,    0,   68,   88,  156, 4598, 4597,  224,    0,
      293,    0,  362,  430,  498,  566,  634,    0,  703,    0,
       72,   75,  100,  111,  772,  840,  908,    0,  977,    0,
     1046,    0, 1115,    0,   74,  105, 1184,    0,  171,  178,
     1253,    0,  130,  146,  377,  402,   82,   98, 1322,    0,
      407,  418,  179,  372,  452,  453,  103,  128, 1391,    0,
      513,  522,  135,  144, 1460,    0, 1529,    0,  384,  421,
      487,  489, 1598,    0,  446,  476,  538,  581, 1667,    0,
      147,  172, 4599, 7799, 7799,  589,  540, 4590, 4587, 4569,
      585, 1731, 1786,  191, 1847,  785,   69,  119,  184,  863,

      449, 7799, 7799, 4585,  374,  376, 1736, 4585, 7799, 7799,
     7799,    0,  104,  483, 7799,  813,  867, 1795, 1816, 4565,
     1740,  554,  612, 7799, 7799, 4578,  786,  814, 4561, 1856,
     7799, 7799, 4576, 1764, 1807, 1859, 7799, 1862, 1841, 1914,
     1918, 1938, 4561, 1946,  819, 7799, 7799,    0, 1769, 7799,
     7799, 4574, 1923, 7799, 7799, 4573, 1950, 7799, 7799, 4572,
     1734, 1785, 1955, 7799, 7799,    0, 1998, 1972, 7799, 1976,
     2006, 2021, 2029, 4557, 2044, 1985,  887, 7799, 7799,    0,
     4561, 2038, 7799, 4560, 2049,    0, 7799, 2053, 7799, 7799,
        0, 4532,  477, 7799, 4532, 2053, 2120, 7799,    0, 4524,

     7799,  476, 7799, 4559, 4519,    0, 7799, 7799, 4543, 4547,
     4508,   79, 7799, 7799, 2061, 7799, 7799,    0, 2065, 7799,
     1904, 7799, 4511,    0, 7799, 7799,   24,  501,    0, 7799,
     7799,  500, 2026, 7799, 7799, 2077, 7799, 7799,    0, 2088,
        0, 7799, 7799, 7799, 7799, 2096, 7799, 7799, 2104, 7799,
     7799,    0,  124, 4510, 7799, 7799,    0,  178, 4509,    0,
     7799, 4502, 4501, 7799, 7799,    0, 4505,    0, 7799, 4532,
     4497,    0, 7799, 7799, 4468,  148, 7799, 7799,    0, 4491,
        0, 7799, 4490, 1980, 2181, 2242, 2100, 2108, 4488, 4523,
     7799,    0, 4507, 4503,    0, 7799, 7799, 2310, 4502,  212,

     4510,  133,  167,  566,  372,  430, 2113,  356,  441, 4476,
     4461, 7799,  487, 2378, 4453, 4453, 4466, 4452,  552,  418,
     4442, 7799, 7799,    0, 2140, 1896, 2083, 1927, 2125, 2130,
     2143, 2160, 2165, 2221,  529,  618,  626,  879,  622,  806,
      898, 7799, 1744, 1945, 4468, 7799, 2158, 1743, 2161, 1812,
     7799, 2177, 4468, 7799,  395, 4461,  804, 4443, 1836, 7799,
     4409, 2211, 2268, 4436, 2276, 2253, 2291, 2337, 2352, 1884,
     7799, 4377, 2357, 2386,    0, 4420, 7799, 2179, 1819, 2222,
     2114, 7799, 2353, 4419, 4399, 2376, 2018, 2387, 7799, 4413,
     2296, 7799, 2395, 2418, 2422, 4398, 2448, 2456, 2471, 2479,

     2489,    0, 2499, 2509, 2519, 1989,    0, 2300, 7799, 4364,
     4410, 7799, 2310, 7799, 4362, 4408, 7799, 2362, 7799, 4360,
     4406, 7799, 2446, 2170, 2509, 2379, 7799, 2515, 2539, 2549,
        0, 2559, 4391, 2579, 2427, 7799, 4357, 2569, 2599, 4389,
     2607, 2622, 2627, 2637, 2645, 2532, 7799, 4355, 2660, 2668,
        0, 4391, 4392, 4384, 2584, 7799, 4342, 4378, 4342, 2589,
     7799, 4336,    0, 2616, 7799, 4334,    0, 4333, 1810, 7799,
     4345, 4342, 7799, 4375, 2632, 7799, 4329,    0, 4328, 1931,
     4374, 4367, 7799, 4316,    0, 7799, 7799, 4312, 4313, 2649,
     7799, 4311,    0, 2654, 7799, 4310, 2676, 7799, 4319, 4307,

        0,   80, 4311, 4305,    0, 4302, 4308, 4311,  402, 4295,
     2680, 7799, 4294,    0, 2684, 7799, 4290,    0, 2688, 7799,
     4288, 2692, 7799, 4287,  816, 4329,  837, 4314, 4280, 2079,
     4321, 2130, 4279, 4245,    0, 4284,  544,    0, 4238,    0,
      195, 4232,    0,    0, 4206,    0, 4194,    0, 4193, 4197,
     4191, 4223,    0, 4227, 7799, 7799, 4218, 2717, 4217, 4224,
     7799, 4224, 4185, 4168, 2205,  497, 2463, 7799,  423,  762,
      841, 4174, 4172,  831, 2697,    0,  900, 2404, 1771, 2302,
     7799, 7799,    0, 2696, 2698, 2612,    0,    0, 2702, 2710,
     2706, 2708, 2748, 2760, 2764, 1968, 2752, 2333, 2757, 2759,

     2774,    0, 4172, 4161,    0, 2776, 2793, 2802, 2804, 2812,
     2815, 4201, 2777, 2794, 4159, 4158, 4157, 2823, 2825, 2831,
     2856, 2876, 2884, 2904, 4156, 4155,    0,    0, 4190, 4153,
     4143, 4143, 4142, 4140,    0,    0, 4135, 4130, 4127, 4131,
     4124, 4121, 4118, 4117, 4105, 4116, 4106, 4106, 4106, 2801,
     4067, 3455, 3453, 3445, 3444, 3433, 3424, 3423,    0, 3417,
        0, 3413, 7799, 7799, 7799, 3408, 3429, 2343, 3389,    0,
     3374, 3370, 3366, 2074, 3364, 3403,    0, 2903, 2370, 7799,
     3351, 3335, 3359, 2544,  850,  752, 3326, 3311, 2435, 7799,
        0, 2927, 2811, 2995, 3290, 2996, 2997, 2866, 3307, 3002,

     3058, 3043, 3001, 3044, 3050, 3081, 2994, 3291, 3290, 3000,
     3072, 7799, 3283, 3282, 3275, 3080,    0, 3114, 3135, 3023,
     3274, 3273, 3307, 3265, 3251, 3248, 3241, 3237,    0, 3230,
     3228, 3226, 3111, 3212, 3211, 3207, 3205, 3207, 3202, 7799,
     3182, 3164, 3159, 7799, 3146, 3129, 3106, 3091, 3085, 3075,
     3073, 3064, 3059, 3058, 3054, 3048, 2591, 3036, 3034, 2983,
     2982, 2978, 7799, 3014, 3007, 7799, 2985, 2969, 1820, 2960,
     2970,    0, 2714, 3003, 3031, 2947, 3107, 3101, 3175, 3159,
     3167, 3199, 3189, 2878, 2873, 3197, 3205, 2869, 2864, 2863,
     3208, 3255, 2862, 2851, 2844, 2836, 2836, 2834, 2825, 2821,

     2815, 2814, 2798, 2794, 2789, 2805,   82, 2776, 2782, 2769,
     2774, 2763, 2754, 2746, 2736, 2732, 2716, 2719,  546, 2700,
     2702, 2696,  811, 2698, 2696, 2694, 2688, 2687, 2674, 2672,
     2666, 2661, 2648, 2644, 2640, 2636, 2664, 2617, 2630, 2615,
     2596, 3106, 3141, 7799, 3158, 3207, 3231, 3229, 3230, 3262,
     2600, 2599, 3264, 3271, 2588, 2577, 2568, 3279, 3323, 3331,
     2562, 2561, 2560, 7799, 2550, 2531, 2530, 2521, 2520, 2510,
     2498, 2479, 2484, 2477, 2477, 2483, 2478, 2460, 2463, 2463,
     2462, 2461, 2453, 7799, 2448,    0,    0, 2451, 7799, 2428,
     2889, 2426, 2422, 2432, 2426, 2425, 2411, 2410, 2403, 2402,

     2397, 2396, 2390, 2388, 2370, 2369, 2368, 2353, 2343, 2326,
     2311, 2298, 3245, 3260, 3297, 3296, 3312, 3313, 3317, 3343,
     2288, 2284, 3346, 3352, 2278, 2271, 2270, 3355, 2269, 2247,
     2229, 2228, 2227, 2223, 2217, 2216, 2209, 2219,    0, 2207,
     2212, 2202, 2197, 2208, 2195, 2187, 2185, 2183, 2176,    0,
     7799, 7799, 2166, 2173, 7799, 2175, 2156, 2136, 2132, 2126,
     2122, 2121, 2117, 2110, 2109, 2095, 2075, 2074, 2067, 2053,
     2028, 2014, 2012, 2006, 2034, 2030, 3166, 3035, 3372, 3376,
     3378, 3383, 3389, 2879, 7799, 7799, 3382, 3392, 7799, 7799,
     7799, 3404, 7799, 7799, 7799, 7799, 7799, 7799, 7799, 7799,

     7799, 7799, 1987, 1972, 1973, 1964, 1970, 1957, 7799, 7799,
     7799, 7799, 7799, 1953, 1947, 2896, 1943, 1936, 7799, 7799,
     7799, 7799, 7799, 7799, 7799, 7799, 7799, 7799, 7799, 7799,
     1960, 1923, 7799, 7799, 3384, 3390, 3426,  569, 3395, 3399,
     1888, 1874, 1870, 1858, 1849, 1848, 1837, 1830, 7799, 1817,
     1796, 7799, 3264, 3405, 1850, 3432, 3433, 1753, 1747, 1731,
     1721, 1688,  828,  841, 3007,  828,  799, 3445,  347, 3446,
      754,  497,  480,  475, 7799, 3143,  370, 3145,  563, 3451,
      333, 3308, 7799,  148, 3452,  751, 3456,   63, 1713, 3457,
     1706, 7799, 3461, 7799, 3502, 3529, 3556, 3583, 3610, 3637,

     3664, 3691, 3718, 3745, 3772, 3799, 3826, 3853, 3880, 3907,
     3934, 3961, 3988, 4015, 4042, 4069, 4096, 4123, 4144, 4161,
     4177, 4196, 4212, 4231, 4257, 4274, 4301, 4309, 4323, 4349,
     4375, 4401, 4428, 4445, 4472, 4489, 4515, 4541, 4567, 4582,
     4609, 4636, 4663, 4680, 4688, 4714, 4740, 4766, 4792, 4800,
     4814, 4829, 4856, 4871, 4898, 4925, 4940, 4967, 4994, 5009,
     5036, 5063, 5078, 5105, 5113, 5127, 5135, 5149, 5176, 5191,
     5218, 5245, 5260, 5287, 5309, 5335, 5343, 5355, 5372, 5384,
     5408, 5416, 3448, 5432, 5455, 5479, 5496, 5513, 5540, 5554,
     5575, 5601, 5627, 5653, 5665, 5692, 5709, 5726, 5753, 5770,

     5787, 5813, 5839, 5865, 5892, 5918, 5933, 5960, 5987, 6014,
     6031, 6048, 6074, 6082, 6108, 6134, 6160, 6186, 6198, 6212,
     6233, 6248, 6275, 6290, 6317, 6344, 6365, 6380, 6407, 6434,
     6449, 6476, 6503, 6518, 6545, 6559, 6580, 6594, 6615, 6642,
     6657, 6684, 6711, 3458, 6726, 6753, 6765, 6792, 6807, 6821,
     6845, 6872, 6898, 3466, 6921, 6945, 3471, 4132, 6971, 6985,
     7002, 7010, 7022, 7039, 7056, 7073, 7090, 7117, 7143, 7160,
     7177, 7203, 7229, 7255, 7267, 7275, 7289, 7297, 7309, 7336,
     7344, 7352, 3460, 7379, 7394, 7410, 7434, 4137, 7460, 7484,
     7492, 7515, 7529, 7546, 7563, 7571, 7586, 7610, 7636, 7663,

     7690, 7717, 7744, 7771
    } ;

static yyconst flex_int16_t yy_def[1305] =
    {   0,
     1095, 1095, 1094,    3, 1096, 1096, 1097, 1097, 1094,    9,
     1094,   11, 1098, 1098, 1099, 1099, 1094,   17, 1094,   19,
     1100, 1100, 1101, 1101, 1102, 1102, 1094,   27, 1094,   29,
     1094,   31, 1094,   33, 1103, 1103, 1094,   37, 1104, 1104,
     1094,   41, 1105, 1105, 1106, 1106, 1107, 1107, 1094,   49,
     1108, 1108, 1109, 1109, 1110, 1110, 1111, 1111, 1094,   59,
     1112, 1112, 1113, 1113, 1094,   65, 1094,   67, 1114, 1114,
     1114, 1114, 1094,   73, 1115, 1115, 1116, 1116, 1094,   79,
     1117, 1117, 1094, 1094, 1094, 1094, 1094, 1118, 1119, 1120,
     1121, 1094, 1122, 1123, 1124, 1094, 1094, 1120, 1120, 1121,

     1120, 1094, 1094, 1125, 1126, 1126, 1126, 1127, 1094, 1094,
     1094, 1128, 1129, 1094, 1094, 1094, 1094, 1130, 1130, 1094,
     1131, 1094, 1132, 1094, 1094, 1133, 1134, 1134, 1094, 1134,
     1094, 1094, 1135, 1136, 1136, 1136, 1094, 1136, 1094, 1094,
     1137, 1137, 1094, 1138, 1139, 1094, 1094, 1140, 1094, 1094,
     1094, 1141, 1094, 1094, 1094, 1142, 1094, 1094, 1094, 1143,
     1144, 1144, 1144, 1094, 1094, 1145, 1146, 1094, 1094, 1094,
     1094, 1147, 1147, 1094, 1148, 1094, 1149, 1094, 1094, 1150,
     1151, 1094, 1094, 1152, 1094, 1153, 1094, 1094, 1094, 1094,
     1154, 1094, 1155, 1094, 1156, 1094, 1094, 1094, 1157, 1094,

     1094, 1094, 1094, 1158, 1094, 1159, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1160, 1094, 1094,
     1094, 1094, 1094, 1161, 1094, 1094, 1094, 1094, 1162, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1163, 1094,
     1164, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1165, 1166, 1094, 1094, 1094, 1167, 1168, 1094, 1169,
     1094, 1094, 1094, 1094, 1094, 1170, 1094, 1171, 1094, 1094,
     1094, 1172, 1094, 1094, 1094, 1094, 1094, 1094, 1173, 1094,
     1174, 1094, 1094, 1094, 1175, 1175, 1094, 1094, 1094, 1176,
     1094, 1177, 1178, 1179, 1180, 1094, 1094, 1181, 1179, 1094,

     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1182, 1175, 1182,  314,  314,  314,  314,  314,
      314, 1094, 1094, 1183, 1184, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1179, 1179, 1186, 1094, 1187, 1188, 1187, 1094,
     1094, 1187, 1189, 1094, 1190, 1191, 1190, 1094, 1094, 1094,
     1094, 1094, 1192, 1094, 1192, 1193, 1194, 1192, 1193, 1094,
     1094, 1094, 1194, 1194, 1195, 1196, 1094, 1197, 1198, 1197,
     1094, 1094, 1197, 1199, 1094, 1200, 1201, 1200, 1094, 1199,
     1094, 1094, 1200, 1094, 1202, 1094, 1202, 1203, 1204, 1202,

     1094, 1205, 1203, 1204, 1204, 1206, 1207, 1094, 1094, 1094,
     1208, 1094, 1094, 1094, 1094, 1209, 1094, 1094, 1094, 1094,
     1210, 1094, 1211, 1212, 1211, 1094, 1094, 1211, 1213, 1094,
     1214, 1213, 1094, 1215, 1094, 1094, 1094, 1094, 1216, 1094,
     1216, 1217, 1218, 1216, 1217, 1094, 1094, 1094, 1218, 1218,
     1219, 1220, 1221, 1220, 1094, 1094, 1094, 1222, 1094, 1094,
     1094, 1094, 1223, 1094, 1094, 1094, 1224, 1094, 1225, 1094,
     1226, 1094, 1094, 1227, 1094, 1094, 1094, 1228, 1094, 1094,
     1229, 1229, 1094, 1094, 1230, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1231, 1094, 1094, 1094, 1094, 1094, 1094, 1094,

     1232, 1094, 1094, 1094, 1233, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1234, 1094, 1094, 1094, 1235, 1094, 1094,
     1094, 1094, 1094, 1094, 1236, 1237, 1236, 1094, 1094, 1238,
     1239, 1238, 1094, 1094, 1240, 1094, 1094, 1241, 1094, 1242,
     1094, 1094, 1243, 1244, 1094, 1245, 1094, 1246, 1094, 1094,
     1094, 1247, 1248, 1249, 1094, 1094, 1250, 1251, 1250, 1249,
     1094, 1094, 1094, 1094, 1094, 1094, 1252, 1094, 1094, 1094,
     1094, 1094, 1094, 1253, 1253, 1254, 1094, 1255, 1255, 1255,
     1094, 1094, 1256, 1255, 1255, 1255, 1257, 1258, 1259, 1259,
     1259, 1259, 1259, 1259, 1259, 1094, 1094, 1094, 1260, 1260,

     1261, 1262, 1094, 1094, 1263, 1264, 1264, 1265, 1266, 1266,
     1267, 1268, 1094, 1269, 1094, 1094, 1094, 1270, 1270, 1271,
     1272, 1273, 1274, 1274, 1094, 1094, 1275, 1276, 1277, 1094,
     1094, 1094, 1094, 1094, 1278, 1279, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1280, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1281, 1094,
     1282, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1283,
     1094, 1094, 1094, 1094, 1094, 1284, 1285, 1286, 1094, 1094,
     1094, 1094, 1287, 1287, 1094, 1094, 1094, 1094, 1094, 1094,
     1288, 1094, 1289, 1289, 1290, 1289, 1289, 1289, 1291, 1292,

     1292, 1292, 1292, 1292, 1292, 1292, 1293, 1094, 1094, 1294,
     1295, 1094, 1094, 1094, 1094, 1271, 1296, 1272, 1272, 1273,
     1094, 1094, 1277, 1094, 1094, 1094, 1094, 1094, 1279, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1297, 1286, 1094, 1094, 1094, 1094, 1094,
     1094, 1298, 1298, 1289, 1289, 1094, 1289, 1292, 1291, 1292,
     1292, 1292, 1293, 1094, 1094, 1294, 1295, 1094, 1094, 1094,
     1271, 1299, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,

     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1300, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1297, 1094, 1094, 1094,
     1094, 1289, 1289, 1094, 1289, 1292, 1292, 1292, 1292, 1293,
     1094, 1094, 1294, 1295, 1094, 1094, 1094, 1271, 1299, 1299,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1301, 1302, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,

     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1289, 1289, 1289, 1292, 1292, 1292, 1292, 1293,
     1094, 1094, 1294, 1295, 1094, 1094, 1094, 1271, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1303, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1304,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1289, 1289, 1289, 1292,
     1292, 1292, 1292, 1293, 1094, 1094, 1294, 1295, 1094, 1094,
     1094, 1271, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,

     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1289, 1289, 1094, 1291, 1292, 1292,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1289, 1289, 1291, 1292, 1292, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1289, 1291, 1292,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1289, 1291, 1292,
     1094, 1094, 1094, 1094, 1094, 1291, 1094, 1094, 1291, 1094,
     1291, 1094, 1291,    0, 1094, 1094, 1094, 1094, 1094, 1094,

     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,

     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,

     1094, 1094, 1094, 1094
    } ;

static yyconst flex_int16_t yy_nxt[7869] =
    {   0,
       85,   86,   87,   85,   86,   85,   88,   85,   89,   85,
       85,   85,   90,   85,   90,   91,   85,   90,   90,   90,
       85,   92,   85,   93,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   85,
       95,   85,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   85,   85,   85,   85,   96,
      339,  502,   96,  339,  151,  503,  187,  151,  152,   97,
       98,  152,   99,  100,  214,   84,  101,  101,  102,  102,
      103,  102,  102,  102,  104,  102,  102,  102,  102,  102,

      214,  102,  155,  102,  106,  235,  156,  187,  106,  102,
      102,  102,  153,  155,  188,  153,   84,  156, 1090,  356,
      339,  489,  215,  339,  358,  875,  488,  102,  107,  102,
      235,  202,  203,  645,  202,  646,  204,  248,  215,  526,
      157,  876,  295,  236,  528,  188,  248,  202,  203,  282,
      202,  157,  204,  102,  102,  102,  102,  102,  103,  102,
      102,  102,  104,  102,  102,  102,  102,  102,  236,  102,
      205,  102,  106,  194,  282,  249,  106,  102,  102,  102,
      194,  225,  195,  226,  249,  340,  205,  283,  340,  195,
      545,  563,  564,  531,  196,  102,  107,  102,  533,  565,

      667,  196,  227,  294, 1088,  294,  294,  295,  294,  294,
      294,  197,  283,  561,  295,  544,  561,  668,  197,  228,
      565,  102,  102,  102,  110,  110,  111,  110,  110,  110,
      110,  110,  112,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  110,  114,  110,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  110,
      110,  110,  113,  115,  116,  117,  116,  116,  115,  115,

      115,  118,  115,  115,  115,  115,  115,  115,  119,  115,
      115,  115,  115,  120,  115,  115,  115,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  115,  122,  115,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  115,  115,
      123,  121,  124,  124,  125,  124,  124,  124,  126,  124,
      124,  124,  124,  124,  225,  124,  226,  124,  128,  207,
      571,  208,  128,  129,  124,  124,  261,  588,  209,  348,
      349, 1094,  349,  210,  349,  227,  349,  939, 1079,  571,

      211,  124,  130,  124,  207,  566,  208,  262,  221,  222,
      356,  221,  228,  209,  349,  358,  349,  212,  210,  221,
      222, 1084,  221,  261,  262,  211,  566,  124,  124,  124,
      124,  124,  125,  124,  124,  124,  126,  124,  124,  124,
      124,  124,  212,  124,  262,  124,  128,  223,  269,  652,
      128,  129,  124,  124,  230,  230,  231,  231,  223,  685,
      270,  262,  565,  653,  343,  584,  344,  344,  344,  124,
      130,  124,  295,  565,  585,  232,  232,  480,  269,  470,
      480,  685,  481,  565,  359,  360,  271,  359,  471,  261,
      270,  261,  233,  233,  565,  124,  124,  124,  131,  131,

      132,  131,  131,  131,  133,  131,  131,  131,  131,  131,
      263,  131,  263,  131,  135,  242,  271,  472,  135,  136,
      137,  131,  243,  244,  242,  361,  565,  263, 1082,  263,
      339,  243,  244,  339,  939,  575,  245,  131,  138,  131,
      273,  287,  288,  504,  287,  245,  565,  506,  502,  274,
     1081,  507,  503,  246,  576,  370,  371,  508,  370,  509,
      581,  275,  246,  131,  131,  131,  131,  131,  132,  131,
      131,  131,  133,  131,  131,  131,  131,  131,  276,  131,
      289,  131,  135,  273,  565,  664,  135,  136,  137,  131,
      284,  582,  274,  284,  889,  296,  372,  294,  297,  294,

      298,  890,  565,  588,  275,  131,  138,  131,  295, 1094,
      665, 1055,  285,  373,  373,  373,  373,  583, 1086,  340,
      374,  276,  340,  339,  565,  300,  339,  341,  342,  286,
      341,  131,  131,  131,  115,  139,  140,  139,  139,  115,
      115,  115,  141,  115,  115,  115,  115,  115,  115,  142,
      115,  115,  115,  115,  143,  115,  115,  115,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  115,  122,  115,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  115,

      115,  145,  144,  146,  146,  147,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  146,  149,  146,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  146,  146,
      146,  148,  158,  158,  159,  158,  158,  158,  160,  158,
      158,  158,  158,  158,  769,  158,  334,  158,  162,  334,
      565,  588,  162,  158,  158,  158,  335,  335, 1089,  336,

      337,  379,  380,  338,  338,  769,  380,  340,  285,  565,
      340,  158,  163,  158,  362,  362,  362,  362,  939,  356,
      404,  404,  404,  404,  358,  286,  380,  405,  363, 1094,
      380,  526,  689,  364,  380,  689,  528,  158,  158,  158,
      158,  158,  159,  158,  158,  158,  160,  158,  158,  158,
      158,  158,  526,  158,  380,  158,  162,  528,  894, 1077,
      162,  158,  158,  158,  341,  342,  686,  341,  362,  362,
      362,  362,  895,  296,  565,  294,  297,  294,  298,  158,
      163,  158,  363, 1076, 1074,  686,  295,  364,  449,  449,
      449,  449,  939,  565,  596,  450,  597,  597,  597,  341,

      342,  577,  341,  300,  577,  158,  158,  158,  164,  164,
      165,  164,  164,  164,  164,  164,  166,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  164,  168,  164,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  164,  164,  164,  167,  169,  170,  171,
      170,  170,  169,  169,  169,  172,  169,  169,  169,  169,
      169,  169,  173,  169,  169,  169,  169,  174,  169,  169,

      169,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  169,  176,  169,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  169,  169,  177,  175,  178,  178,  179,  178,
      178,  178,  178,  178,  180,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  178,  182,  178,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,

      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  178,  178,  178,  181,   84,   84,  183,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,   84,  185,   84,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
       84,   84,   84,  184,  189,  189,  190,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,

      189,  189,  189,  189,  189,  189,  189,  189,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  189,  192,  189,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  189,
      189,  189,  191,   84,   84,  198,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,   84,  200,   84,  199,  199,  199,  199,  199,

      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,   84,   84,
       84,  199,  216,  216,  217,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  216,  219,  216,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  216,  216,  216,
      218,  237,  237,  238,  237,  237,  237,  237,  237,  237,

      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      237,  240,  237,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  237,  237,  237,  239,
      250,  250,  251,  250,  250,  250,  250,  250,  252,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  250,

      254,  250,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  250,  250,  250,  253,  255,
      255,  256,  255,  255,  255,  255,  255,  257,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  255,  259,
      255,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  255,  255,  255,  258,  264,  264,

      265,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  264,  267,  264,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  264,  264,  264,  266,  277,  277,  278,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  279,  279,  279,  279,  279,  279,  279,  279,  279,

      279,  279,  279,  279,  279,  279,  277,  280,  277,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  277,  277,  277,  279,  301,  350,  351, 1073,
      350,  362,  362,  362,  362,  598,  588,  302,  598,  424,
      425, 1094,  349,  588,  425,  363,  349, 1091,  303,  600,
      364,  304,  305,  600, 1093,  306,  307,  295,  308,  309,
      408,  409,  577,  408,  425,  577,  349,  303,  352,  387,
      388,  304,  305,  600,  388,  939,  389,  306,  307,  310,
      311,  308,  309,  312,  312,  939,  362,  362,  362,  362,

     1094,  425, 1072,  365,  388,  425, 1071,  312,  312,  313,
      363,  410,  470,  350,  351,  364,  350,  368,  368,  368,
      368,  471, 1094,  388,  365,  425,  315,  388,  693, 1094,
      316,  363,  317,  318,  319,  607,  364,  359,  360,  607,
      359, 1067,  394,  394,  394,  394,  320,  388,  565,  321,
      472,  322,  323,  324,  312,  312,  395,  381,  382,  607,
      381,  396,  367,  391,  392,  390,  391,  565,  312,  312,
      315, 1094,  380, 1066, 1094,  388,  380, 1094,  388,  388,
     1065,  389,  388,  367, 1094,  370,  371,  313,  370,  327,
      588,  328, 1064,  329,  330,  331,  380,  577,  383,  388,

      577, 1063,  388, 1069,  393,  497,  498,  332,  497, 1062,
      333, 1061,  322,  323,  324,  394,  394,  394,  394,  394,
      394,  394,  394, 1060,  413,  414,  397,  413,  577,  395,
     1059,  577,  480,  395,  396,  480,  588,  481,  396,  400,
      400,  400,  400, 1058,  499, 1033,  397,  401,  394,  394,
      401,  418,  419,  395,  418,  402,  426,  427,  396,  426,
      343,  395,  344,  344,  344,  415,  396,  588,  295,  598,
     1094,  425,  598,  435,  436,  425,  435,  438,  438,  438,
      438,  284, 1052, 1051,  284,  399,  446,  447,  590,  446,
      613,  439,  420,  613, 1050,  425,  440,  428,  402,  430,

      430,  430,  430,  285, 1048,  399,  431,  438,  438,  438,
      438, 1047, 1046, 1045,  437,  432,  432,  432,  433, 1044,
      286,  439,  438,  438,  438,  438,  440,  448, 1043,  441,
      444,  444,  444,  444,  610, 1042,  439,  441,  610,  455,
      456,  440,  455, 1041,  439,  438,  438,  438,  438,  440,
      460,  461, 1034,  460,  464,  465, 1033,  464,  610,  439,
      473,  473,  490,  491,  440,  490,  494,  495,  510,  494,
     1032, 1031,  288,  506,  473,  473,  474,  507,  511,  512,
      457,  511,  690,  508,  577,  509, 1030,  577,  443,  515,
      516,  462,  515,  473,  531,  466,  443,  519,  520,  533,

      519,  287,  288,  492,  287,  522,  523,  496,  522,  287,
      288, 1029,  287,  690,  567,  381,  382,  567,  381,  513,
      473,  475,  476,  588,  475, 1028,  577,  473,  473,  577,
      517,  577, 1027, 1026,  577,  568,  589,  569,  521,  690,
      289,  473,  473,  473,  577,  531,  524,  577,  289,  570,
      533,  581,  294, 1025,  294,  294,  569,  294,  294,  294,
      474,  577,  477,  295,  577,  588,  577, 1024, 1023,  577,
      588,  570,  591,  348,  349, 1022, 1094,  349,  349, 1021,
     1020,  349,  582,  588, 1019,  592,  619,  473,  312,  312,
      619, 1018,  348,  349,  379,  380, 1017,  349,  349,  380,

      588,  349,  312,  312,  550,  588,  567,  593,  583,  567,
      619, 1016,  362,  362,  362,  362,  594,  349, 1015,  380,
     1014,  312,  334,  595, 1013,  334,  363,  568,  318,  319,
      601,  364,  335,  335,  498,  336,  337, 1094,  380,  338,
      338, 1011,  380, 1010,  285, 1009,  322,  323,  324,  312,
      312, 1008, 1007, 1006,  362,  362,  362,  362, 1005, 1004,
     1003,  286,  380,  312,  312,  312,  939, 1001,  363,  368,
      368,  368,  368,  364, 1000,  999,  365, 1094, 1094, 1094,
     1094,  998,  550,  363, 1094,  997,  996,  995,  364,  318,
      319, 1094,  373,  373,  373,  373, 1094,  391,  392,  374,

      391,  408,  409,  577,  408,  994,  577,  322,  323,  324,
      555,  413,  414,  555,  413,  555,  555,  555,  555,  555,
      556,  555,  557,  555,  557,  558,  555,  993,  991,  990,
      555,  555,  555,  560,  598,  367,  989,  598,  368,  368,
      368,  368,  986, 1094,  757,  365,  985,  757,  694,  555,
      555,  555,  363,  362,  362,  362,  362,  364,  373,  373,
      373,  373,  976,  418,  419,  374,  418,  363,  379,  380,
      975,  766,  364,  380,  766,  555,  555,  555,  555,  577,
      426,  427,  577,  426,  974, 1094, 1094, 1094, 1094, 1094,
     1094,  387,  388,  380, 1094,  973,  388,  972,  389, 1094,

     1094, 1094, 1094,  388,  367,  577,  608,  388,  577, 1094,
      387,  388,  971,  970,  969,  388,  388,  389, 1094,  394,
      394,  394,  394,  400,  400,  400,  400,  388,  435,  436,
      397,  435,  968,  395,  967,  388,  689,  395,  396,  689,
      966,  965,  396, 1094, 1094, 1094,  964,  963,  611, 1094,
     1094, 1094, 1094,  692,  962,  961, 1094,  401,  394,  394,
      401,  424,  425, 1094,  684,  402,  425,  684, 1094,  960,
      959,  395,  404,  404,  404,  404,  396,  958,  957,  405,
      400,  400,  400,  400,  956,  568,  425,  397,  954,  399,
      401,  394,  394,  401,  395,  953,  950,  949,  402,  396,

      401,  394,  394,  401,  395,  948,  947,  946,  402,  396,
      404,  404,  404,  404,  395, 1094,  945,  405,  944,  396,
     1094, 1094, 1094, 1094, 1094,  425,  943, 1094,  939,  425,
      424,  425,  942,  446,  447,  425,  446,  941,  940,  939,
      430,  430,  430,  430,  938,  684,  399,  431,  684,  425,
      430,  430,  430,  430,  937,  425,  432,  432,  432,  433,
      430,  430,  430,  430,  936,  935,  568,  431,  620,  433,
      438,  438,  438,  438,  934,  933,  432,  432,  432,  433,
      430,  430,  430,  430,  439,  455,  456,  431,  455,  440,
      460,  461,  757,  460,  932,  757,  623,  623,  623,  433,

      444,  444,  444,  444,  931,  930,  929,  441, 1094, 1094,
     1094, 1094,  927,  577,  439, 1094,  577,  464,  465,  440,
      464,  926, 1094,  438,  438,  438,  438, 1094,  449,  449,
      449,  449,  925,  475,  476,  450,  475,  439,  444,  444,
      444,  444,  440,  922,  921,  441,  438,  438,  438,  438,
      490,  491,  439,  490,  912,  494,  495,  440,  494,  698,
      439,  449,  449,  449,  449,  440,  443,  911,  450, 1094,
     1094, 1094, 1094,  910, 1094,  909, 1094,  497,  498,  677,
      497,  511,  512,  908,  511,  515,  516,  907,  515,  519,
      520,  906,  519,  522,  523,  905,  522,  577,  689,  577,

      577,  689,  577,  577,  443,  690,  577,  577,  904,  577,
      577,  577,  577,  903,  577,  773,  499,  555,  773,  902,
      555,  901,  555,  555,  555,  555,  555,  556,  555,  557,
      555,  557,  678,  555,  900,  899,  690,  555,  555,  555,
      560,  898,  588,  897,  697,  896,  588,  893,  588,  577,
      588,  892,  577,  700,  703,  696,  555,  679,  555,  701,
      891,  577,  690,  702,  577,  577,  888,  596,  577,  597,
      597,  597,  348,  600, 1094,  600,  887,  600,  613,  600,
      886,  613,  555,  555,  555,  555,  402,  885,  588,  348,
      349,  379,  607,  883,  349,  613,  607,  600,  613,  600,

      588,  882,  744,  402,  588,  744,  705,  704, 1094,  607,
      881,  706,  577,  607,  349,  577,  607,  379,  380,  387,
      610,  880,  380,  879,  610,  707,  389, 1094,  610,  878,
      387,  388,  610,  607, 1094,  388,  877,  389,  424,  619,
     1094,  619,  380,  619,  610,  619,  424,  425,  874,  873,
      872,  425,  610,  710,  871,  388,  745,  430,  430,  430,
      430,  870,  869,  619,  717,  619,  711,  577,  868,  774,
      577,  425,  867,  718,  718,  718,  433,  720,  720,  720,
      720,  866,  716,  865,  431,  430,  430,  430,  430,  864,
      955,  863,  431,  955,  348,  349,  433, 1049,  862,  349,

     1049,  623,  623,  623,  433,  430,  430,  430,  430,  861,
      857,  856,  431,  296,  777,  294,  855,  294,  765,  349,
      852,  623,  623,  623,  433,  851,  295,  772,  773,  772,
      772,  773,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  772,  772,  772,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  772,  772,  772,  772,  577,  577,  577,  577,

      577,  577,  577,  577,  577,  577,  577,  577, 1075,  348,
      349, 1075,  844,  841,  349,  379,  380,  296,  840,  294,
      380,  294,  765,  839,  720,  720,  720,  720,  838,  677,
      295,  431,  577,  836,  349,  577,  577,  835,  834,  577,
      380,  588,  588,  433,  577,  577,  775,  577,  577,  783,
      842,  577,  781,  692,  577,  786,  692,  778,  772,  773,
      772,  772,  773,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  577,  588,  588,  577,  843,  387,  388,  833,
      588,  832,  388, 1036,  389,  424,  425,  772,  779,  772,

      425,  780,  577,  831,  701,  577,  701,  577,  577,  830,
      577,  577,  388,  829,  828,  430,  430,  430,  430,  827,
      425,  588,  717,  772,  772,  772,  772,  787,  826,  782,
      825,  718,  718,  718,  433,  791,  430,  430,  430,  430,
      824,  588,  577,  717, 1083,  577, 1085, 1083,  846, 1085,
      823,  913,  718,  718,  718,  433,  803,  804,  845,  577,
      577,  805,  577,  577,  806,  807,  822,  577,  577,  808,
      577,  577,  821,  809,  810,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  588,

      577,  914,  820,  577,  348,  349,  847,  588,  577,  349,
      819,  577,  379,  380,  772,  772,  772,  380,  915,  818,
      387,  388,  848,  424,  425,  388, 1035,  389,  425,  349,
      577,  577,  577,  577,  577,  577,  850,  380,  817,  588,
      772,  772,  772,  772,  853,  388,  577,  588,  425,  577,
      849,  916,  854,  816,  815,  858,  430,  430,  430,  430,
      814,  577,  813,  717,  577,  577,  812,  811,  577,  588,
      588,  588,  859,  859,  859,  433,  917,  348,  349,  379,
      380,  802,  349,  801,  380,  800,  387,  388,  977,  918,
      919,  388,  799,  389,  424,  425,  798,  577,  577,  425,

      577,  577,  349,  797,  380,  796,  920,  978,  923, 1087,
      692,  388, 1087,  577,  577,  924,  577,  577,  577,  425,
      795,  577,  453,  928,  430,  430,  430,  430,  794,  793,
      790,  717,  430,  430,  430,  430,  588,  789,  788,  717,
      859,  859,  859,  433,  979,  785,  784,  588,  859,  859,
      859,  433,  588,  588,  980,  981,  776,  588,  348,  349,
      982,  379,  380,  349,  983,  771,  380,  387,  388,  770,
      424,  425,  388,  577,  389,  425,  577, 1037,  288,  577,
     1037,  568,  577,  349,  577,  577,  380,  577,  577,  768,
      577,  577,  388,  577,  577,  425,  577,  379,  380,  577,

      577,  984,  380,  577,  987,  767,  577,  387,  388,  577,
      988,  763,  388,  992,  389,  762, 1038,  761,  588,  424,
      425,  760,  380,  588,  425,  759,  692, 1037,  288,  588,
     1037, 1053,  388,  577,  577,  588,  577,  577, 1039,  588,
      758, 1040, 1056,  701,  425, 1054,  577,  577, 1068,  577,
      577,  668, 1085, 1085, 1057, 1085, 1085, 1087, 1092,  756,
     1087, 1092,  287,  288,  755,  287,  289,  587,  754,  587,
      587,  587,  588,  588,  753,  752, 1070,  670,  701,  670,
      670,  670,  670,  670,  751,  691,  588,  691,  691,  691,
      587,  588,  587,  587,  587,  750,  749,  748, 1078, 1080,

      747, 1038,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,

      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  161,  161,  161,  161,  161,  161,  161,  161,  161,

      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  206,

      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,

      224,  224,  224,  224,  224,  224,  224,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,

      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  281,  281,  281,  281,

      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  290,  290,  746,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      293,  699,  743,  699,  699,  699,  691,  742,  691,  691,
      691,  741,  739,  293,  738,  293,  293,  293,  737,  736,
      293,  294,  735,  294,  294,  734,  294,  733,  732,  294,
      294,  731,  294,  294,  294,  299,  730,  299,  299,  299,
      299,  728,  299,  727,  726,  299,  299,  299,  299,  299,

      299,  314,  314,  725,  724,  453,  722,  721,  715,  714,
      713,  712,  709,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  325,  708,  325,  325,  688,  325,  687,  682,
      325,  325,  681,  325,  325,  325,  326,  326,  680, 1094,
      295,  295,  677,  553,  675,  674,  673,  672,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  345,  345,  671,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  347,  669,  347,  347,  347,  347,
      347,  666,  663,  347,  347,  347,  347,  347,  662,  531,

      347,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  355,  661,
      355,  355,  355,  660,  526,  355,  357,  659,  357,  357,
      658,  657,  357,  656,  357,  357,  357,  655,  654,  357,
      366,  366,  366,  366,  651,  366,  650,  649,  648,  647,
      644,  500,  366,  643,  642,  366,  641,  640,  366,  639,
      366,  366,  366,  483,  366,  366,  369,  369,  369,  369,
      483,  638,  637,  635,  477,  472,  634,  633,  369,  632,
      369,  369,  631,  459,  369,  630,  369,  369,  369,  453,

      628,  369,  375,  375,  375,  375,  453,  375,  626,  439,
      625,  622,  422,  617,  417,  616,  412,  615,  395,  385,
      375,  389,  375,  375,  375,  385,  377,  375,  376,  376,
      604,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  378,  363,  378,  378,  378,
      378,  378,  603,  356,  378,  378,  378,  378,  378,  602,
      354,  378,  384,  384,  346,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  386,

      586,  386,  386,  386,  386,  386,  386,  580,  386,  386,
      386,  386,  386,  579,  578,  386,  398,  398,  398,  398,
      576,  398,  573,  572,  562,  295,  295,  553,  398,  291,
      551,  398,  549,  547,  398,  544,  398,  398,  398,  542,
      398,  398,  403,  403,  403,  403,  541,  539,  403,  537,
      536,  534,  529,  500,  403,  488,  403,  403,  487,  486,
      403,  484,  403,  403,  403,  483,  479,  403,  406,  406,
      406,  406,  472,  406,  468,  459,  453,  439,  422,  417,
      412,  395,  385,  377,  377,  363,  406,  354,  406,  406,
      406,  346,  295,  406,  407,  292,  291,  407, 1094,  109,

      109,  407, 1094,  407,  407,  407, 1094, 1094,  407,  411,
      411, 1094,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  416,  416, 1094,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  421,  421, 1094,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      423, 1094,  423,  423,  423,  423,  423, 1094, 1094,  423,

      423,  423,  423,  423, 1094, 1094,  423,  429, 1094,  429,
      429,  429, 1094, 1094,  429,  434,  434,  434,  434, 1094,
      434, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,  434,
      434, 1094, 1094,  434, 1094,  434,  434,  434, 1094, 1094,
      434,  442,  442,  442,  442, 1094,  442, 1094, 1094, 1094,
     1094, 1094, 1094,  442, 1094, 1094,  442, 1094, 1094,  442,
     1094,  442,  442,  442, 1094,  442,  442,  445,  445,  445,
      445, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,  445,
     1094,  445,  445, 1094, 1094,  445, 1094,  445,  445,  445,
     1094, 1094,  445,  451,  451,  451,  451, 1094,  451, 1094,

     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094,  451, 1094,  451,  451,  451, 1094, 1094,  451,  452,
     1094,  452,  452,  452, 1094, 1094,  452,  454, 1094,  454,
     1094, 1094, 1094,  454, 1094,  454,  454,  454, 1094, 1094,
      454,  458,  458, 1094,  458, 1094, 1094, 1094,  458, 1094,
      458,  458,  458, 1094, 1094,  458,  463,  463, 1094,  463,
      463,  463,  463,  463,  463, 1094,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463, 1094,  463,  463,  463,
      463,  463,  463,  467, 1094, 1094,  467, 1094, 1094, 1094,
      467, 1094,  467,  467,  467, 1094, 1094,  467,  469,  469,

      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469, 1094,  469,  469,  469,
      469,  469,  469,  469,  469,  471,  471, 1094,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471, 1094,  471,  471,  471,  471,  471,  471,
      471,  471,  478, 1094, 1094,  478, 1094, 1094, 1094,  478,
     1094,  478,  478,  478, 1094, 1094,  478,  482,  482, 1094,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  485,  485, 1094,  485, 1094,  485,

      485,  485,  485, 1094,  485,  485,  485,  485, 1094,  485,
      485,  485, 1094,  485, 1094,  485,  485,  485,  485,  485,
      485,  493, 1094, 1094,  493, 1094, 1094, 1094,  493, 1094,
      493,  493,  493, 1094, 1094,  493,  501,  501, 1094,  501,
     1094,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501, 1094,  501, 1094,  501,  501,  501,
      501,  501,  501,  505,  505, 1094,  505, 1094,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505, 1094,  505, 1094,  505,  505,  505,  505,  505,  505,
      514, 1094, 1094,  514, 1094, 1094, 1094,  514, 1094,  514,

      514,  514, 1094, 1094,  514,  518,  518, 1094,  518,  518,
      518,  518, 1094, 1094,  518,  518,  518,  518,  518,  518,
      518,  518,  518, 1094,  518, 1094,  518,  518,  518,  518,
      518,  518,  525, 1094,  525,  525,  525, 1094, 1094,  525,
      527, 1094,  527,  527, 1094, 1094,  527, 1094,  527,  527,
      527, 1094, 1094,  527,  530, 1094,  530,  530,  530, 1094,
     1094,  530,  532, 1094,  532,  532, 1094, 1094,  532, 1094,
      532,  532,  532, 1094, 1094,  532,  535,  535, 1094,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535, 1094,  535, 1094,  535,  535,  535,

      535,  535,  535,  538, 1094, 1094,  538, 1094, 1094, 1094,
      538, 1094,  538,  538,  538, 1094, 1094,  538,  540,  540,
     1094,  540,  540,  540,  540,  540,  540,  540,  540,  540,
     1094,  540,  540,  540,  540,  540,  540,  540, 1094,  540,
      540,  540,  540,  540,  540,  543,  543, 1094,  543,  543,
      543,  543,  543,  543, 1094,  543,  543,  543,  543,  543,
      543,  543,  543, 1094,  543, 1094,  543,  543,  543,  543,
      543,  543,  546, 1094,  546,  546,  546, 1094, 1094,  546,
     1094,  546,  546,  546, 1094, 1094,  546,  548,  548, 1094,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,

      548,  548,  548,  548,  548,  548,  548, 1094,  548,  548,
      548,  548,  548,  548,  314,  314, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  290,  290, 1094,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  293, 1094,  293,  293,  293, 1094, 1094,  293,
      552,  552, 1094, 1094,  552, 1094,  552,  552,  552, 1094,
     1094,  552,  294, 1094,  294,  294, 1094,  294, 1094, 1094,
      294,  294, 1094,  294,  294,  294,  554, 1094, 1094,  554,

     1094, 1094, 1094,  554, 1094,  554,  554,  554,  559, 1094,
     1094,  559, 1094,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  574, 1094,  574,  574,  574,
     1094,  574,  325, 1094,  325,  325, 1094,  325, 1094, 1094,
      325,  325, 1094,  325,  325,  325,  326, 1094, 1094,  326,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094,  326,  326,  326,  326,  326,  345,
      345, 1094,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,

      345,  345,  345,  345,  345,  345,  347, 1094,  347,  347,
      347,  347,  347, 1094, 1094,  347,  347,  347,  347,  347,
     1094, 1094,  347,  599, 1094,  599, 1094,  599,  599,  599,
     1094, 1094,  599,  599,  599,  599,  599, 1094, 1094,  599,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  357, 1094,  357,
      357, 1094, 1094,  357, 1094,  357,  357,  357, 1094, 1094,
      357,  355, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094,  355, 1094,  355,  355,  355, 1094,

     1094,  355,  366,  366,  366,  366, 1094,  366, 1094, 1094,
     1094, 1094, 1094, 1094,  366, 1094, 1094,  366, 1094, 1094,
      366, 1094,  366,  366,  366, 1094,  366,  366,  369,  369,
      369,  369, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
      369, 1094,  369,  369, 1094, 1094,  369, 1094,  369,  369,
      369, 1094, 1094,  369,  375,  375,  375,  375, 1094,  375,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094,  375, 1094,  375,  375,  375, 1094, 1094,  375,
      605, 1094, 1094, 1094,  605, 1094,  605,  605,  605, 1094,
     1094,  605,  376,  376, 1094,  376,  376,  376,  376,  376,

      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  378,
     1094,  378,  378,  378,  378,  378, 1094, 1094,  378,  378,
      378,  378,  378, 1094, 1094,  378,  606, 1094,  606, 1094,
      606,  606,  606, 1094, 1094,  606,  606,  606,  606,  606,
     1094, 1094,  606,  384,  384, 1094,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      386, 1094,  386,  386,  386,  386,  386,  386, 1094,  386,
      386,  386,  386,  386, 1094, 1094,  386,  609, 1094,  609,

     1094,  609,  609,  609, 1094, 1094,  609,  609,  609,  609,
      609, 1094, 1094,  609,  398,  398,  398,  398, 1094,  398,
     1094, 1094, 1094, 1094, 1094, 1094,  398, 1094, 1094,  398,
     1094, 1094,  398, 1094,  398,  398,  398, 1094,  398,  398,
      403,  403,  403,  403, 1094, 1094,  403, 1094, 1094, 1094,
     1094, 1094,  403, 1094,  403,  403, 1094, 1094,  403, 1094,
      403,  403,  403, 1094, 1094,  403,  406,  406,  406,  406,
     1094,  406, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094,  406, 1094,  406,  406,  406, 1094,
     1094,  406,  612,  612,  612,  612,  612,  612,  612,  612,

     1094,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  614,
     1094, 1094,  614, 1094, 1094,  614, 1094, 1094, 1094, 1094,
     1094, 1094, 1094,  614, 1094, 1094, 1094,  614, 1094,  614,
      614,  614, 1094, 1094,  614,  407, 1094, 1094,  407, 1094,
     1094, 1094,  407, 1094,  407,  407,  407, 1094, 1094,  407,
      411,  411, 1094,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  416,  416, 1094,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,

      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  421,  421, 1094,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  423, 1094,  423,  423,  423,  423,  423, 1094, 1094,
      423,  423,  423,  423,  423, 1094, 1094,  423,  618, 1094,
      618, 1094,  618,  618,  618, 1094, 1094,  618,  618,  618,
      618,  618, 1094, 1094,  618,  434,  434,  434,  434, 1094,
      434, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,  434,
      434, 1094, 1094,  434, 1094,  434,  434,  434, 1094, 1094,

      434,  621, 1094,  621,  621,  621, 1094, 1094,  621,  624,
      624,  624,  624, 1094,  624, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094,  624,  624, 1094, 1094,  624, 1094,  624,
      624,  624, 1094, 1094,  624,  442,  442,  442,  442, 1094,
      442, 1094, 1094, 1094, 1094, 1094, 1094,  442, 1094, 1094,
      442, 1094, 1094,  442, 1094,  442,  442,  442, 1094,  442,
      442,  445,  445,  445,  445, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094,  445, 1094,  445,  445, 1094, 1094,  445,
     1094,  445,  445,  445, 1094, 1094,  445,  451,  451,  451,
      451, 1094,  451, 1094, 1094, 1094, 1094, 1094, 1094, 1094,

     1094, 1094, 1094, 1094, 1094,  451, 1094,  451,  451,  451,
     1094, 1094,  451,  627, 1094, 1094, 1094,  627, 1094,  627,
      627,  627, 1094, 1094,  627,  454, 1094,  454, 1094, 1094,
     1094,  454, 1094,  454,  454,  454, 1094, 1094,  454,  629,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094,  629, 1094,  629,  629,  629, 1094, 1094,  629,
      458,  458, 1094,  458, 1094, 1094, 1094,  458, 1094,  458,
      458,  458, 1094, 1094,  458,  463,  463, 1094,  463,  463,
      463,  463,  463,  463, 1094,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463, 1094,  463,  463,  463,  463,

      463,  463,  467, 1094, 1094,  467, 1094, 1094, 1094,  467,
     1094,  467,  467,  467, 1094, 1094,  467,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469, 1094,  469,  469,  469,  469,
      469,  469,  469,  469,  471,  471, 1094,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471, 1094,  471,  471,  471,  471,  471,  471,  471,
      471,  636, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094,  636, 1094,  636,  636,  636, 1094,
     1094,  636,  478, 1094, 1094,  478, 1094, 1094, 1094,  478,

     1094,  478,  478,  478, 1094, 1094,  478,  482,  482, 1094,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  485,  485, 1094,  485, 1094,  485,
      485,  485,  485, 1094,  485,  485,  485,  485, 1094,  485,
      485,  485, 1094,  485, 1094,  485,  485,  485,  485,  485,
      485,  493, 1094, 1094,  493, 1094, 1094, 1094,  493, 1094,
      493,  493,  493, 1094, 1094,  493,  501,  501, 1094,  501,
     1094,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501, 1094,  501, 1094,  501,  501,  501,

      501,  501,  501,  505,  505, 1094,  505, 1094,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505, 1094,  505, 1094,  505,  505,  505,  505,  505,  505,
      514, 1094, 1094,  514, 1094, 1094, 1094,  514, 1094,  514,
      514,  514, 1094, 1094,  514,  518,  518, 1094,  518,  518,
      518,  518, 1094, 1094,  518,  518,  518,  518,  518,  518,
      518,  518,  518, 1094,  518, 1094,  518,  518,  518,  518,
      518,  518,  527, 1094,  527,  527, 1094, 1094,  527, 1094,
      527,  527,  527, 1094, 1094,  527,  525, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,  525,

     1094,  525,  525,  525, 1094, 1094,  525,  532, 1094,  532,
      532, 1094, 1094,  532, 1094,  532,  532,  532, 1094, 1094,
      532,  530, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094,  530, 1094,  530,  530,  530, 1094,
     1094,  530,  535,  535, 1094,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
     1094,  535, 1094,  535,  535,  535,  535,  535,  535,  538,
     1094, 1094,  538, 1094, 1094, 1094,  538, 1094,  538,  538,
      538, 1094, 1094,  538,  540,  540, 1094,  540,  540,  540,
      540,  540,  540,  540,  540,  540, 1094,  540,  540,  540,

      540,  540,  540,  540, 1094,  540,  540,  540,  540,  540,
      540,  543,  543, 1094,  543,  543,  543,  543,  543,  543,
     1094,  543,  543,  543,  543,  543,  543,  543,  543, 1094,
      543, 1094,  543,  543,  543,  543,  543,  543,  546, 1094,
      546,  546,  546, 1094, 1094,  546, 1094,  546,  546,  546,
     1094, 1094,  546,  548,  548, 1094,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548, 1094,  548,  548,  548,  548,  548,  548,
      552,  552, 1094, 1094,  552, 1094,  552,  552,  552, 1094,
     1094,  552,  676,  676, 1094,  676,  676,  676, 1094,  676,

      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  554,
      554, 1094,  554, 1094, 1094, 1094,  554, 1094,  554,  554,
      554,  294, 1094,  294,  294, 1094,  294, 1094, 1094,  294,
      294, 1094,  294,  294,  294,  559, 1094, 1094,  559, 1094,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  683,  683, 1094,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  574,

     1094, 1094,  574, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094,  574, 1094,  574,
      574,  574,  314, 1094, 1094,  314, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
      314, 1094,  314,  314,  314,  695,  695, 1094,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695, 1094,
      695,  695,  326, 1094, 1094,  326, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
      326,  326,  326,  326,  326,  599, 1094,  599,  599,  599,

      599,  599, 1094, 1094,  599,  599,  599,  599,  599, 1094,
     1094,  599,  347, 1094,  347,  347,  347,  347,  347, 1094,
     1094,  347,  347,  347,  347,  347, 1094, 1094,  347,  355,
     1094,  355,  355,  355, 1094, 1094,  355,  605, 1094, 1094,
     1094,  605, 1094,  605,  605,  605, 1094, 1094,  605,  606,
     1094,  606,  606,  606,  606,  606, 1094, 1094,  606,  606,
      606,  606,  606, 1094, 1094,  606,  378, 1094,  378,  378,
      378,  378,  378, 1094, 1094,  378,  378,  378,  378,  378,
     1094, 1094,  378,  609, 1094,  609,  609,  609,  609,  609,
      609, 1094,  609,  609,  609,  609,  609, 1094, 1094,  609,

      386, 1094,  386,  386,  386,  386,  386,  386, 1094,  386,
      386,  386,  386,  386, 1094, 1094,  386,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  614, 1094, 1094,  614, 1094, 1094,
      614, 1094, 1094, 1094, 1094, 1094, 1094, 1094,  614, 1094,
     1094, 1094,  614, 1094,  614,  614,  614, 1094, 1094,  614,
      618, 1094,  618,  618,  618,  618,  618, 1094, 1094,  618,
      618,  618,  618,  618, 1094, 1094,  618,  423, 1094,  423,
      423,  423,  423,  423, 1094, 1094,  423,  423,  423,  423,

      423, 1094, 1094,  423,  719,  719,  719,  719, 1094,  719,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,  719,  719,
     1094, 1094,  719, 1094,  719,  719,  719, 1094, 1094,  719,
      621,  621,  621,  621, 1094,  621, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094,  621, 1094, 1094,  621, 1094,
      621,  621,  621, 1094, 1094,  621,  624,  624,  624,  624,
     1094,  624, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
      624,  624, 1094, 1094,  624, 1094,  624,  624,  624, 1094,
     1094,  624,  627, 1094, 1094, 1094,  627, 1094,  627,  627,
      627, 1094, 1094,  627,  629, 1094,  629,  629,  629, 1094,

     1094,  629,  723, 1094,  723, 1094, 1094, 1094,  723, 1094,
      723,  723,  723, 1094, 1094,  723,  636, 1094,  636,  636,
      636, 1094, 1094,  636,  729, 1094, 1094, 1094,  729, 1094,
      729,  729,  729, 1094, 1094,  729,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740, 1094,  740,  740,  740, 1094,  740, 1094, 1094,  740,
      740,  740,  740,  525, 1094,  525,  525,  525, 1094, 1094,
      525,  530, 1094,  530,  530,  530, 1094, 1094,  530,  676,
      676, 1094,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,

      676,  676,  676,  676,  676,  676,  764, 1094, 1094,  764,
     1094, 1094, 1094,  764, 1094,  764,  764,  764,  299, 1094,
      299, 1094,  299,  299, 1094,  299, 1094, 1094,  299,  299,
     1094,  299,  299,  299,  683,  683, 1094,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  314, 1094, 1094,  314, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,  314,
     1094,  314,  314,  314,  695,  695, 1094,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,

      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  699,  699,  699,  699,  699,  326, 1094, 1094,  326,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094,  326,  326,  326,  326,  326,  347,
     1094,  347,  347,  347,  347,  347, 1094, 1094,  347,  347,
      347,  347,  347, 1094, 1094,  347,  378, 1094,  378,  378,
      378,  378,  378, 1094, 1094,  378,  378,  378,  378,  378,
     1094, 1094,  378,  386, 1094,  386,  386,  386,  386,  386,
      386, 1094,  386,  386,  386,  386,  386, 1094, 1094,  386,
      792, 1094,  792,  792,  792, 1094, 1094,  792,  837,  837,

     1094,  837, 1094, 1094, 1094,  837, 1094,  837,  837,  837,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772, 1094,
      772, 1094, 1094, 1094,  772,  772,  772,  860,  860,  860,
      860, 1094,  860, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094,  860,  860, 1094, 1094,  860, 1094,  860,  860,  860,
     1094, 1094,  860,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  884, 1094,  884,
      884,  884, 1094,  884, 1094,  884, 1094,  884,  884,  884,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,

      951,  951,  951,  951,  951, 1094,  951,  951,  951, 1094,
      951, 1094, 1094, 1094,  951,  951,  951,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952, 1094,  952,  952,  952, 1094,  952, 1094, 1094,
     1094,  952,  952,  952, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1094,
     1002, 1002, 1002, 1094, 1002, 1094, 1094, 1094, 1002, 1002,
     1002, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012,
     1012, 1012, 1012, 1012, 1012, 1012, 1094, 1012, 1012, 1012,
     1094, 1012, 1094, 1094, 1094, 1012, 1012, 1012,   83, 1094,

     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094
    } ;

static yyconst flex_int16_t yy_chk[7869] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    4,
       97,  227,    4,   97,   21,  227,   35,   22,   21,    4,
        4,   22,    4,    4,   47,   35,    4,    4,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

       48,    5,   23,    5,    5,   57,   23,   36,    5,    5,
        5,    5,   21,   24,   35,   22,   36,   24, 1088,  113,
       98,  212,   47,   98,  113,  807,  212,    5,    5,    5,
       58,   43,   43,  502,   43,  502,   43,   63,   48,  253,
       23,  807,   98,   57,  253,   36,   64,   44,   44,   81,
       44,   24,   44,    5,    5,    5,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,   58,    6,
       43,    6,    6,   39,   82,   63,    6,    6,    6,    6,
       40,   53,   39,   53,   64,   99,   44,   81,   99,   40,
      276,  302,  302,  258,   39,    6,    6,    6,  258,  303,

      541,   40,   53,   94, 1084,   94,   94,   99,   94,   94,
       94,   39,   82,  300,   94,  276,  300,  541,   40,   53,
      303,    6,    6,    6,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   54,   13,   54,   13,   13,   45,
      308,   45,   13,   13,   13,   13,   69, 1069,   45,  105,
      105,  106,  106,   45,  105,   54,  106, 1081, 1069,  308,

       45,   13,   13,   13,   46,  305,   46,   69,   51,   51,
      355,   51,   54,   46,  105,  355,  106,   45,   46,   52,
       52, 1077,   52,   70,   69,   46,  305,   13,   13,   13,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   46,   14,   70,   14,   14,   51,   75,  509,
       14,   14,   14,   14,   55,   56,   55,   56,   52,  569,
       75,   70,  306,  509,  101,  320,  101,  101,  101,   14,
       14,   14,  101,  309,  320,   55,   56,  202,   76,  193,
      202,  569,  202,  306,  114,  114,   75,  114,  193,   71,
       76,   72,   55,   56,  309,   14,   14,   14,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       71,   15,   72,   15,   15,   61,   76,  193,   15,   15,
       15,   15,   61,   61,   62,  114,  566,   71, 1074,   72,
      335,   62,   62,  335, 1073,  313,   61,   15,   15,   15,
       77,   87,   87,  228,   87,   62,  566,  232,  228,   77,
     1072,  232,  228,   61,  313,  122,  122,  232,  122,  232,
      319,   77,   62,   15,   15,   15,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   77,   16,
       87,   16,   16,   78,  304,  537,   16,   16,   16,   16,
       86,  319,   78,   86,  819,   91,  122,   91,   91,   91,

       91,  819,  304, 1079,   78,   16,   16,   16,   91, 1038,
      537, 1038,   86,  123,  123,  123,  123,  319, 1079,  336,
      123,   78,  336,  339,  304,   91,  339,  337,  337,   86,
      337,   16,   16,   16,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,  686,   25,   96,   25,   25,   96,
      570, 1086,   25,   25,   25,   25,   96,   96, 1086,   96,

       96,  127,  127,   96,   96,  686,  127,  340,   96,  570,
      340,   25,   25,   25,  116,  116,  116,  116, 1071,  357,
      145,  145,  145,  145,  357,   96,  127,  145,  116,  128,
      128,  525,  574,  116,  128,  574,  525,   25,   25,   25,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  527,   26,  128,   26,   26,  527,  823, 1067,
       26,   26,   26,   26,  100,  100,  571,  100,  117,  117,
      117,  117,  823,  100,  685,  100,  100,  100,  100,   26,
       26,   26,  117, 1066, 1064,  571,  100,  117,  177,  177,
      177,  177, 1063,  685,  338,  177,  338,  338,  338,  341,

      341,  577,  341,  100,  577,   26,   26,   26,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,

       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   73,   73,

       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,

       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   92,  107,  107, 1062,
      107,  121,  121,  121,  121,  343, 1091,   92,  343,  161,
      161,  107,  107, 1089,  161,  121,  107, 1089,   92,  348,
      121,   92,   92,  348, 1091,   92,   92,  343,   92,   92,
      149,  149,  579,  149,  161,  579,  107,   92,  107,  134,
      134,   92,   92,  348,  134, 1061,  134,   92,   92,   92,
       92,   92,   92,   93,   93, 1060,  118,  118,  118,  118,

      162,  162, 1059,  118,  134,  162, 1058,   93,   93,   93,
      118,  149,  469,  350,  350,  118,  350,  119,  119,  119,
      119,  469,  135,  135,  119,  162,   93,  135,  579,  135,
       93,  119,   93,   93,   93,  379,  119,  359,  359,  379,
      359, 1051,  139,  139,  139,  139,   93,  135,  769,   93,
      469,   93,   93,   93,   95,   95,  139,  130,  130,  379,
      130,  139,  118,  138,  138,  136,  138,  769,   95,   95,
       95,  130,  130, 1050,  136,  136,  130,  138,  138,  136,
     1048,  136,  138,  119,  138,  370,  370,   95,  370,   95,
     1055,   95, 1047,   95,   95,   95,  130,  326,  130,  136,

      326, 1046,  138, 1055,  138,  221,  221,   95,  221, 1045,
       95, 1044,   95,   95,   95,  140,  140,  140,  140,  141,
      141,  141,  141, 1043,  153,  153,  141,  153,  328,  140,
     1042,  328,  480,  141,  140,  480,  326,  480,  141,  142,
      142,  142,  142, 1041,  221, 1032,  142,  144,  144,  144,
      144,  157,  157,  142,  157,  144,  163,  163,  142,  163,
      344,  144,  344,  344,  344,  153,  144,  328,  344,  596,
      163,  163,  596,  168,  168,  163,  168,  170,  170,  170,
      170,  284, 1031, 1018,  284,  141,  176,  176,  328,  176,
      406,  170,  157,  406, 1017,  163,  170,  163,  406,  167,

      167,  167,  167,  284, 1015,  142,  167,  171,  171,  171,
      171, 1014, 1008, 1007,  168,  167,  167,  167,  167, 1006,
      284,  171,  172,  172,  172,  172,  171,  176, 1005,  172,
      173,  173,  173,  173,  387, 1004,  172,  173,  387,  182,
      182,  172,  182, 1003,  173,  175,  175,  175,  175,  173,
      185,  185,  976,  185,  188,  188,  975,  188,  387,  175,
      196,  196,  215,  215,  175,  215,  219,  219,  233,  219,
      974,  973,  972,  233,  196,  196,  196,  233,  236,  236,
      182,  236,  674,  233,  327,  233,  971,  327,  172,  240,
      240,  185,  240,  196,  530,  188,  173,  246,  246,  530,

      246,  287,  287,  215,  287,  249,  249,  219,  249,  288,
      288,  970,  288,  674,  307,  381,  381,  307,  381,  236,
      196,  197,  197,  327,  197,  969,  329,  197,  197,  329,
      240,  330,  968,  967,  330,  307,  327,  307,  246,  674,
      287,  197,  197,  197,  331,  532,  249,  331,  288,  307,
      532,  331,  325,  966,  325,  325,  307,  325,  325,  325,
      197,  332,  197,  325,  332,  329,  333,  965,  964,  333,
      330,  307,  329,  347,  347,  963,  349,  349,  347,  962,
      961,  349,  331,  331,  960,  330,  424,  197,  285,  285,
      424,  959,  352,  352,  378,  378,  958,  352,  347,  378,

      332,  349,  285,  285,  285,  333,  565,  332,  331,  565,
      424,  957,  362,  362,  362,  362,  332,  352,  956,  378,
      954,  285,  334,  333,  953,  334,  362,  565,  285,  285,
      352,  362,  334,  334,  949,  334,  334,  380,  380,  334,
      334,  948,  380,  947,  334,  946,  285,  285,  285,  286,
      286,  945,  944,  943,  366,  366,  366,  366,  942,  941,
      940,  334,  380,  286,  286,  286,  938,  937,  366,  363,
      363,  363,  363,  366,  936,  935,  363,  365,  365,  365,
      365,  934,  286,  363,  365,  933,  932,  931,  363,  286,
      286,  365,  367,  367,  367,  367,  365,  391,  391,  367,

      391,  408,  408,  580,  408,  930,  580,  286,  286,  286,
      298,  413,  413,  298,  413,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  929,  927,  926,
      298,  298,  298,  298,  598,  363,  925,  598,  368,  368,
      368,  368,  922,  365,  668,  368,  921,  668,  580,  298,
      298,  298,  368,  369,  369,  369,  369,  368,  373,  373,
      373,  373,  912,  418,  418,  373,  418,  369,  383,  383,
      911,  679,  369,  383,  679,  298,  298,  298,  298,  314,
      426,  426,  314,  426,  910,  314,  314,  374,  374,  374,
      374,  386,  386,  383,  374,  909,  386,  908,  386,  314,

      314,  314,  388,  388,  368,  578,  383,  388,  578,  388,
      393,  393,  907,  906,  905,  393,  386,  393,  314,  394,
      394,  394,  394,  395,  395,  395,  395,  388,  435,  435,
      395,  435,  904,  394,  903,  393,  689,  395,  394,  689,
      902,  901,  395,  314,  314,  314,  900,  899,  393,  397,
      397,  397,  397,  578,  898,  897,  397,  398,  398,  398,
      398,  423,  423,  397,  567,  398,  423,  567,  397,  896,
      895,  398,  399,  399,  399,  399,  398,  894,  893,  399,
      400,  400,  400,  400,  892,  567,  423,  400,  890,  395,
      401,  401,  401,  401,  400,  888,  885,  883,  401,  400,

      403,  403,  403,  403,  401,  882,  881,  880,  403,  401,
      404,  404,  404,  404,  403,  397,  879,  404,  878,  403,
      405,  405,  405,  405,  425,  425,  877,  405,  876,  425,
      428,  428,  875,  446,  446,  428,  446,  874,  873,  872,
      429,  429,  429,  429,  871,  684,  400,  429,  684,  425,
      430,  430,  430,  430,  870,  428,  429,  429,  429,  429,
      432,  432,  432,  432,  869,  868,  684,  432,  428,  430,
      438,  438,  438,  438,  867,  866,  432,  432,  432,  432,
      434,  434,  434,  434,  438,  455,  455,  434,  455,  438,
      460,  460,  757,  460,  865,  757,  434,  434,  434,  434,

      439,  439,  439,  439,  863,  862,  861,  439,  441,  441,
      441,  441,  857,  586,  439,  441,  586,  464,  464,  439,
      464,  856,  441,  442,  442,  442,  442,  441,  443,  443,
      443,  443,  855,  475,  475,  443,  475,  442,  444,  444,
      444,  444,  442,  852,  851,  444,  445,  445,  445,  445,
      490,  490,  444,  490,  841,  494,  494,  444,  494,  586,
      445,  449,  449,  449,  449,  445,  439,  840,  449,  450,
      450,  450,  450,  839,  441,  838,  450,  497,  497,  837,
      497,  511,  511,  836,  511,  515,  515,  835,  515,  519,
      519,  834,  519,  522,  522,  833,  522,  584,  575,  585,

      584,  575,  585,  589,  444,  575,  589,  591,  832,  592,
      591,  590,  592,  831,  590,  773,  497,  558,  773,  830,
      558,  829,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  828,  827,  575,  558,  558,  558,
      558,  826,  589,  825,  585,  824,  591,  822,  592,  593,
      590,  821,  593,  589,  592,  584,  558,  558,  558,  590,
      820,  594,  575,  591,  594,  595,  818,  597,  595,  597,
      597,  597,  599,  599,  600,  600,  817,  599,  613,  600,
      816,  613,  558,  558,  558,  558,  613,  815,  593,  601,
      601,  606,  606,  814,  601,  614,  606,  599,  614,  600,

      594,  813,  650,  614,  595,  650,  594,  593,  607,  607,
      812,  595,  693,  607,  601,  693,  606,  608,  608,  609,
      609,  811,  608,  810,  609,  601,  609,  610,  610,  809,
      611,  611,  610,  607,  610,  611,  808,  611,  618,  618,
      619,  619,  608,  618,  609,  619,  620,  620,  806,  805,
      804,  620,  610,  608,  803,  611,  650,  621,  621,  621,
      621,  802,  801,  618,  621,  619,  611,  698,  800,  693,
      698,  620,  799,  621,  621,  621,  621,  622,  622,  622,
      622,  798,  620,  797,  622,  623,  623,  623,  623,  796,
      891,  795,  623,  891,  984,  984,  622, 1016,  794,  984,

     1016,  623,  623,  623,  623,  624,  624,  624,  624,  793,
      790,  789,  624,  678,  698,  678,  788,  678,  678,  984,
      785,  624,  624,  624,  624,  784,  678,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  694,  696,  697,  694,

      696,  697,  703,  700,  774,  703,  700,  774, 1065,  707,
      707, 1065,  776,  771,  707,  710,  710,  765,  770,  765,
      710,  765,  765,  768,  720,  720,  720,  720,  767,  764,
      765,  720,  775,  762,  707,  775,  978,  761,  760,  978,
      710,  703,  700,  720,  702,  704,  694,  702,  704,  707,
      774,  705,  703,  697,  705,  710,  696,  700,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  706,  702,  704,  706,  775,  711,  711,  759,
      705,  758,  711,  978,  711,  716,  716,  701,  701,  701,

      716,  702,  778,  756,  704,  778,  705,  842,  777,  755,
      842,  777,  711,  754,  753,  718,  718,  718,  718,  752,
      716,  706,  718,  701,  701,  701,  701,  711,  751,  706,
      750,  718,  718,  718,  718,  716,  719,  719,  719,  719,
      749,  778,  843,  719, 1076,  843, 1078, 1076,  778, 1078,
      748,  842,  719,  719,  719,  719,  733,  733,  777,  845,
      780,  733,  845,  780,  733,  733,  747,  977,  781,  733,
      977,  781,  746,  733,  733,  779,  779,  779,  779,  779,
      779,  779,  779,  779,  779,  779,  779,  779,  779,  779,
      779,  779,  779,  779,  779,  779,  779,  779,  779,  780,

      782,  843,  745,  782,  783,  783,  780,  781,  846,  783,
      743,  846,  786,  786,  779,  779,  779,  786,  845,  742,
      787,  787,  781,  791,  791,  787,  977,  787,  791,  783,
      848,  849,  847,  848,  849,  847,  783,  786,  741,  782,
      779,  779,  779,  779,  786,  787,  913,  846,  791,  913,
      782,  846,  787,  739,  738,  791,  792,  792,  792,  792,
      737,  914,  736,  792,  914, 1053,  735,  734, 1053,  848,
      849,  847,  792,  792,  792,  792,  847,  850,  850,  853,
      853,  732,  850,  731,  853,  730,  854,  854,  913,  848,
      849,  854,  728,  854,  858,  858,  727,  916,  915,  858,

      916,  915,  850,  726,  853,  725,  850,  914,  853, 1082,
     1053,  854, 1082,  917,  918,  854,  917,  918,  919,  858,
      724,  919,  723,  858,  859,  859,  859,  859,  722,  721,
      715,  859,  860,  860,  860,  860,  916,  714,  713,  860,
      859,  859,  859,  859,  915,  709,  708,  699,  860,  860,
      860,  860,  917,  918,  916,  917,  695,  919,  920,  920,
      918,  923,  923,  920,  919,  688,  923,  924,  924,  687,
      928,  928,  924,  979,  924,  928,  979,  980,  980,  981,
      980,  683,  981,  920,  982, 1035,  923,  982, 1035,  682,
      983, 1036,  924,  983, 1036,  928, 1039,  987,  987, 1039,

     1040,  920,  987, 1040,  923,  681, 1054,  988,  988, 1054,
      924,  676,  988,  928,  988,  675,  980,  673,  981,  992,
      992,  672,  987,  982,  992,  671,  979, 1037, 1037,  983,
     1037, 1035,  988, 1056, 1057, 1039, 1056, 1057,  981, 1040,
      669,  982, 1039,  983,  992, 1036, 1068, 1070, 1054, 1068,
     1070,  667, 1080, 1085, 1040, 1080, 1085, 1087, 1090,  666,
     1087, 1090, 1093, 1093,  662, 1093, 1037, 1183,  660, 1183,
     1183, 1183, 1056, 1057,  658,  657, 1057, 1244, 1056, 1283,
     1244, 1244, 1283, 1283,  656, 1254, 1070, 1254, 1254, 1254,
     1257, 1080, 1257, 1257, 1257,  655,  654,  653, 1068, 1070,

      652, 1093, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,

     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099,
     1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099,
     1099, 1099, 1099, 1099, 1099, 1099, 1099, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102,

     1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102,
     1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1103, 1103,
     1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103,
     1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103,
     1103, 1103, 1103, 1103, 1103, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1106,

     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1107, 1107, 1107, 1107,
     1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107,
     1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107,
     1107, 1107, 1107, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,

     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
     1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
     1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,

     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1114, 1114, 1114, 1114, 1114,
     1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,
     1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,
     1114, 1114, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1117, 1117, 1117, 1117,

     1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
     1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
     1117, 1117, 1117, 1118, 1118,  651, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1119, 1258,  649, 1258, 1258, 1258, 1288,  648, 1288, 1288,
     1288,  647,  646, 1119,  645, 1119, 1119, 1119,  644,  643,
     1119, 1120,  642, 1120, 1120,  641, 1120,  640,  639, 1120,
     1120,  638, 1120, 1120, 1120, 1121,  637, 1121, 1121, 1121,
     1121,  634, 1121,  633,  632, 1121, 1121, 1121, 1121, 1121,

     1121, 1122, 1122,  631,  630,  629,  626,  625,  617,  616,
      615,  612,  604, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1123,  603, 1123, 1123,  573, 1123,  572,  564,
     1123, 1123,  563, 1123, 1123, 1123, 1124, 1124,  562,  560,
      559,  557,  554,  552,  551,  550,  549,  547, 1124, 1124,
     1124, 1124, 1124, 1124, 1124, 1124, 1124, 1125, 1125,  545,
     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,
     1125, 1125, 1125, 1125, 1126,  542, 1126, 1126, 1126, 1126,
     1126,  539,  536, 1126, 1126, 1126, 1126, 1126,  534,  533,

     1126, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127,
     1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127,
     1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1128,  531,
     1128, 1128, 1128,  529,  528, 1128, 1129,  526, 1129, 1129,
      524,  521, 1129,  517, 1129, 1129, 1129,  513,  510, 1129,
     1130, 1130, 1130, 1130,  508, 1130,  507,  506,  504,  503,
      500,  499, 1130,  496,  492, 1130,  489,  488, 1130,  484,
     1130, 1130, 1130,  482, 1130, 1130, 1131, 1131, 1131, 1131,
      481,  479,  477,  474,  472,  471,  468,  466, 1131,  462,
     1131, 1131,  459,  458, 1131,  457, 1131, 1131, 1131,  454,

      453, 1131, 1132, 1132, 1132, 1132,  452, 1132,  448,  440,
      437,  433,  421,  420,  416,  415,  411,  410,  396,  390,
     1132,  385, 1132, 1132, 1132,  384,  376, 1132, 1133, 1133,
      372, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133,
     1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133,
     1133, 1133, 1133, 1133, 1133, 1134,  364, 1134, 1134, 1134,
     1134, 1134,  361,  358, 1134, 1134, 1134, 1134, 1134,  356,
      353, 1134, 1135, 1135,  345, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1136,

      321, 1136, 1136, 1136, 1136, 1136, 1136,  318, 1136, 1136,
     1136, 1136, 1136,  317,  316, 1136, 1137, 1137, 1137, 1137,
      315, 1137,  311,  310,  301,  299,  294,  293, 1137,  290,
      289, 1137,  283,  280, 1137,  275, 1137, 1137, 1137,  271,
     1137, 1137, 1138, 1138, 1138, 1138,  270,  267, 1138,  263,
      262,  259,  254,  223, 1138,  211, 1138, 1138,  210,  209,
     1138,  205, 1138, 1138, 1138,  204,  200, 1138, 1139, 1139,
     1139, 1139,  195, 1139,  192,  184,  181,  174,  160,  156,
      152,  143,  133,  129,  126,  120, 1139,  108, 1139, 1139,
     1139,  104,   90, 1139, 1140,   89,   88, 1140,   83,    8,

        7, 1140,    0, 1140, 1140, 1140,    0,    0, 1140, 1141,
     1141,    0, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141,
     1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141,
     1141, 1141, 1141, 1141, 1141, 1141, 1142, 1142,    0, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1143, 1143,    0, 1143, 1143, 1143, 1143,
     1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143,
     1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143,
     1144,    0, 1144, 1144, 1144, 1144, 1144,    0,    0, 1144,

     1144, 1144, 1144, 1144,    0,    0, 1144, 1145,    0, 1145,
     1145, 1145,    0,    0, 1145, 1146, 1146, 1146, 1146,    0,
     1146,    0,    0,    0,    0,    0,    0,    0,    0, 1146,
     1146,    0,    0, 1146,    0, 1146, 1146, 1146,    0,    0,
     1146, 1147, 1147, 1147, 1147,    0, 1147,    0,    0,    0,
        0,    0,    0, 1147,    0,    0, 1147,    0,    0, 1147,
        0, 1147, 1147, 1147,    0, 1147, 1147, 1148, 1148, 1148,
     1148,    0,    0,    0,    0,    0,    0,    0,    0, 1148,
        0, 1148, 1148,    0,    0, 1148,    0, 1148, 1148, 1148,
        0,    0, 1148, 1149, 1149, 1149, 1149,    0, 1149,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1149,    0, 1149, 1149, 1149,    0,    0, 1149, 1150,
        0, 1150, 1150, 1150,    0,    0, 1150, 1151,    0, 1151,
        0,    0,    0, 1151,    0, 1151, 1151, 1151,    0,    0,
     1151, 1152, 1152,    0, 1152,    0,    0,    0, 1152,    0,
     1152, 1152, 1152,    0,    0, 1152, 1153, 1153,    0, 1153,
     1153, 1153, 1153, 1153, 1153,    0, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153,    0, 1153, 1153, 1153,
     1153, 1153, 1153, 1154,    0,    0, 1154,    0,    0,    0,
     1154,    0, 1154, 1154, 1154,    0,    0, 1154, 1155, 1155,

     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155,    0, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1156, 1156,    0, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156,    0, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1157,    0,    0, 1157,    0,    0,    0, 1157,
        0, 1157, 1157, 1157,    0,    0, 1157, 1158, 1158,    0,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1159, 1159,    0, 1159,    0, 1159,

     1159, 1159, 1159,    0, 1159, 1159, 1159, 1159,    0, 1159,
     1159, 1159,    0, 1159,    0, 1159, 1159, 1159, 1159, 1159,
     1159, 1160,    0,    0, 1160,    0,    0,    0, 1160,    0,
     1160, 1160, 1160,    0,    0, 1160, 1161, 1161,    0, 1161,
        0, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1161, 1161, 1161,    0, 1161,    0, 1161, 1161, 1161,
     1161, 1161, 1161, 1162, 1162,    0, 1162,    0, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162,    0, 1162,    0, 1162, 1162, 1162, 1162, 1162, 1162,
     1163,    0,    0, 1163,    0,    0,    0, 1163,    0, 1163,

     1163, 1163,    0,    0, 1163, 1164, 1164,    0, 1164, 1164,
     1164, 1164,    0,    0, 1164, 1164, 1164, 1164, 1164, 1164,
     1164, 1164, 1164,    0, 1164,    0, 1164, 1164, 1164, 1164,
     1164, 1164, 1165,    0, 1165, 1165, 1165,    0,    0, 1165,
     1166,    0, 1166, 1166,    0,    0, 1166,    0, 1166, 1166,
     1166,    0,    0, 1166, 1167,    0, 1167, 1167, 1167,    0,
        0, 1167, 1168,    0, 1168, 1168,    0,    0, 1168,    0,
     1168, 1168, 1168,    0,    0, 1168, 1169, 1169,    0, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169,    0, 1169,    0, 1169, 1169, 1169,

     1169, 1169, 1169, 1170,    0,    0, 1170,    0,    0,    0,
     1170,    0, 1170, 1170, 1170,    0,    0, 1170, 1171, 1171,
        0, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
        0, 1171, 1171, 1171, 1171, 1171, 1171, 1171,    0, 1171,
     1171, 1171, 1171, 1171, 1171, 1172, 1172,    0, 1172, 1172,
     1172, 1172, 1172, 1172,    0, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172,    0, 1172,    0, 1172, 1172, 1172, 1172,
     1172, 1172, 1173,    0, 1173, 1173, 1173,    0,    0, 1173,
        0, 1173, 1173, 1173,    0,    0, 1173, 1174, 1174,    0,
     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,

     1174, 1174, 1174, 1174, 1174, 1174, 1174,    0, 1174, 1174,
     1174, 1174, 1174, 1174, 1175, 1175,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1176, 1176,    0, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1177,    0, 1177, 1177, 1177,    0,    0, 1177,
     1178, 1178,    0,    0, 1178,    0, 1178, 1178, 1178,    0,
        0, 1178, 1179,    0, 1179, 1179,    0, 1179,    0,    0,
     1179, 1179,    0, 1179, 1179, 1179, 1180,    0,    0, 1180,

        0,    0,    0, 1180,    0, 1180, 1180, 1180, 1181,    0,
        0, 1181,    0, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1182,    0, 1182, 1182, 1182,
        0, 1182, 1184,    0, 1184, 1184,    0, 1184,    0,    0,
     1184, 1184,    0, 1184, 1184, 1184, 1185,    0,    0, 1185,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1185, 1185, 1185, 1185, 1185, 1186,
     1186,    0, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,

     1186, 1186, 1186, 1186, 1186, 1186, 1187,    0, 1187, 1187,
     1187, 1187, 1187,    0,    0, 1187, 1187, 1187, 1187, 1187,
        0,    0, 1187, 1188,    0, 1188,    0, 1188, 1188, 1188,
        0,    0, 1188, 1188, 1188, 1188, 1188,    0,    0, 1188,
     1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,
     1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,
     1189, 1189, 1189, 1189, 1189, 1189, 1189, 1190,    0, 1190,
     1190,    0,    0, 1190,    0, 1190, 1190, 1190,    0,    0,
     1190, 1191,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1191,    0, 1191, 1191, 1191,    0,

        0, 1191, 1192, 1192, 1192, 1192,    0, 1192,    0,    0,
        0,    0,    0,    0, 1192,    0,    0, 1192,    0,    0,
     1192,    0, 1192, 1192, 1192,    0, 1192, 1192, 1193, 1193,
     1193, 1193,    0,    0,    0,    0,    0,    0,    0,    0,
     1193,    0, 1193, 1193,    0,    0, 1193,    0, 1193, 1193,
     1193,    0,    0, 1193, 1194, 1194, 1194, 1194,    0, 1194,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1194,    0, 1194, 1194, 1194,    0,    0, 1194,
     1195,    0,    0,    0, 1195,    0, 1195, 1195, 1195,    0,
        0, 1195, 1196, 1196,    0, 1196, 1196, 1196, 1196, 1196,

     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1197,
        0, 1197, 1197, 1197, 1197, 1197,    0,    0, 1197, 1197,
     1197, 1197, 1197,    0,    0, 1197, 1198,    0, 1198,    0,
     1198, 1198, 1198,    0,    0, 1198, 1198, 1198, 1198, 1198,
        0,    0, 1198, 1199, 1199,    0, 1199, 1199, 1199, 1199,
     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
     1200,    0, 1200, 1200, 1200, 1200, 1200, 1200,    0, 1200,
     1200, 1200, 1200, 1200,    0,    0, 1200, 1201,    0, 1201,

        0, 1201, 1201, 1201,    0,    0, 1201, 1201, 1201, 1201,
     1201,    0,    0, 1201, 1202, 1202, 1202, 1202,    0, 1202,
        0,    0,    0,    0,    0,    0, 1202,    0,    0, 1202,
        0,    0, 1202,    0, 1202, 1202, 1202,    0, 1202, 1202,
     1203, 1203, 1203, 1203,    0,    0, 1203,    0,    0,    0,
        0,    0, 1203,    0, 1203, 1203,    0,    0, 1203,    0,
     1203, 1203, 1203,    0,    0, 1203, 1204, 1204, 1204, 1204,
        0, 1204,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1204,    0, 1204, 1204, 1204,    0,
        0, 1204, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205,

        0, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205,
     1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1206,
        0,    0, 1206,    0,    0, 1206,    0,    0,    0,    0,
        0,    0,    0, 1206,    0,    0,    0, 1206,    0, 1206,
     1206, 1206,    0,    0, 1206, 1207,    0,    0, 1207,    0,
        0,    0, 1207,    0, 1207, 1207, 1207,    0,    0, 1207,
     1208, 1208,    0, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1209, 1209,    0,
     1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209,

     1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209,
     1209, 1209, 1209, 1209, 1210, 1210,    0, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1211,    0, 1211, 1211, 1211, 1211, 1211,    0,    0,
     1211, 1211, 1211, 1211, 1211,    0,    0, 1211, 1212,    0,
     1212,    0, 1212, 1212, 1212,    0,    0, 1212, 1212, 1212,
     1212, 1212,    0,    0, 1212, 1213, 1213, 1213, 1213,    0,
     1213,    0,    0,    0,    0,    0,    0,    0,    0, 1213,
     1213,    0,    0, 1213,    0, 1213, 1213, 1213,    0,    0,

     1213, 1214,    0, 1214, 1214, 1214,    0,    0, 1214, 1215,
     1215, 1215, 1215,    0, 1215,    0,    0,    0,    0,    0,
        0,    0,    0, 1215, 1215,    0,    0, 1215,    0, 1215,
     1215, 1215,    0,    0, 1215, 1216, 1216, 1216, 1216,    0,
     1216,    0,    0,    0,    0,    0,    0, 1216,    0,    0,
     1216,    0,    0, 1216,    0, 1216, 1216, 1216,    0, 1216,
     1216, 1217, 1217, 1217, 1217,    0,    0,    0,    0,    0,
        0,    0,    0, 1217,    0, 1217, 1217,    0,    0, 1217,
        0, 1217, 1217, 1217,    0,    0, 1217, 1218, 1218, 1218,
     1218,    0, 1218,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0, 1218,    0, 1218, 1218, 1218,
        0,    0, 1218, 1219,    0,    0,    0, 1219,    0, 1219,
     1219, 1219,    0,    0, 1219, 1220,    0, 1220,    0,    0,
        0, 1220,    0, 1220, 1220, 1220,    0,    0, 1220, 1221,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1221,    0, 1221, 1221, 1221,    0,    0, 1221,
     1222, 1222,    0, 1222,    0,    0,    0, 1222,    0, 1222,
     1222, 1222,    0,    0, 1222, 1223, 1223,    0, 1223, 1223,
     1223, 1223, 1223, 1223,    0, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223,    0, 1223, 1223, 1223, 1223,

     1223, 1223, 1224,    0,    0, 1224,    0,    0,    0, 1224,
        0, 1224, 1224, 1224,    0,    0, 1224, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225,    0, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1226, 1226,    0, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226,    0, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1227,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1227,    0, 1227, 1227, 1227,    0,
        0, 1227, 1228,    0,    0, 1228,    0,    0,    0, 1228,

        0, 1228, 1228, 1228,    0,    0, 1228, 1229, 1229,    0,
     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
     1229, 1229, 1229, 1229, 1230, 1230,    0, 1230,    0, 1230,
     1230, 1230, 1230,    0, 1230, 1230, 1230, 1230,    0, 1230,
     1230, 1230,    0, 1230,    0, 1230, 1230, 1230, 1230, 1230,
     1230, 1231,    0,    0, 1231,    0,    0,    0, 1231,    0,
     1231, 1231, 1231,    0,    0, 1231, 1232, 1232,    0, 1232,
        0, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232,    0, 1232,    0, 1232, 1232, 1232,

     1232, 1232, 1232, 1233, 1233,    0, 1233,    0, 1233, 1233,
     1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233,
     1233,    0, 1233,    0, 1233, 1233, 1233, 1233, 1233, 1233,
     1234,    0,    0, 1234,    0,    0,    0, 1234,    0, 1234,
     1234, 1234,    0,    0, 1234, 1235, 1235,    0, 1235, 1235,
     1235, 1235,    0,    0, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235,    0, 1235,    0, 1235, 1235, 1235, 1235,
     1235, 1235, 1236,    0, 1236, 1236,    0,    0, 1236,    0,
     1236, 1236, 1236,    0,    0, 1236, 1237,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1237,

        0, 1237, 1237, 1237,    0,    0, 1237, 1238,    0, 1238,
     1238,    0,    0, 1238,    0, 1238, 1238, 1238,    0,    0,
     1238, 1239,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1239,    0, 1239, 1239, 1239,    0,
        0, 1239, 1240, 1240,    0, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
        0, 1240,    0, 1240, 1240, 1240, 1240, 1240, 1240, 1241,
        0,    0, 1241,    0,    0,    0, 1241,    0, 1241, 1241,
     1241,    0,    0, 1241, 1242, 1242,    0, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242,    0, 1242, 1242, 1242,

     1242, 1242, 1242, 1242,    0, 1242, 1242, 1242, 1242, 1242,
     1242, 1243, 1243,    0, 1243, 1243, 1243, 1243, 1243, 1243,
        0, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,    0,
     1243,    0, 1243, 1243, 1243, 1243, 1243, 1243, 1245,    0,
     1245, 1245, 1245,    0,    0, 1245,    0, 1245, 1245, 1245,
        0,    0, 1245, 1246, 1246,    0, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1246, 1246,    0, 1246, 1246, 1246, 1246, 1246, 1246,
     1247, 1247,    0,    0, 1247,    0, 1247, 1247, 1247,    0,
        0, 1247, 1248, 1248,    0, 1248, 1248, 1248,    0, 1248,

     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1249,
     1249,    0, 1249,    0,    0,    0, 1249,    0, 1249, 1249,
     1249, 1250,    0, 1250, 1250,    0, 1250,    0,    0, 1250,
     1250,    0, 1250, 1250, 1250, 1251,    0,    0, 1251,    0,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1252, 1252,    0, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1253,

        0,    0, 1253,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1253,    0, 1253,
     1253, 1253, 1255,    0,    0, 1255,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1255,    0, 1255, 1255, 1255, 1256, 1256,    0, 1256, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,    0,
     1256, 1256, 1259,    0,    0, 1259,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1259, 1259, 1259, 1259, 1259, 1260,    0, 1260, 1260, 1260,

     1260, 1260,    0,    0, 1260, 1260, 1260, 1260, 1260,    0,
        0, 1260, 1261,    0, 1261, 1261, 1261, 1261, 1261,    0,
        0, 1261, 1261, 1261, 1261, 1261,    0,    0, 1261, 1262,
        0, 1262, 1262, 1262,    0,    0, 1262, 1263,    0,    0,
        0, 1263,    0, 1263, 1263, 1263,    0,    0, 1263, 1264,
        0, 1264, 1264, 1264, 1264, 1264,    0,    0, 1264, 1264,
     1264, 1264, 1264,    0,    0, 1264, 1265,    0, 1265, 1265,
     1265, 1265, 1265,    0,    0, 1265, 1265, 1265, 1265, 1265,
        0,    0, 1265, 1266,    0, 1266, 1266, 1266, 1266, 1266,
     1266,    0, 1266, 1266, 1266, 1266, 1266,    0,    0, 1266,

     1267,    0, 1267, 1267, 1267, 1267, 1267, 1267,    0, 1267,
     1267, 1267, 1267, 1267,    0,    0, 1267, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1269,    0,    0, 1269,    0,    0,
     1269,    0,    0,    0,    0,    0,    0,    0, 1269,    0,
        0,    0, 1269,    0, 1269, 1269, 1269,    0,    0, 1269,
     1270,    0, 1270, 1270, 1270, 1270, 1270,    0,    0, 1270,
     1270, 1270, 1270, 1270,    0,    0, 1270, 1271,    0, 1271,
     1271, 1271, 1271, 1271,    0,    0, 1271, 1271, 1271, 1271,

     1271,    0,    0, 1271, 1272, 1272, 1272, 1272,    0, 1272,
        0,    0,    0,    0,    0,    0,    0,    0, 1272, 1272,
        0,    0, 1272,    0, 1272, 1272, 1272,    0,    0, 1272,
     1273, 1273, 1273, 1273,    0, 1273,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1273,    0,    0, 1273,    0,
     1273, 1273, 1273,    0,    0, 1273, 1274, 1274, 1274, 1274,
        0, 1274,    0,    0,    0,    0,    0,    0,    0,    0,
     1274, 1274,    0,    0, 1274,    0, 1274, 1274, 1274,    0,
        0, 1274, 1275,    0,    0,    0, 1275,    0, 1275, 1275,
     1275,    0,    0, 1275, 1276,    0, 1276, 1276, 1276,    0,

        0, 1276, 1277,    0, 1277,    0,    0,    0, 1277,    0,
     1277, 1277, 1277,    0,    0, 1277, 1278,    0, 1278, 1278,
     1278,    0,    0, 1278, 1279,    0,    0,    0, 1279,    0,
     1279, 1279, 1279,    0,    0, 1279, 1280, 1280, 1280, 1280,
     1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280,
     1280,    0, 1280, 1280, 1280,    0, 1280,    0,    0, 1280,
     1280, 1280, 1280, 1281,    0, 1281, 1281, 1281,    0,    0,
     1281, 1282,    0, 1282, 1282, 1282,    0,    0, 1282, 1284,
     1284,    0, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,

     1284, 1284, 1284, 1284, 1284, 1284, 1285,    0,    0, 1285,
        0,    0,    0, 1285,    0, 1285, 1285, 1285, 1286,    0,
     1286,    0, 1286, 1286,    0, 1286,    0,    0, 1286, 1286,
        0, 1286, 1286, 1286, 1287, 1287,    0, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,
     1287, 1289,    0,    0, 1289,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1289,
        0, 1289, 1289, 1289, 1290, 1290,    0, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,

     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1291, 1291, 1291, 1291, 1291, 1292,    0,    0, 1292,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1292, 1292, 1292, 1292, 1292, 1293,
        0, 1293, 1293, 1293, 1293, 1293,    0,    0, 1293, 1293,
     1293, 1293, 1293,    0,    0, 1293, 1294,    0, 1294, 1294,
     1294, 1294, 1294,    0,    0, 1294, 1294, 1294, 1294, 1294,
        0,    0, 1294, 1295,    0, 1295, 1295, 1295, 1295, 1295,
     1295,    0, 1295, 1295, 1295, 1295, 1295,    0,    0, 1295,
     1296,    0, 1296, 1296, 1296,    0,    0, 1296, 1297, 1297,

        0, 1297,    0,    0,    0, 1297,    0, 1297, 1297, 1297,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,    0,
     1298,    0,    0,    0, 1298, 1298, 1298, 1299, 1299, 1299,
     1299,    0, 1299,    0,    0,    0,    0,    0,    0,    0,
        0, 1299, 1299,    0,    0, 1299,    0, 1299, 1299, 1299,
        0,    0, 1299, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,    0, 1300,
     1300, 1300,    0, 1300,    0, 1300,    0, 1300, 1300, 1300,
     1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301,

     1301, 1301, 1301, 1301, 1301,    0, 1301, 1301, 1301,    0,
     1301,    0,    0,    0, 1301, 1301, 1301, 1302, 1302, 1302,
     1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
     1302, 1302,    0, 1302, 1302, 1302,    0, 1302,    0,    0,
        0, 1302, 1302, 1302, 1303, 1303, 1303, 1303, 1303, 1303,
     1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303,    0,
     1303, 1303, 1303,    0, 1303,    0,    0,    0, 1303, 1303,
     1303, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304,    0, 1304, 1304, 1304,
        0, 1304,    0,    0,    0, 1304, 1304, 1304, 1094, 1094,

     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094
    } ;

extern int commentScanYY_flex_debug;
int commentScanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *commentScanYYtext;
#line 1 "commentscan.l"
/*****************************************************************************
 *
 * Copyright (C) 1997-2012 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 17 "commentscan.l"

/*
 *	includes
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include "qtbc.h"
#include <qarray.h>
#include <qstack.h>
#include <qregexp.h>
#include <unistd.h>
#include <qfile.h>
  
#include "scanner.h"
#include "entry.h"
#include "doxygen.h"
#include "message.h"
#include "config.h"
#include "util.h"
#include "index.h"
#include "defargs.h"
#include "language.h"
#include "outputlist.h"
#include "membergroup.h"
#include "reflist.h"
#include "debug.h"
#include "parserintf.h"
#include "cite.h"
#include "markdown.h"

// forward declarations
static bool handleBrief(const QCString &);
static bool handleFn(const QCString &);
static bool handleDef(const QCString &);
static bool handleOverload(const QCString &);
static bool handleEnum(const QCString &);
static bool handleDefGroup(const QCString &);
static bool handleAddToGroup(const QCString &);
static bool handleWeakGroup(const QCString &);
static bool handleNamespace(const QCString &);
static bool handlePackage(const QCString &);
static bool handleClass(const QCString &);
static bool handleHeaderFile(const QCString &);
static bool handleProtocol(const QCString &);
static bool handleCategory(const QCString &);
static bool handleUnion(const QCString &);
static bool handleStruct(const QCString &);
static bool handleInterface(const QCString &);
static bool handleIdlException(const QCString &);
static bool handlePage(const QCString &);
static bool handleMainpage(const QCString &);
static bool handleFile(const QCString &);
static bool handleDir(const QCString &);
static bool handleExample(const QCString &);
static bool handleDetails(const QCString &);
static bool handleName(const QCString &);
static bool handleTodo(const QCString &);
static bool handleTest(const QCString &);
static bool handleBug(const QCString &);
static bool handleSubpage(const QCString &s);
static bool handleDeprecated(const QCString &);
static bool handleXRefItem(const QCString &);
static bool handleRelated(const QCString &);
static bool handleRelatedAlso(const QCString &);
static bool handleMemberOf(const QCString &);
static bool handleRefItem(const QCString &);
static bool handleSection(const QCString &);
static bool handleAnchor(const QCString &);
static bool handleCite(const QCString &);
static bool handleFormatBlock(const QCString &);
static bool handleAddIndex(const QCString &);
static bool handleIf(const QCString &);
static bool handleIfNot(const QCString &);
static bool handleElseIf(const QCString &);
static bool handleElse(const QCString &);
static bool handleEndIf(const QCString &);
static bool handleIngroup(const QCString &);
static bool handleNoSubGrouping(const QCString &);
static bool handleShowInitializer(const QCString &);
static bool handleHideInitializer(const QCString &);
static bool handleCallgraph(const QCString &);
static bool handleCallergraph(const QCString &);
static bool handleInternal(const QCString &);
static bool handleLineBr(const QCString &);
static bool handleStatic(const QCString &);
static bool handlePure(const QCString &);
static bool handlePrivate(const QCString &);
static bool handlePrivateSection(const QCString &);
static bool handleProtected(const QCString &);
static bool handleProtectedSection(const QCString &);
static bool handlePublic(const QCString &s);
static bool handlePublicSection(const QCString &s);
static bool handleToc(const QCString &s);
static bool handleInherit(const QCString &);
static bool handleExtends(const QCString &);
static bool handleCopyDoc(const QCString &);

typedef bool (*DocCmdFunc)(const QCString &name);

struct DocCmdMap
{
  const char *cmdName;
  DocCmdFunc handler;
  bool endsBrief;
};

// map of command to handler function
static DocCmdMap docCmdMap[] =
{
  // command name      handler function         ends brief description
  { "brief",           &handleBrief,            FALSE },
  { "short",           &handleBrief,            FALSE },
  { "fn",              &handleFn,               FALSE },
  { "var",             &handleFn,               FALSE },
  { "typedef",         &handleFn,               FALSE },
  { "property",        &handleFn,               FALSE },
  { "def",             &handleDef,              FALSE },
  { "overload",        &handleOverload,         FALSE },
  { "enum",            &handleEnum,             FALSE },
  { "defgroup",        &handleDefGroup,         FALSE },
  { "addtogroup",      &handleAddToGroup,       FALSE },
  { "weakgroup",       &handleWeakGroup,        FALSE },
  { "namespace",       &handleNamespace,        FALSE },
  { "package",         &handlePackage,          FALSE },
  { "class",           &handleClass,            FALSE },
  { "headerfile",      &handleHeaderFile,       FALSE },
  { "protocol",        &handleProtocol,         FALSE },
  { "category",        &handleCategory,         FALSE },
  { "union",           &handleUnion,            FALSE },
  { "struct",          &handleStruct,           FALSE },
  { "interface",       &handleInterface,        FALSE },
  { "idlexcept",       &handleIdlException,     FALSE },
  { "page",            &handlePage,             FALSE },
  { "mainpage",        &handleMainpage,         FALSE },
  { "file",            &handleFile,             FALSE },
  { "dir",             &handleDir,              FALSE },
  { "example",         &handleExample,          FALSE },
  { "details",         &handleDetails,          TRUE  },
  { "name",            &handleName,             FALSE },
  { "todo",            &handleTodo,             FALSE }, // end brief will be done differently
  { "test",            &handleTest,             FALSE }, // end brief will be done differently
  { "bug",             &handleBug,              FALSE }, // end brief will be done differently
  { "deprecated",      &handleDeprecated,       FALSE }, // end brief will be done differently
  { "xrefitem",        &handleXRefItem,         FALSE }, // end brief will be done differently
  { "related",         &handleRelated,          TRUE  },
  { "relates",         &handleRelated,          TRUE  },
  { "relatedalso",     &handleRelatedAlso,      TRUE  },
  { "relatesalso",     &handleRelatedAlso,      TRUE  },
  { "refitem",         &handleRefItem,          TRUE  },
  { "cite",            &handleCite,             TRUE  },
  { "subpage",         &handleSubpage,          TRUE  },
  { "section",         &handleSection,          TRUE  },
  { "subsection",      &handleSection,          TRUE  },
  { "subsubsection",   &handleSection,          TRUE  },
  { "paragraph",       &handleSection,          TRUE  },
  { "anchor",          &handleAnchor,           TRUE  },
  { "verbatim",        &handleFormatBlock,      TRUE },
  { "latexonly",       &handleFormatBlock,      FALSE },
  { "htmlonly",        &handleFormatBlock,      FALSE },
  { "xmlonly",         &handleFormatBlock,      FALSE },
  { "rtfonly",         &handleFormatBlock,      FALSE },
  { "manonly",         &handleFormatBlock,      FALSE },
  { "dot",             &handleFormatBlock,      TRUE  },
  { "msc",             &handleFormatBlock,      TRUE  },
  { "code",            &handleFormatBlock,      TRUE  },
  { "addindex",        &handleAddIndex,         FALSE },
  { "if",              &handleIf,               FALSE },
  { "ifnot",           &handleIfNot,            FALSE },
  { "elseif",          &handleElseIf,           FALSE },
  { "else",            &handleElse,             FALSE },
  { "endif",           &handleEndIf,            FALSE },
  { "ingroup",         &handleIngroup,          FALSE },
  { "nosubgrouping",   &handleNoSubGrouping,    FALSE },
  { "showinitializer", &handleShowInitializer,  FALSE },
  { "hideinitializer", &handleHideInitializer,  FALSE },
  { "callgraph",       &handleCallgraph,        FALSE },
  { "callergraph",     &handleCallergraph,      FALSE },
  { "internal",        &handleInternal,         TRUE  },
  { "_linebr",         &handleLineBr,           FALSE },
  { "static",          &handleStatic,           FALSE },
  { "pure",            &handlePure,             FALSE },
  { "private",         &handlePrivate,          FALSE },
  { "privatesection",  &handlePrivateSection,   FALSE },
  { "protected",       &handleProtected,        FALSE },
  { "protectedsection",&handleProtectedSection, FALSE },
  { "public",          &handlePublic,           FALSE },
  { "publicsection",   &handlePublicSection,    FALSE },
  { "tableofcontents", &handleToc,              FALSE },
  { "inherit",         &handleInherit,          TRUE  },
  { "extends",         &handleExtends,          TRUE  },
  { "implements",      &handleExtends,          TRUE  },
  { "memberof",        &handleMemberOf,         TRUE  },
  { "arg",             0,                       TRUE  },
  { "attention",       0,                       TRUE  },
  { "author",          0,                       TRUE  },
  { "authors",         0,                       TRUE  },
  { "copydoc",         &handleCopyDoc,          TRUE  },
  { "copybrief",       0,                       FALSE },
  { "copydetails",     0,                       TRUE  },
  { "date",            0,                       TRUE  },
  { "dotfile",         0,                       TRUE  },
  { "htmlinclude",     0,                       FALSE },
  { "image",           0,                       TRUE  },
  { "include",         0,                       TRUE  },
  { "includelineno",   0,                       TRUE  },
  { "invariant",       0,                       TRUE  },
  { "li",              0,                       TRUE  },
  { "line",            0,                       TRUE  },
  { "note",            0,                       TRUE  },
  { "par",             0,                       TRUE  },
  { "param",           0,                       TRUE  },
  { "tparam",          0,                       TRUE  },
  { "post",            0,                       TRUE  },
  { "pre",             0,                       TRUE  },
  { "remark",          0,                       TRUE  },
  { "remarks",         0,                       TRUE  },
  { "result",          0,                       TRUE  },
  { "return",          0,                       TRUE  },
  { "returns",         0,                       TRUE  },
  { "retval",          0,                       TRUE  },
  { "sa",              0,                       TRUE  },
  { "see",             0,                       TRUE  },
  { "since",           0,                       TRUE  },
  { "throw",           0,                       TRUE  },
  { "throws",          0,                       TRUE  },
  { "until",           0,                       TRUE  },
  { "verbinclude",     0,                       FALSE },
  { "version",         0,                       TRUE  },
  { "warning",         0,                       TRUE  },
  { 0, 0, FALSE }
};

/** @brief Command mapper.
 *
 *  Maps a command name (as found in a comment block) onto a
 *  specific handler function.
 */
class DocCmdMapper
{
  public:
    struct Cmd
    {
      DocCmdFunc func;
      bool endsBrief;
    };

    /** maps a command name to a handler function */
    static Cmd *map(const char *name)
    {
      return instance()->find(name);
    }

    /** release the singleton */
    static void freeInstance()
    {
      delete s_instance; s_instance=0;
    }

  private:
    static DocCmdMapper *instance()
    {
      if (s_instance==0) s_instance = new DocCmdMapper;
      return s_instance;
    }

    DocCmdMapper() : m_map(113)
    {
      m_map.setAutoDelete(TRUE);
      DocCmdMap *p = docCmdMap;
      while (p->cmdName)
      {
	if (m_map.find(p->cmdName)!=0)
	{
	  printf("Error: DocCmdMapper: command %s already added\n",p->cmdName);
	  exit(1);
	}
	Cmd *cmd = new Cmd;
	cmd->func = p->handler;
	cmd->endsBrief = p->endsBrief;
	m_map.insert(p->cmdName,cmd);
	p++;
      }
    }

    Cmd *find(const char *name)
    {
      return m_map.find(name);
    }
    QDict<Cmd> m_map;
    static DocCmdMapper *s_instance;
};

DocCmdMapper *DocCmdMapper::s_instance=0;
  
  
#define YY_NEVER_INTERACTIVE 1

enum XRefKind
{
  XRef_Item,
  XRef_Todo,
  XRef_Test,
  XRef_Bug,
  XRef_Deprecated,
  XRef_None
};

enum OutputContext
{
  OutputDoc,
  OutputBrief,
  OutputXRef,
  OutputInbody
};

enum GuardType
{
  Guard_If,
  Guard_IfNot,
  Guard_Skip
};

class GuardedSection
{
  public:
    GuardedSection(bool enabled,bool parentVisible) 
      : m_enabled(enabled),m_parentVisible(parentVisible) {}
    bool isEnabled() const { return m_enabled; }
    bool parentVisible() const { return m_parentVisible; }
  
  private:
    bool m_enabled;
    bool m_parentVisible;
};

void openGroup(Entry *e,const char *file,int line);
void closeGroup(Entry *e,const char *file,int line,bool foundInline=FALSE);
void initGroupInfo(Entry *e);
static void groupAddDocs(Entry *e,const char *fileName);

/* -----------------------------------------------------------------
 *
 *	statics
 */

static ParserInterface *langParser;          // the language parser that is calling us
static QCString         inputString;         // input string
static int		inputPosition;       // read pointer
static QCString		yyFileName;          // file name that is read from
static int		yyLineNr;            // line number in the input
static bool             inBody;              // was the comment found inside the body of a function?
static OutputContext    inContext;           // are we inside the brief, details or xref part
static bool             briefEndsAtDot;      // does the brief description stop at a dot?
static QCString         formulaText;         // Running text of a formula
static QCString         formulaEnv;          // environment name
static int              formulaNewLines;     // amount of new lines in the formula
static QCString        *pOutputString;       // pointer to string to which the output is appended.
static QCString         outputXRef;          // temp argument of todo/test/../xrefitem commands
static QCString         blockName;           // preformatted block name (e.g. verbatim, latexonly,...)
static XRefKind         xrefKind;            // kind of cross-reference command
static XRefKind         newXRefKind;         // 
static GuardType        guardType;           // kind of guard for conditional section
static bool             enabledSectionFound;
static QCString         functionProto;       // function prototype
static QStack<GuardedSection> guards;        // tracks nested conditional sections (if,ifnot,..)
static Entry*		current      = 0 ;   // working entry
//static Entry*		current_root = 0 ;   // parent of working entry


//static Entry*		previous     = 0 ;   // TODO: remove need for this
static bool             needNewEntry;

static QCString         g_sectionLabel;
static QCString		g_sectionTitle;
static int              g_sectionLevel;
static QCString         xrefItemKey;
static QCString         newXRefItemKey;
static QCString         xrefItemTitle;
static QCString         xrefListTitle;
static Protection	protection;

static bool             xrefAppendFlag;
static bool             inGroupParamFound;
static int              braceCount;
static bool             insidePre;
static bool             parseMore;
static int              g_condCount;

static int              g_commentCount;
static bool             g_spaceBeforeCmd;
static bool             g_spaceBeforeIf;
static QCString         g_copyDocArg;

//-----------------------------------------------------------------------------

static QStack<Grouping> g_autoGroupStack;
static int              g_memberGroupId = DOX_NOGROUP;
static QCString         g_memberGroupHeader;
static QCString         g_memberGroupDocs;
static QCString         g_memberGroupRelates;
static QCString         g_compoundName;

//-----------------------------------------------------------------------------

static void initParser()
{
  g_sectionLabel.resize(0);
  g_sectionTitle.resize(0);
  g_memberGroupHeader.resize(0);
}

//-----------------------------------------------------------------------------

static bool getDocSectionName(int s)
{
  switch(s)
  {
    case Entry::CLASSDOC_SEC:
    case Entry::STRUCTDOC_SEC:
    case Entry::UNIONDOC_SEC:
    case Entry::EXCEPTIONDOC_SEC:
    case Entry::NAMESPACEDOC_SEC:
    case Entry::PROTOCOLDOC_SEC:
    case Entry::CATEGORYDOC_SEC:
    case Entry::ENUMDOC_SEC:
    case Entry::PAGEDOC_SEC:
    case Entry::VARIABLEDOC_SEC:
    case Entry::MEMBERDOC_SEC:
    case Entry::OVERLOADDOC_SEC:
    case Entry::FILEDOC_SEC:
    case Entry::DEFINEDOC_SEC:
    case Entry::GROUPDOC_SEC:
    case Entry::MAINPAGEDOC_SEC:
    case Entry::PACKAGEDOC_SEC:
    case Entry::DIRDOC_SEC:
    case Entry::EXAMPLE_SEC:
    case Entry::MEMBERGRP_SEC:
      return TRUE;
    default: 
      return FALSE;
  }
}

//-----------------------------------------------------------------------------

static bool makeStructuralIndicator(Entry::Sections s)
{
  //printf("current->section=%x\n",current->section);
  if (getDocSectionName(current->section))
  {
    return TRUE;
  }
  else
  {
    needNewEntry = TRUE;
    current->section = s;
    current->fileName = yyFileName;
    current->startLine = yyLineNr;
    return FALSE;
  }
}

static void lineCount()
{
  for( const char* c = commentScanYYtext ; *c ; ++c )
    yyLineNr += (*c == '\n') ;
}


static QCString stripQuotes(const char *s)
{
  QCString name;
  if (s==0 || *s==0) return name;
  name=s;
  if (name.at(0)=='"' && name.at(name.length()-1)=='"')
  {
    name=name.mid(1,name.length()-2);
  }
  return name;
}

//-----------------------------------------------------------------

static void addXRefItem(const char *listName,const char *itemTitle,
                        const char *listTitle,bool append)
{
  Entry *docEntry = current; // inBody && previous ? previous : current;
  if (listName==0) return;
  //printf("addXRefItem(%s,%s,%s,%d)\n",listName,itemTitle,listTitle,append);

  ListItemInfo *lii=0;
  RefList *refList = Doxygen::xrefLists->find(listName);
  if (refList==0) // new list
  {
    refList = new RefList(listName,listTitle,itemTitle);
    Doxygen::xrefLists->insert(listName,refList);
    //printf("new list!\n");
  }
  if (docEntry->sli)
  {
    QListIterator<ListItemInfo> slii(*docEntry->sli);
    for (slii.toFirst();(lii=slii.current());++slii)
    {
      if (strcmp(lii->type,listName)==0) 
      {
        //printf("found %s lii->type=%s\n",listName,lii->type);
        break;
      }
    }
  }
  if (lii && append) // already found item of same type just before this one
  {
    //printf("listName=%s item id = %d existing\n",listName,lii->itemId);
    RefItem *item = refList->getRefItem(lii->itemId);
    ASSERT(item!=0);
    item->text += " <p>";
    item->text += outputXRef;
    //printf("%s: text +=%s\n",listName,item->text.data());
  }
  else // new item
  {
    int itemId  = refList->addRefItem();
    //printf("listName=%s item id = %d new current=%p\n",listName,itemId,current);

    // if we have already an item from the same list type (e.g. a second @todo)
    // in the same Entry (i.e. lii!=0) then we reuse its link anchor.
    char anchorLabel[1024];
    //sprintf(anchorLabel,"_%s%06d",listName,lii ? lii->itemId : itemId);
    sprintf(anchorLabel,"_%s%06d",listName,itemId);
    RefItem *item = refList->getRefItem(itemId);
    ASSERT(item!=0);
    item->text = outputXRef;
    item->listAnchor = anchorLabel;
    docEntry->addSpecialListItem(listName,itemId);
    QCString cmdString;
    cmdString.sprintf("\\xrefitem %s %d.",listName,itemId);
    if (inBody)
    {
      docEntry->inbodyDocs += cmdString;
    }
    else
    {
      docEntry->doc += cmdString;
    }
    SectionInfo *si=new SectionInfo(listName,anchorLabel,
	                            g_sectionTitle,SectionInfo::Anchor,
                                    g_sectionLevel);
    Doxygen::sectionDict.append(anchorLabel,si);
    docEntry->anchors->append(si);
  }
  outputXRef.resize(0);
}

//-----------------------------------------------------------------------------

// Adds a formula text to the list/dictionary of formulas if it was
// not already added. Returns the label of the formula.
static QCString addFormula()
{
  QCString formLabel;
  QCString fText=formulaText.simplifyWhiteSpace();
  Formula *f=0;
  if ((f=Doxygen::formulaDict[fText])==0)
  {
    f = new Formula(fText);
    Doxygen::formulaList.append(f);
    Doxygen::formulaDict.insert(fText,f);
    formLabel.sprintf("\\form#%d",f->getId());
    Doxygen::formulaNameDict.insert(formLabel,f);
  }
  else
  {
    formLabel.sprintf("\\form#%d",f->getId());
  }
  int i;
  for (i=0;i<formulaNewLines;i++) formLabel+="@_fakenl"; // add fake newlines to
                                                         // keep the warnings 
                                                         // correctly aligned.
  return formLabel;
}

//-----------------------------------------------------------------------------

static void checkFormula();
//-----------------------------------------------------------------------------

static SectionInfo::SectionType sectionLevelToType(int level)
{
  if (level>=0 && level<5) return (SectionInfo::SectionType)level;
  return SectionInfo::Anchor;
}

static void addSection()
{
  // create a new section element
  g_sectionTitle+=commentScanYYtext;
  g_sectionTitle=g_sectionTitle.stripWhiteSpace();
  SectionInfo *si = new SectionInfo(yyFileName,g_sectionLabel,
                          g_sectionTitle,sectionLevelToType(g_sectionLevel),g_sectionLevel);

  // add section to this entry
  current->anchors->append(si);

  // add section to the global dictionary
  Doxygen::sectionDict.append(g_sectionLabel,si);

}

//-----------------------------------------------------------------------------

static void addCite()
{
  Doxygen::citeDict->insert(commentScanYYtext);
}

//-----------------------------------------------------------------------------

// strip trailing whitespace (excluding newlines) from string s
static void stripTrailingWhiteSpace(QCString &s)
{
  uint len = s.length();
  int i = (int)len-1;
  char c;
  while (i>=0 && ((c = s.at(i))==' ' || c=='\t' || c=='\r')) i--;
  if (i!=(int)len-1) 
  {
    s.resize(i+2); // string upto and including char at pos i and \0 terminator
  }
}

// selects the output to write to
static inline void setOutput(OutputContext ctx)
{
  bool xrefAppendToPrev = xrefAppendFlag;
  // determine append flag for the next item (i.e. the end of this item)
  xrefAppendFlag = !inBody &&
                   inContext==OutputXRef && ctx==OutputXRef && // two consecutive xref items
                   newXRefKind==xrefKind &&                    // of the same kind
                   (xrefKind!=XRef_Item || 
		    newXRefItemKey==xrefItemKey);              // with the same key if \xrefitem
  //printf("%d && %d && %d && (%d || %d)\n",
  //                 inContext==OutputXRef,
  //                 ctx==OutputXRef,
  //                 newXRefKind==xrefKind,
  //                 xrefKind!=XRef_Item,
  //	  	     newXRefItemKey==xrefItemKey);
      
  //printf("refKind=%d newXRefKind=%d xrefAppendToPrev=%d xrefAppendFlag=%d\n",
  //   	  xrefKind,newXRefKind,xrefAppendToPrev,xrefAppendFlag);

  //printf("setOutput(inContext=%d ctx=%d)\n",inContext,ctx);
  if (inContext==OutputXRef) // end of XRef section => add the item 
  {
    // See if we can append this new xref item to the previous one.
    // We know this at the start of the next item of the same
    // type and need to remember this until the end of that item.
    switch(xrefKind)
    {
      case XRef_Todo:
	addXRefItem("todo",
	            theTranslator->trTodo(),
	            theTranslator->trTodoList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Test:
	addXRefItem("test",
	            theTranslator->trTest(),
		    theTranslator->trTestList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Bug:
	addXRefItem("bug",
	            theTranslator->trBug(),
		    theTranslator->trBugList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Deprecated:
	addXRefItem("deprecated",
	            theTranslator->trDeprecated(),
		    theTranslator->trDeprecatedList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Item:  // user defined list
	addXRefItem(xrefItemKey,
	            xrefItemTitle,
		    xrefListTitle,
		    xrefAppendToPrev
		   );
	break;
      case XRef_None:
	ASSERT(0);
	break;
    }
  }
  xrefItemKey = newXRefItemKey;

  int oldContext = inContext;
  inContext = ctx;
  if (inContext!=OutputXRef && inBody) inContext=OutputInbody;
  switch(inContext)
  {
    case OutputDoc:
      if (oldContext!=inContext)
      {
        stripTrailingWhiteSpace(current->doc);
        if (current->docFile.isEmpty())
        {
          current->docFile = yyFileName;
          current->docLine = yyLineNr;
        }
      }
      pOutputString = &current->doc;
      break;
    case OutputBrief:
      if (oldContext!=inContext)
      {
	if (current->briefFile.isEmpty())
	{
	  current->briefFile = yyFileName;
	  current->briefLine = yyLineNr;
	}
      }
      if (current->brief.stripWhiteSpace().isEmpty()) // we only want one brief
	                                              // description even if multiple
	                                              // are given...
      {
        pOutputString = &current->brief;
      }
      else
      {
        pOutputString = &current->doc;
	inContext = OutputDoc; // need to switch to detailed docs, see bug 631380
      }
      break;
    case OutputXRef:
      pOutputString = &outputXRef;
      // first item found, so can't append to previous
      //xrefAppendFlag = FALSE;
      break;
    case OutputInbody:
      pOutputString = &current->inbodyDocs;
      break;
  }
}

// add a string to the output
static inline void addOutput(const char *s)
{
  //printf("addOutput(%s)\n",s);
  *pOutputString+=s;
}

// add a character to the output
static inline void addOutput(char c)
{
  *pOutputString+=c;
}

static void endBrief(bool addToOutput=TRUE)
{
  if (!current->brief.stripWhiteSpace().isEmpty())
  { // only go to the detailed description if we have
    // found some brief description and not just whitespace
    briefEndsAtDot=FALSE;
    setOutput(OutputDoc);
    if (addToOutput) addOutput(commentScanYYtext);
  }
}

/* ----------------------------------------------------------------- */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int prevPosition=0;

static int yyread(char *buf,int max_size)
{
    prevPosition=inputPosition;
    int c=0;
    while( c < max_size && inputString[inputPosition] )
    {
	*buf = inputString[inputPosition++] ;
	//printf("%d (%c)\n",*buf,*buf);
	c++; buf++;
    }
    return c;
}

/* start command character */
/* comment parsing states. */








































#line 3563 "<stdout>"

#define INITIAL 0
#define Comment 1
#define PageDocArg1 2
#define PageDocArg2 3
#define RelatesParam1 4
#define ClassDocArg1 5
#define ClassDocArg2 6
#define ClassDocArg3 7
#define CategoryDocArg1 8
#define XRefItemParam1 9
#define XRefItemParam2 10
#define XRefItemParam3 11
#define FileDocArg1 12
#define EnumDocArg1 13
#define NameSpaceDocArg1 14
#define PackageDocArg1 15
#define GroupDocArg1 16
#define GroupDocArg2 17
#define SectionLabel 18
#define SectionTitle 19
#define SubpageLabel 20
#define SubpageTitle 21
#define FormatBlock 22
#define LineParam 23
#define GuardParam 24
#define GuardParamEnd 25
#define SkipGuardedSection 26
#define SkipInternal 27
#define NameParam 28
#define InGroupParam 29
#define FnParam 30
#define OverloadParam 31
#define InheritParam 32
#define ExtendsParam 33
#define ReadFormulaShort 34
#define ReadFormulaLong 35
#define AnchorLabel 36
#define HtmlComment 37
#define SkipLang 38
#define CiteLabel 39
#define CopyDoc 40

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int commentScanYYlex_destroy (void );

int commentScanYYget_debug (void );

void commentScanYYset_debug (int debug_flag  );

YY_EXTRA_TYPE commentScanYYget_extra (void );

void commentScanYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *commentScanYYget_in (void );

void commentScanYYset_in  (FILE * in_str  );

FILE *commentScanYYget_out (void );

void commentScanYYset_out  (FILE * out_str  );

yy_size_t commentScanYYget_leng (void );

char *commentScanYYget_text (void );

int commentScanYYget_lineno (void );

void commentScanYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int commentScanYYwrap (void );
#else
extern int commentScanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 262144
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( commentScanYYtext, commentScanYYleng, 1, commentScanYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( commentScanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( commentScanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, commentScanYYin))==0 && ferror(commentScanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(commentScanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int commentScanYYlex (void);

#define YY_DECL int commentScanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after commentScanYYtext and commentScanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( commentScanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(commentScanYYtext[commentScanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 902 "commentscan.l"


  /* What can happen in while parsing a comment block:
   *   commands (e.g. @page, or \page)
   *   escaped commands (e.g. @@page or \\page).
   *   formulas (e.g. \f$ \f[ \f{..)
   *   directories (e.g. \doxygen\src\)
   *   autolist end. (e.g. a dot on an otherwise empty line)
   *   newlines.
   *   end of brief description due to blank line.
   *   end of brief description due to some command (@command, or <command>).
   *   words and whitespace and other characters (#,?!, etc).
   *   grouping commands (e.g. @{ and @})
   *   language switch (e.g. \~english or \~).
   *   mail adress (e.g. dimitri@stack.nl).
   *   quoted text, such as "foo@bar"
   *   XML commands, <summary></summary><remarks></remarks>
   */

#line 3808 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)commentScanYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in commentScanYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! commentScanYYin )
			commentScanYYin = stdin;

		if ( ! commentScanYYout )
			commentScanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			commentScanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE );
		}

		commentScanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of commentScanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1095 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 7799 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 921 "commentscan.l"
{ // escaped command
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 924 "commentscan.l"
{ // escaped command
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 927 "commentscan.l"
{ // mail adress
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 930 "commentscan.l"
{ // quoted text
                                          addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 933 "commentscan.l"
{ // directory (or chain of commands!)
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 936 "commentscan.l"
{ // xref command 
					  if (inContext!=OutputXRef) 
					  {
					    briefEndsAtDot=FALSE;
					    setOutput(OutputDoc);
					  }
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
/*
<Comment>{DETAILEDCMD}/[^a-z_A-Z]*	{ // command that can end a brief description
				          briefEndsAtDot=FALSE;
				          setOutput(OutputDoc);
					  // continue with the same input
                                          REJECT;
					}
   */
case 7:
YY_RULE_SETUP
#line 953 "commentscan.l"
{ // HTML command that ends a brief description
					  setOutput(OutputDoc);
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 958 "commentscan.l"
{ // start of a .NET XML style brief description
					  setOutput(OutputBrief);
  					}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 961 "commentscan.l"
{ // start of a .NET XML style detailed description
					  setOutput(OutputDoc);
  					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 964 "commentscan.l"
{ // end of a brief or detailed description
  					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 966 "commentscan.l"
{ // RCS tag which end a brief description
  					  setOutput(OutputDoc);
					  REJECT;
  					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 970 "commentscan.l"
{ 
  					  BEGIN(HtmlComment);
					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 973 "commentscan.l"
{
  					  warn(yyFileName,yyLineNr,
                                               "warning: found \\endinternal without matching \\internal"
                                              );
  					}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 978 "commentscan.l"
{ // potentially interesting command
                                          // the {B}* in the front was added for bug620924
  					  QCString cmdName = QCString(commentScanYYtext).stripWhiteSpace().data()+1;
					  DocCmdMapper::Cmd *cmdPtr = DocCmdMapper::map(cmdName);
					  g_spaceBeforeCmd = commentScanYYtext[0]==' ' || commentScanYYtext[0]=='\t';
					  if (cmdPtr) // special action is required
					  {
					    if (cmdPtr->endsBrief)
					    { 
					      briefEndsAtDot=FALSE;
					      // this command forces the end of brief description
					      setOutput(OutputDoc);
					    }
					    if (cmdPtr->func && cmdPtr->func(cmdName))
					    {
					      // implicit split of the comment block into two
					      // entries. Restart the next block at the start
					      // of this command.
					      parseMore=TRUE;

					      // yuk, this is probably not very portable across lex implementations, 
					      // but we need to know the position in the input buffer where this 
					      // rule matched.
					      // for flex 2.5.33+ we should use YY_CURRENT_BUFFER_LVALUE
#if YY_FLEX_MINOR_VERSION>=5 && YY_FLEX_SUBMINOR_VERSION>=33
					      inputPosition=prevPosition + yy_bp - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
#else
					      inputPosition=prevPosition + yy_bp - yy_current_buffer->yy_ch_buf;
#endif
					      yyterminate();
					    }
					    else if (cmdPtr->func==0)
					    {
					      // command without handler, to be processed
					      // later by parsedoc.cpp
					      addOutput(commentScanYYtext);
					    }
					  }
					  else // command not relevant
					  {
					    addOutput(commentScanYYtext);
					  }
  					}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 1021 "commentscan.l"
{ // escaped formula command
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 1024 "commentscan.l"
{ // language switch command
                                          QCString langId = QString(commentScanYYtext).stripWhiteSpace().data()+2;
			       	          if (!langId.isEmpty() &&
					      stricmp(Config_getEnum("OUTPUT_LANGUAGE"),langId)!=0)
				          { // enable language specific section
				            BEGIN(SkipLang);
				          }
  					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 1032 "commentscan.l"
{ // start of a formula with custom environment
					  formulaText="\\begin";
					  formulaEnv=QString(commentScanYYtext).stripWhiteSpace().data()+2;
					  if (formulaEnv.at(formulaEnv.length()-1)=='{')
					  {
					    // remove trailing open brace
					    formulaEnv=formulaEnv.left(formulaEnv.length()-1);
					  }
					  formulaText+=formulaEnv;
					  formulaNewLines=0;
					  BEGIN(ReadFormulaLong);
  					}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 1044 "commentscan.l"
{ // start of a inline formula
					  formulaText="$";
					  formulaNewLines=0;
					  BEGIN(ReadFormulaShort);
  					}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 1049 "commentscan.l"
{ // start of a block formula
					  formulaText="\\[";
					  formulaNewLines=0;
					  BEGIN(ReadFormulaLong);
  					}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 1054 "commentscan.l"
{ // begin of a group
                                          //langParser->handleGroupStartCommand(g_memberGroupHeader);
                                          openGroup(current,yyFileName,yyLineNr);
                                        }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 1058 "commentscan.l"
{ // end of a group
                                          //langParser->handleGroupEndCommand();
                                          closeGroup(current,yyFileName,yyLineNr,TRUE);
                                          g_memberGroupHeader.resize(0);
					  parseMore=TRUE;
                                          needNewEntry = TRUE;
#if YY_FLEX_MINOR_VERSION>=5 && YY_FLEX_SUBMINOR_VERSION>=33
				          inputPosition=prevPosition + yy_bp - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + strlen(commentScanYYtext);
#else
				          inputPosition=prevPosition + yy_bp - yy_current_buffer->yy_ch_buf + strlen(commentScanYYtext);
#endif
					  yyterminate();
                                        }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 1071 "commentscan.l"
{ // escaped character
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 1074 "commentscan.l"
{ // normal word
					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 24:
/* rule 24 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1077 "commentscan.l"
{ // explicit end autolist: e.g "  ."
  				          addOutput(commentScanYYtext); 
					}
	YY_BREAK
case 25:
#line 1081 "commentscan.l"
case 26:
YY_RULE_SETUP
#line 1081 "commentscan.l"
{ // start of autolist
                                          if (!Doxygen::markdownSupport)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
                                            if (inContext!=OutputXRef) 
                                            {
                                              briefEndsAtDot=FALSE;
                                              setOutput(OutputDoc);
                                            }
                                            addOutput(commentScanYYtext); 
                                          }
  					}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 1096 "commentscan.l"
{ // start of autolist
					  if (inContext!=OutputXRef) 
					  {
					    briefEndsAtDot=FALSE;
					    setOutput(OutputDoc);
					  }
  				          addOutput(commentScanYYtext); 
  					}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 1104 "commentscan.l"
{ // . at start or in the middle of a word, or ellipsis
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 1107 "commentscan.l"
{ // . with escaped space.
  					  addOutput(commentScanYYtext[0]);
  					  addOutput(commentScanYYtext[2]);
  					}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 1111 "commentscan.l"
{ // . with comma such as "e.g.," 
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 1114 "commentscan.l"
{ // ellipsis with escaped space.
  					  addOutput("... ");
  					}
	YY_BREAK
case 32:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1117 "commentscan.l"
{ // internal ellipsis 
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 1120 "commentscan.l"
{ // at least one blank line (or blank line command)
					  if (inContext==OutputXRef)
					  {
					    // see bug 613024, we need to put the newlines after ending the XRef section.
					    setOutput(OutputDoc);
  					    addOutput("\n\n");
					  }
					  else if (inContext!=OutputBrief)
					  {
  					    addOutput("\n\n");
					    setOutput(OutputDoc);
					  }
					  else // inContext==OutputBrief
					  { // only go to the detailed description if we have
					    // found some brief description and not just whitespace
					    endBrief(FALSE);
					  }
  					  lineCount();
  					}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 1139 "commentscan.l"
{ // potential end of a JavaDoc style comment
  					  addOutput(*commentScanYYtext);
  					  if (briefEndsAtDot)
					  {
					    setOutput(OutputDoc);
					    briefEndsAtDot=FALSE;
					  }
  					}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 1147 "commentscan.l"
{ // newline
  					  addOutput(*commentScanYYtext);
  					  yyLineNr++;
  					}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 1151 "commentscan.l"
{ // catch-all for anything else
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* --------------   Rules for handling HTML comments ----------- */
case 37:
YY_RULE_SETUP
#line 1158 "commentscan.l"
{ BEGIN( Comment ); }
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 1159 "commentscan.l"
{ 
  					  if (*commentScanYYtext=='\n') yyLineNr++;
  					}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 1162 "commentscan.l"
{ // ignore unimportant characters
  					}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 1164 "commentscan.l"
{ // ignore every else
  					}
	YY_BREAK
/* --------------   Rules for handling formulas ---------------- */
case 41:
YY_RULE_SETUP
#line 1169 "commentscan.l"
{ // end of inline formula
  					  formulaText+="$";
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 1174 "commentscan.l"
{ // end of block formula
					  formulaText+="\\]";
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 1179 "commentscan.l"
{ // end of custom env formula
					  formulaText+="\\end";
					  formulaText+=formulaEnv;
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 1185 "commentscan.l"
{ // any non-special character
                                          formulaText+=commentScanYYtext; 
 					} 
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 1188 "commentscan.l"
{ // new line
                                          formulaNewLines++;
                                          formulaText+=*commentScanYYtext; 
					  yyLineNr++; 
					}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 1193 "commentscan.l"
{ // any othe character
                                          formulaText+=*commentScanYYtext; 
					}
	YY_BREAK
/* ------------ handle argument of enum command --------------- */
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 1199 "commentscan.l"
{ // handle argument
  					  current->name = commentScanYYtext;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 1203 "commentscan.l"
{ // line continuation
  					  yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 1207 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing argument after \\enum."
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 1215 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------------ handle argument of namespace command --------------- */
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 1220 "commentscan.l"
{ // handle argument
  					  current->name = substitute(commentScanYYtext,".","::");
					  BEGIN( Comment );
  					}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 1224 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 1228 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing argument after "
					       "\\namespace."
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 1237 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------------ handle argument of package command --------------- */
case 55:
YY_RULE_SETUP
#line 1242 "commentscan.l"
{ // handle argument
  					  current->name = commentScanYYtext;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 1246 "commentscan.l"
{ // line continuation 
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 1250 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing argument after "
					       "\\package."
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 1259 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------ handle argument of class/struct/union command --------------- */
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 1264 "commentscan.l"
{ // first argument
  					  current->name = substitute(commentScanYYtext,".","::");
					  if (current->section==Entry::PROTOCOLDOC_SEC)
					  {
					    current->name+="-p";
					  }
					  // prepend outer scope name 
					  BEGIN( ClassDocArg2 );
					}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 1273 "commentscan.l"
{
  					  current->name = substitute(commentScanYYtext,".","::");
					  BEGIN( ClassDocArg2 );
   					}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 1277 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 1281 "commentscan.l"
{
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing argument after "
					       "\\%s.",YY_START==ClassDocArg1?"class":"category"
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 1290 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 1293 "commentscan.l"
{ // second argument; include file
					  current->includeFile = commentScanYYtext;
					  BEGIN( ClassDocArg3 );
					}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 1297 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 1301 "commentscan.l"
{ 
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
					}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 1306 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 1309 "commentscan.l"
{ // third argument; include file name
 					  current->includeName = commentScanYYtext;
					  BEGIN( Comment );
					}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 1313 "commentscan.l"
{ // line continuation
                                          yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 1317 "commentscan.l"
{ 
  					  if (*commentScanYYtext=='\n') yyLineNr++;
  					  BEGIN( Comment );
					}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 1321 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* --------- handle arguments of {def,add,weak}group commands --------- */
case 72:
YY_RULE_SETUP
#line 1326 "commentscan.l"
{ // group name
  					  current->name = commentScanYYtext;
					  //lastDefGroup.groupname = commentScanYYtext;
					  //lastDefGroup.pri = current->groupingPri();
  					  // the .html stuff is for Qt compatibility
					  if (current->name.right(5)==".html") 
					  {
					    current->name=current->name.left(current->name.length()-5);
					  }
					  current->type.resize(0);
					  BEGIN(GroupDocArg2);
  					}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 1338 "commentscan.l"
{ // line continuation
  					  yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 1342 "commentscan.l"
{ // missing argument!
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing group name after %s",
					       current->groupDocCmd()
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 1351 "commentscan.l"
{ // line continuation
  					  yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 1355 "commentscan.l"
{ // title (stored in type)
					  current->type += commentScanYYtext;
					  current->type = current->type.stripWhiteSpace();
  					}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 1359 "commentscan.l"
{
                                          if ( current->groupDocType==Entry::GROUPDOC_NORMAL &&
                                               current->type.isEmpty() 
					     ) // defgroup requires second argument
					  {
  					    warn(yyFileName,yyLineNr,
                                                 "warning: missing title after "
					         "\\defgroup %s", current->name.data()
                                                );
					  }
  					  if (*commentScanYYtext=='\n') yyLineNr++; 
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
/* --------- handle arguments of page/mainpage command ------------------- */
case 78:
YY_RULE_SETUP
#line 1376 "commentscan.l"
{ // first argument; page name
					  current->name = stripQuotes(commentScanYYtext);
					  BEGIN( PageDocArg2 ); 
					}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 1380 "commentscan.l"
{ yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 1383 "commentscan.l"
{
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing argument after "
					       "\\page."
                                              );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 1392 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 1394 "commentscan.l"
{ // second argument; page title
  				          yyLineNr++;
					  current->args = commentScanYYtext;
					  addOutput('\n');
					  BEGIN( Comment );
					}
	YY_BREAK
/* --------- handle arguments of the file/dir/example command ------------ */
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 1403 "commentscan.l"
{ // no file name specfied
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
					}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 1408 "commentscan.l"
{ // first argument; name
  					  current->name = stripQuotes(commentScanYYtext);
					  BEGIN( Comment );
  				        }
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 1412 "commentscan.l"
{ yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 1415 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* --------- handle arguments of the xrefitem command ------------ */
case 87:
YY_RULE_SETUP
#line 1420 "commentscan.l"
{ // first argument
  					  newXRefItemKey=commentScanYYtext;
                                          setOutput(OutputXRef);
					  BEGIN(XRefItemParam2);
					}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 1425 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 1429 "commentscan.l"
{ // missing arguments
  					  warn(yyFileName,yyLineNr,
					       "warning: Missing first argument of \\xrefitem"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 1438 "commentscan.l"
{ // ignore other stuff 
  					}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 1441 "commentscan.l"
{ // second argument
  					  xrefItemTitle = stripQuotes(commentScanYYtext);
					  BEGIN(XRefItemParam3);
  					}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 1445 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 1449 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: Missing second argument of \\xrefitem"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 1458 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 1461 "commentscan.l"
{ // third argument
  					  xrefListTitle = stripQuotes(commentScanYYtext);
                                          xrefKind = XRef_Item;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 1466 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 1470 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: Missing third argument of \\xrefitem"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 1479 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle arguments of the relates(also)/memberof command ------- */
case 99:
YY_RULE_SETUP
#line 1485 "commentscan.l"
{ // argument
  					  current->relates = commentScanYYtext;
                                          //if (current->mGrpId!=DOX_NOGROUP) 
                                          //{
                                          //  memberGroupRelates = commentScanYYtext;
                                          //}
					  BEGIN( Comment );
					}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 1493 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 1497 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: Missing argument of \\relates or \\memberof command"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 1505 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle arguments of the relates(also)/addindex commands ----- */
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 1511 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 1516 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 1520 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* ----- handle arguments of the section/subsection/.. commands ------- */
case 106:
YY_RULE_SETUP
#line 1526 "commentscan.l"
{ // first argyment
  					  g_sectionLabel=commentScanYYtext;
                                          addOutput(commentScanYYtext);
					  g_sectionTitle.resize(0);
					  BEGIN(SectionTitle);
  					}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 1532 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\section command has no label"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 1540 "commentscan.l"
{ // invalid character for section label
  					  warn(yyFileName,yyLineNr,
					      "warning: Invalid or missing section label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
case 109:
/* rule 109 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1546 "commentscan.l"
{ // end of section title
  					  addSection();
                                          addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 110:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 8;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1551 "commentscan.l"
{ // end of section title
  					  addSection();
                                          addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 1556 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 1560 "commentscan.l"
{ // any character without special meaning
  					  g_sectionTitle+=commentScanYYtext;
					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 1564 "commentscan.l"
{ // unescape escaped command
  					  g_sectionTitle+=&commentScanYYtext[1];
					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 1568 "commentscan.l"
{ // unescape escaped character
  					  g_sectionTitle+=commentScanYYtext[1];
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 1572 "commentscan.l"
{ // anything else
  					  g_sectionTitle+=commentScanYYtext;
					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* ----- handle arguments of the subpage command ------- */
case 116:
YY_RULE_SETUP
#line 1579 "commentscan.l"
{ // first argument
                                          addOutput(commentScanYYtext);
					  // we add subpage labels as a kind of "inheritance" relation to prevent
					  // needing to add another list to the Entry class.
					  current->extends->append(new BaseInfo(commentScanYYtext,Public,Normal));
					  BEGIN(SubpageTitle);
  					}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 1586 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\subpage command has no label"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 1594 "commentscan.l"
{ // no title, end command
  					  addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 1598 "commentscan.l"
{ // add title, end of command
  					  addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 1602 "commentscan.l"
{ // no title, end of command
  					  unput(*commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
/* ----- handle arguments of the anchor command ------- */
case 121:
YY_RULE_SETUP
#line 1609 "commentscan.l"
{ // found argument
                                          SectionInfo  *si = new SectionInfo(yyFileName,commentScanYYtext,0,SectionInfo::Anchor,0);
                                          Doxygen::sectionDict.append(commentScanYYtext,si);
  					  current->anchors->append(si);
					  addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 1616 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\anchor command has no label"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 1624 "commentscan.l"
{ // invalid character for anchor label
  					  warn(yyFileName,yyLineNr,
					      "warning: Invalid or missing anchor label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle arguments of the preformatted block commands ------- */
case 124:
/* rule 124 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1634 "commentscan.l"
{ // possible ends
  					  addOutput(commentScanYYtext);
					  if (&commentScanYYtext[4]==blockName) // found end of the block
					  {
  					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1641 "commentscan.l"
{ // some word
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 1644 "commentscan.l"
{ // new line
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 1648 "commentscan.l"
{ // start of a C-comment
  					  g_commentCount++;
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 1652 "commentscan.l"
{ // end of a C-comment
  					  addOutput(commentScanYYtext);
  					  g_commentCount--;
					  if (g_commentCount<0 && blockName!="verbatim")
					  {
					    warn(yyFileName,yyLineNr,
					         "warning: found */ without matching /* while inside a \\%s block! Perhaps a missing \\end%s?\n",blockName.data(),blockName.data());
					  }
  					}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1661 "commentscan.l"
{
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
case YY_STATE_EOF(FormatBlock):
#line 1664 "commentscan.l"
{
                                          warn(yyFileName,yyLineNr,
	                                    "warning: reached end of comment while inside a @%s block; check for missing @end%s tag!",
	                                    blockName.data(),blockName.data()
	                                  );				
					  yyterminate();
    					}
	YY_BREAK
/* ----- handle arguments of if/ifnot commands ------- */
case 130:
YY_RULE_SETUP
#line 1674 "commentscan.l"
{ // parameter of if/ifnot guard
                                          bool sectionEnabled = Config_getList("ENABLED_SECTIONS").find(commentScanYYtext)!=-1;
					  bool parentEnabled = TRUE;
					  if (!guards.isEmpty()) parentEnabled = guards.top()->isEnabled();
					  if (parentEnabled)
					  {
					    if (
						(sectionEnabled && guardType==Guard_If) ||  
						(!sectionEnabled && guardType==Guard_IfNot)
					       ) // section is visible
					    {
					      guards.push(new GuardedSection(TRUE,TRUE));
					      enabledSectionFound=TRUE;
					      BEGIN( GuardParamEnd );
					    }
					    else // section is invisible
					    {
					      if (guardType!=Guard_Skip)
					      {
					      	guards.push(new GuardedSection(FALSE,TRUE));
					      }
					      BEGIN( SkipGuardedSection );
					    }
					  }
					  else // invisible because of parent
					  {
					    guards.push(new GuardedSection(FALSE,FALSE));
					    BEGIN( SkipGuardedSection );
					  }
  					}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 1704 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  //next line is commented out due to bug620924
					  //addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 1710 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 1714 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 1717 "commentscan.l"
{
  					  g_spaceBeforeIf=FALSE;
  					  BEGIN(Comment);
  					}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 1721 "commentscan.l"
{
  					  if (g_spaceBeforeIf) // needed for 665313 in combation with bug620924
					  {
					    addOutput(" ");
					  }
  					  g_spaceBeforeIf=FALSE;
  					  BEGIN(Comment);
  					}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 1729 "commentscan.l"
{
  					  unput(*commentScanYYtext);
  					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle skipping of conditional sections ------- */
case 137:
/* rule 137 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1736 "commentscan.l"
{
                                          guardType = Guard_IfNot;
  					  BEGIN( GuardParam );
  					}
	YY_BREAK
case 138:
/* rule 138 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1740 "commentscan.l"
{
                                          guardType = Guard_If;
  					  BEGIN( GuardParam );
  					}
	YY_BREAK
case 139:
/* rule 139 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1744 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"warning: found @endif without matching start command");
					  }
					  else
					  {
					    delete guards.pop();
					    BEGIN( GuardParamEnd );
					  }
  					}
	YY_BREAK
case 140:
/* rule 140 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1756 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"warning: found @else without matching start command");
					  }
					  else
					  {
					    if (!enabledSectionFound && guards.top()->parentVisible())
					    {
					      delete guards.pop();
					      guards.push(new GuardedSection(TRUE,TRUE));
					      enabledSectionFound=TRUE;
					      BEGIN( GuardParamEnd );
					    }
					  }
  					}
	YY_BREAK
case 141:
/* rule 141 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1773 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"warning: found @elseif without matching start command");
					  }
					  else
					  {
					    if (!enabledSectionFound && guards.top()->parentVisible())
					    {
					      delete guards.pop();
					      BEGIN( GuardParam );
					    }
					  }
  					}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 1788 "commentscan.l"
{ // skip line
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  //addOutput('\n');
  					}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 1792 "commentscan.l"
{ // skip non-special characters
  					}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1794 "commentscan.l"
{ // any other character
  					}
	YY_BREAK
/* ----- handle skipping of internal section ------- */
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 1800 "commentscan.l"
{ // skip line
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 146:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1804 "commentscan.l"
{
                                          g_condCount++;
  					}
	YY_BREAK
case 147:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1807 "commentscan.l"
{
                                          g_condCount++;
  					}
	YY_BREAK
case 148:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1810 "commentscan.l"
{
                                          g_condCount--;
					  if (g_condCount<0) // handle conditional section around of \internal, see bug607743  
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 149:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1818 "commentscan.l"
{
  					  if (g_sectionLevel>0)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 150:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1825 "commentscan.l"
{
  					  if (g_sectionLevel>1)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 151:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1832 "commentscan.l"
{
  					  if (g_sectionLevel>2)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 152:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1839 "commentscan.l"
{
  					  if (g_sectionLevel>3)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 1846 "commentscan.l"
{
					  BEGIN(Comment);
					}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 1849 "commentscan.l"
{ // skip non-special characters
  					}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 1851 "commentscan.l"
{ // any other character
  					}
	YY_BREAK
/* ----- handle argument of name command ------- */
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 1857 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 1862 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
					  g_memberGroupHeader+=' ';
  					}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 1867 "commentscan.l"
{ // ignore other stuff
					  g_memberGroupHeader+=*commentScanYYtext;
					  current->name+=*commentScanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of ingroup command ------- */
case 159:
YY_RULE_SETUP
#line 1874 "commentscan.l"
{ // group id
  					  current->groups->append(
					    new Grouping(commentScanYYtext, Grouping::GROUPING_INGROUP)
					  );
					  inGroupParamFound=TRUE;
  					}
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 1880 "commentscan.l"
{ // missing argument
  					  if (!inGroupParamFound)
					  {
  					    warn(yyFileName,yyLineNr,
					        "warning: Missing group name for \\ingroup command"
					        );
					  }
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 1891 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 1895 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* ----- handle argument of fn command ------- */
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 1901 "commentscan.l"
{ // end of argument
  					  if (braceCount==0)
					  {
					    if (*commentScanYYtext=='\n') yyLineNr++;
					    addOutput('\n');
					    langParser->parsePrototype(functionProto);
					    BEGIN( Comment );
					  }
  					}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 1910 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  functionProto+=' ';
  					}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 1914 "commentscan.l"
{ // non-special characters
                                          functionProto+=commentScanYYtext;
  					}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 1917 "commentscan.l"
{
                                          functionProto+=commentScanYYtext;
					  braceCount++;
					}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 1921 "commentscan.l"
{
                                          functionProto+=commentScanYYtext;
					  braceCount--;
					}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 1925 "commentscan.l"
{ // add other stuff
                                          functionProto+=*commentScanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of overload command ------- */
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 1933 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  if (functionProto.stripWhiteSpace().isEmpty())
					  { // plain overload command
					    addOutput(getOverloadDocs());
					  }
					  else // overload declaration
					  {
                                            makeStructuralIndicator(Entry::OVERLOADDOC_SEC);
					    langParser->parsePrototype(functionProto);
					  }
					  BEGIN( Comment );
  					}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 1947 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  functionProto+=' ';
  					}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 1951 "commentscan.l"
{ // add other stuff
                                          functionProto+=*commentScanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of inherit command ------- */
case 172:
YY_RULE_SETUP
#line 1957 "commentscan.l"
{ // found argument
					  current->extends->append(
					    new BaseInfo(removeRedundantWhiteSpace(commentScanYYtext),Public,Normal)
					  );
					  BEGIN( Comment );
  					}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 1963 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\inherit command has no argument"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 1971 "commentscan.l"
{ // invalid character for anchor label
  					  warn(yyFileName,yyLineNr,
					      "warning: Invalid or missing name for \\inherit command"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle argument of extends and implements commands ------- */
case 175:
YY_RULE_SETUP
#line 1980 "commentscan.l"
{ // found argument
					  current->extends->append(
					    new BaseInfo(removeRedundantWhiteSpace(commentScanYYtext),Public,Normal)
					  );
					  BEGIN( Comment );
  					}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 1986 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\extends or \\implements command has no argument"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 1994 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle language specific sections ------- */
case 178:
YY_RULE_SETUP
#line 1999 "commentscan.l"
{ /* language switch */
                                     QCString langId = &commentScanYYtext[2];
				     if (langId.isEmpty() ||
					 stricmp(Config_getEnum("OUTPUT_LANGUAGE"),langId)==0)
				     { // enable language specific section
				       BEGIN(Comment);
				     }
                                   }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 2007 "commentscan.l"
{ /* any character not a *, @, backslash or new line */
                                   }
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 2009 "commentscan.l"
{ /* new line in verbatim block */
  		                     if (*commentScanYYtext=='\n') yyLineNr++;
                                   }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 2012 "commentscan.l"
{ /* any other character */
                                   }
	YY_BREAK
/* ----- handle arguments of the cite command ------- */
case 182:
YY_RULE_SETUP
#line 2017 "commentscan.l"
{ // found argyment
  					  addCite();
                                          addOutput(commentScanYYtext);
					  BEGIN(Comment);
  					}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 2022 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\cite command has no label"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 2030 "commentscan.l"
{ // invalid character for cite label
  					  warn(yyFileName,yyLineNr,
					      "warning: Invalid or missing cite label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle argument of the copydoc command ------- */
case YY_STATE_EOF(CopyDoc):
#line 2039 "commentscan.l"
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 2040 "commentscan.l"
{
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  setOutput(OutputDoc);
                                          addOutput("\\copydetails ");
					  addOutput(g_copyDocArg);
					  addOutput("\n");
					  BEGIN(Comment);
  					}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 2049 "commentscan.l"
{
  					  g_copyDocArg+=commentScanYYtext;
					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 2053 "commentscan.l"
{
  					  g_copyDocArg+=commentScanYYtext;
					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 2059 "commentscan.l"
ECHO;
	YY_BREAK
#line 5870 "<stdout>"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(PageDocArg1):
			case YY_STATE_EOF(PageDocArg2):
			case YY_STATE_EOF(RelatesParam1):
			case YY_STATE_EOF(ClassDocArg1):
			case YY_STATE_EOF(ClassDocArg2):
			case YY_STATE_EOF(ClassDocArg3):
			case YY_STATE_EOF(CategoryDocArg1):
			case YY_STATE_EOF(XRefItemParam1):
			case YY_STATE_EOF(XRefItemParam2):
			case YY_STATE_EOF(XRefItemParam3):
			case YY_STATE_EOF(FileDocArg1):
			case YY_STATE_EOF(EnumDocArg1):
			case YY_STATE_EOF(NameSpaceDocArg1):
			case YY_STATE_EOF(PackageDocArg1):
			case YY_STATE_EOF(GroupDocArg1):
			case YY_STATE_EOF(GroupDocArg2):
			case YY_STATE_EOF(SectionLabel):
			case YY_STATE_EOF(SectionTitle):
			case YY_STATE_EOF(SubpageLabel):
			case YY_STATE_EOF(SubpageTitle):
			case YY_STATE_EOF(LineParam):
			case YY_STATE_EOF(GuardParam):
			case YY_STATE_EOF(GuardParamEnd):
			case YY_STATE_EOF(SkipGuardedSection):
			case YY_STATE_EOF(SkipInternal):
			case YY_STATE_EOF(NameParam):
			case YY_STATE_EOF(InGroupParam):
			case YY_STATE_EOF(FnParam):
			case YY_STATE_EOF(OverloadParam):
			case YY_STATE_EOF(InheritParam):
			case YY_STATE_EOF(ExtendsParam):
			case YY_STATE_EOF(ReadFormulaShort):
			case YY_STATE_EOF(ReadFormulaLong):
			case YY_STATE_EOF(AnchorLabel):
			case YY_STATE_EOF(HtmlComment):
			case YY_STATE_EOF(SkipLang):
			case YY_STATE_EOF(CiteLabel):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed commentScanYYin at a new source and called
			 * commentScanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = commentScanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( commentScanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * commentScanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of commentScanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			commentScanYYrestart(commentScanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) commentScanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1095 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1095 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1094);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up commentScanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					commentScanYYrestart(commentScanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( commentScanYYwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve commentScanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void commentScanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        commentScanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE );
	}

	commentScanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	commentScanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void commentScanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		commentScanYYpop_buffer_state();
	 *		commentScanYYpush_buffer_state(new_buffer);
     */
	commentScanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	commentScanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (commentScanYYwrap()) processing, but the only time this flag
	 * is looked at is after commentScanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void commentScanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	commentScanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE commentScanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) commentScanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) commentScanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	commentScanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with commentScanYY_create_buffer()
 * 
 */
    void commentScanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		commentScanYYfree((void *) b->yy_ch_buf  );

	commentScanYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a commentScanYYrestart() or at EOF.
 */
    static void commentScanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	commentScanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then commentScanYY_init_buffer was _probably_
     * called from commentScanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void commentScanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		commentScanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void commentScanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	commentScanYYensure_buffer_stack();

	/* This block is copied from commentScanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from commentScanYY_switch_to_buffer. */
	commentScanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void commentScanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	commentScanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		commentScanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void commentScanYYensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentScanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentScanYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentScanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentScanYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE commentScanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) commentScanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	commentScanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to commentScanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       commentScanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE commentScanYY_scan_string (yyconst char * yystr )
{
    
	return commentScanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to commentScanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentScanYY_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) commentScanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = commentScanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in commentScanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentScanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		commentScanYYtext[commentScanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = commentScanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		commentScanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int commentScanYYget_lineno  (void)
{
        
    return commentScanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *commentScanYYget_in  (void)
{
        return commentScanYYin;
}

/** Get the output stream.
 * 
 */
FILE *commentScanYYget_out  (void)
{
        return commentScanYYout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t commentScanYYget_leng  (void)
{
        return commentScanYYleng;
}

/** Get the current token.
 * 
 */

char *commentScanYYget_text  (void)
{
        return commentScanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void commentScanYYset_lineno (int  line_number )
{
    
    commentScanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see commentScanYY_switch_to_buffer
 */
void commentScanYYset_in (FILE *  in_str )
{
        commentScanYYin = in_str ;
}

void commentScanYYset_out (FILE *  out_str )
{
        commentScanYYout = out_str ;
}

int commentScanYYget_debug  (void)
{
        return commentScanYY_flex_debug;
}

void commentScanYYset_debug (int  bdebug )
{
        commentScanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from commentScanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    commentScanYYin = stdin;
    commentScanYYout = stdout;
#else
    commentScanYYin = (FILE *) 0;
    commentScanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * commentScanYYlex_init()
     */
    return 0;
}

/* commentScanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int commentScanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		commentScanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		commentScanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	commentScanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    commentScanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * commentScanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *commentScanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *commentScanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void commentScanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see commentScanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 2059 "commentscan.l"



//----------------------------------------------------------------------------

static bool handleBrief(const QCString &)
{
  //printf("handleBrief\n");
  setOutput(OutputBrief);
  return FALSE;
}

static bool handleFn(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MEMBERDOC_SEC);
  functionProto.resize(0);
  braceCount=0;
  BEGIN(FnParam);
  return stop;
}

static bool handleDef(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::DEFINEDOC_SEC);
  functionProto.resize(0);
  BEGIN(FnParam);
  return stop;
}

static bool handleOverload(const QCString &)
{
  functionProto.resize(0);
  BEGIN(OverloadParam);
  return FALSE;
}

static bool handleEnum(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::ENUMDOC_SEC);
  BEGIN(EnumDocArg1);
  return stop;
}

static bool handleDefGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_NORMAL;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleAddToGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_ADD;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleWeakGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_WEAK;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleNamespace(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::NAMESPACEDOC_SEC);
  BEGIN( NameSpaceDocArg1 );
  return stop;
}

static bool handlePackage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::PACKAGEDOC_SEC);
  BEGIN( PackageDocArg1 );
  return stop;
}

static bool handleClass(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::CLASSDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleHeaderFile(const QCString &)
{
  BEGIN( ClassDocArg2 );
  return FALSE;
}

static bool handleProtocol(const QCString &)
{ // Obj-C protocol
  bool stop=makeStructuralIndicator(Entry::PROTOCOLDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleCategory(const QCString &)
{ // Obj-C category
  bool stop=makeStructuralIndicator(Entry::CATEGORYDOC_SEC);
  BEGIN( CategoryDocArg1 ); 
  return stop;
}

static bool handleUnion(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::UNIONDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleStruct(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::STRUCTDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleInterface(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::INTERFACEDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleIdlException(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::EXCEPTIONDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handlePage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::PAGEDOC_SEC);
  BEGIN( PageDocArg1 );
  return stop;
}

static bool handleMainpage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MAINPAGEDOC_SEC);
  if (!stop) 
  {
    current->name = "mainpage";
  }
  BEGIN( PageDocArg2 );
  return stop;
}

static bool handleFile(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::FILEDOC_SEC);
  if (!stop) 
  {
    current->name = yyFileName;
  }
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleDir(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::DIRDOC_SEC);
  if (!stop) current->name = yyFileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleExample(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::EXAMPLE_SEC);
  if (!stop) current->name = yyFileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleDetails(const QCString &)
{
  if (inContext!=OutputBrief)
  {
    addOutput("\n\n"); // treat @details outside brief description
                       // as a new paragraph
  }
  setOutput(OutputDoc);
  return FALSE;
}

static bool handleName(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MEMBERGRP_SEC);
  if (!stop)
  {
    g_memberGroupHeader.resize(0);
    BEGIN( NameParam );
    if (g_memberGroupId!=DOX_NOGROUP) // end of previous member group
    {
      closeGroup(current,yyFileName,yyLineNr,TRUE);
    }
  }
  return stop;
}

static bool handleTodo(const QCString &)
{
  newXRefKind = XRef_Todo;
  setOutput(OutputXRef);
  xrefKind = XRef_Todo;
  return FALSE;
}

static bool handleTest(const QCString &)
{
  newXRefKind = XRef_Test;
  setOutput(OutputXRef);
  xrefKind = XRef_Test;
  return FALSE;
}

static bool handleBug(const QCString &)
{
  newXRefKind = XRef_Bug;
  setOutput(OutputXRef);
  xrefKind = XRef_Bug;
  return FALSE;
}

static bool handleDeprecated(const QCString &)
{
  newXRefKind = XRef_Deprecated;
  setOutput(OutputXRef);
  xrefKind = XRef_Deprecated;
  return FALSE;
}

static bool handleXRefItem(const QCString &)
{
  BEGIN(XRefItemParam1);
  return FALSE;
}

static bool handleRelated(const QCString &)
{
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleRelatedAlso(const QCString &)
{
  current->relatesType = Duplicate;
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleMemberOf(const QCString &)
{
  current->relatesType = MemberOf;
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleRefItem(const QCString &)
{
  addOutput(" @refitem ");
  BEGIN(LineParam);
  return FALSE;
}

static bool handleSection(const QCString &s)
{
  setOutput(OutputDoc);
  addOutput(" @"+s+" ");
  BEGIN(SectionLabel);
  if      (s=="section")       g_sectionLevel=1;
  else if (s=="subsection")    g_sectionLevel=2;
  else if (s=="subsubsection") g_sectionLevel=3;
  else if (s=="paragraph")     g_sectionLevel=4;
  return FALSE;
}

static bool handleSubpage(const QCString &s)
{
  if (current->section!=Entry::EMPTY_SEC && 
      current->section!=Entry::PAGEDOC_SEC &&
      current->section!=Entry::MAINPAGEDOC_SEC
     )
  {
    warn(yyFileName,yyLineNr,
	"warning: found \\subpage command in a comment block that is not marked as a page!");
  }
  addOutput(" @"+s+" ");
  BEGIN(SubpageLabel);
  return FALSE;
}

static bool handleAnchor(const QCString &s)
{
  addOutput(" @"+s+" ");
  BEGIN(AnchorLabel);
  return FALSE;
}

static bool handleCite(const QCString &s)
{
  addOutput(" @"+s+" ");
  BEGIN(CiteLabel);
  return FALSE;
}

static bool handleFormatBlock(const QCString &s)
{
  addOutput(" @"+s+" ");
  //printf("handleFormatBlock(%s)\n",s.data());
  blockName=s;
  g_commentCount=0;
  BEGIN(FormatBlock);
  return FALSE;
}

static bool handleAddIndex(const QCString &)
{
  addOutput(" @addindex ");
  BEGIN(LineParam);
  return FALSE;
}

static bool handleIf(const QCString &)
{
  enabledSectionFound=FALSE;
  guardType = Guard_If;
  g_spaceBeforeIf = g_spaceBeforeCmd;
  BEGIN(GuardParam);
  return FALSE;
}

static bool handleIfNot(const QCString &)
{
  enabledSectionFound=FALSE;
  guardType = Guard_IfNot;
  g_spaceBeforeIf = g_spaceBeforeCmd;
  BEGIN(GuardParam);
  return FALSE;
}

static bool handleElseIf(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"warning: found \\else without matching start command");
  }
  else
  {
    guardType = enabledSectionFound ? Guard_Skip : Guard_If;
    BEGIN(GuardParam);
  }
  return FALSE;
}

static bool handleElse(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"warning: found \\else without matching start command");
  }
  else
  {
    BEGIN( SkipGuardedSection );
  }
  return FALSE;
}

static bool handleEndIf(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"warning: found \\endif without matching start command");
  }
  else
  {
    delete guards.pop();
  }
  enabledSectionFound=FALSE;
  BEGIN( GuardParamEnd );
  return FALSE;
}

static bool handleIngroup(const QCString &)
{
  inGroupParamFound=FALSE;
  BEGIN( InGroupParam );
  return FALSE;
}

static bool handleNoSubGrouping(const QCString &)
{
  current->subGrouping = FALSE; 
  return FALSE;
}

static bool handleShowInitializer(const QCString &)
{
  current->initLines = 100000; // ON
  return FALSE;
}

static bool handleHideInitializer(const QCString &)
{
  current->initLines = 0; // OFF
  return FALSE;
}

static bool handleCallgraph(const QCString &)
{
  current->callGraph = TRUE; // ON
  return FALSE;
}

static bool handleCallergraph(const QCString &)
{
  current->callerGraph = TRUE; // ON
  return FALSE;
}

static bool handleInternal(const QCString &)
{
  if (!Config_getBool("INTERNAL_DOCS"))
  {
    // make sure some whitespace before a \internal command
    // is not treated as "documentation"
    if (current->doc.stripWhiteSpace().isEmpty())
    { 
      current->doc.resize(0);
    }
    g_condCount=0;
    BEGIN( SkipInternal );
  }
  else
  {
    // re-enabled for bug640828
    addOutput("\\internal "); 
  }
  return FALSE;
}

static bool handleLineBr(const QCString &)
{
  addOutput('\n');
  return FALSE;
}

static bool handleStatic(const QCString &)
{
  endBrief();
  current->stat = TRUE; 
  return FALSE;
}

static bool handlePure(const QCString &)
{
  endBrief();
  current->virt = Pure; 
  return FALSE;
}

static bool handlePrivate(const QCString &)
{
  current->protection = Private;
  return FALSE;
}

static bool handlePrivateSection(const QCString &)
{
  current->protection = protection = Private;
  return FALSE;
}

static bool handleProtected(const QCString &)
{
  current->protection = Protected;
  return FALSE;
}

static bool handleProtectedSection(const QCString &)
{
  current->protection = protection = Protected ;
  return FALSE;
}

static bool handlePublic(const QCString &)
{
  current->protection = Public;
  return FALSE;
}

static bool handlePublicSection(const QCString &)
{
  current->protection = protection = Public;
  return FALSE;
}

static bool handleToc(const QCString &)
{
  if (current->section==Entry::PAGEDOC_SEC || 
      current->section==Entry::MAINPAGEDOC_SEC)
  {
    current->stat=TRUE;  // we 'abuse' stat to pass whether or the TOC is enabled
  }
  return FALSE;
}

static bool handleInherit(const QCString &)
{
  BEGIN(InheritParam);
  return FALSE;
}

static bool handleExtends(const QCString &)
{
  BEGIN(ExtendsParam);
  return FALSE;
}

static bool handleCopyDoc(const QCString &)
{
  setOutput(OutputBrief);
  addOutput("\\copybrief ");
  g_copyDocArg.resize(0);
  BEGIN(CopyDoc);
  return FALSE;
}

//----------------------------------------------------------------------------

static void checkFormula()
{
  if (YY_START==ReadFormulaShort || YY_START==ReadFormulaLong)
  {
    warn(yyFileName,yyLineNr,"warning: End of comment block while inside formula.");
  }
}

//----------------------------------------------------------------------------

bool parseCommentBlock(/* in */     ParserInterface *parser,
                       /* in */     Entry *curEntry,
                       /* in */     const QCString &comment,
		       /* in */     const QCString &fileName,
		       /* in,out */ int  &lineNr,
		       /* in */     bool isBrief,
		       /* in */     bool isAutoBriefOn,
		       /* in */     bool isInbody,
		       /* in,out */ Protection &prot,
		       /* in,out */ int &position,
		       /* out */    bool &newEntryNeeded
		      )
{
  //printf("parseCommentBlock() isBrief=%d isAutoBriefOn=%d lineNr=%d\n",
  //    isBrief,isAutoBriefOn,lineNr);

  initParser();
  guards.setAutoDelete(TRUE);
  guards.clear();
  langParser     = parser;
  current        = curEntry;
  if (comment.isEmpty()) return FALSE; // avoid empty strings
  inputString    = comment;
  inputString.append(" ");
  inputPosition  = position;
  yyLineNr       = lineNr;
  yyFileName     = fileName;
  protection     = prot;
  needNewEntry   = FALSE;
  xrefKind       = XRef_None;
  xrefAppendFlag = FALSE;
  insidePre      = FALSE;
  parseMore      = FALSE;
  inBody         = isInbody;
  outputXRef.resize(0);
  setOutput( isBrief || isAutoBriefOn ? OutputBrief : OutputDoc );
  briefEndsAtDot = isAutoBriefOn;
  g_condCount    = 0;
  g_sectionLevel = 0;
  g_spaceBeforeCmd = FALSE;
  g_spaceBeforeIf  = FALSE;

  if (!current->inbodyDocs.isEmpty() && isInbody) // separate in body fragments
  {
    current->inbodyDocs+="\n\n";
  }

  Debug::print(Debug::CommentScan,0,"-----------\nCommentScanner: %s:%d\n"
               "input=[%s]\n",fileName.data(),lineNr,comment.data()
              );
  
  commentScanYYrestart( commentScanYYin );
  BEGIN( Comment );
  commentScanYYlex();
  setOutput( OutputDoc );

  if (YY_START==OverloadParam) // comment ended with \overload
  {
    addOutput(getOverloadDocs());
  }

  if (!guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,"Documentation block ended in the middle of a conditional section!");
  }

  current->doc=stripLeadingAndTrailingEmptyLines(current->doc);

  if (current->section==Entry::FILEDOC_SEC && current->doc.isEmpty())
  {
    // to allow a comment block with just a @file command.
    current->doc="\n\n";
  }

  if (current->section==Entry::MEMBERGRP_SEC &&
      g_memberGroupId==DOX_NOGROUP) // @name section but no group started yet
  {
    openGroup(current,yyFileName,yyLineNr);
  }

  if (Doxygen::markdownSupport)
  {
    current->brief      = processMarkdown(fileName,current,current->brief);
    current->doc        = processMarkdown(fileName,current,current->doc);
    current->inbodyDocs = processMarkdown(fileName,current,current->inbodyDocs);
  }

  Debug::print(Debug::CommentScan,0,
               "brief=[%s]\ndocs=[%s]\ninbody=[%s]\n===========\n",
	       current->brief.data(),current->doc.data(),current->inbodyDocs.data()
              );
  
  checkFormula();
  prot = protection;
  
  groupAddDocs(curEntry,fileName);

  newEntryNeeded = needNewEntry;

  // if we did not proceed during this call, it does not make
  // sense to continue, since we get stuck. See bug 567346 for situations
  // were this happens
  if (parseMore && position==inputPosition) parseMore=FALSE;

  if (parseMore) position=inputPosition; else position=0;

  lineNr = yyLineNr;
  //printf("position=%d parseMore=%d\n",position,parseMore);

  return parseMore;
}

//---------------------------------------------------------------------------

void groupEnterFile(const char *fileName,int)
{
  g_autoGroupStack.setAutoDelete(TRUE);
  g_autoGroupStack.clear();
  g_memberGroupId = DOX_NOGROUP;
  g_memberGroupDocs.resize(0);
  g_memberGroupRelates.resize(0);
  g_compoundName=fileName;
}

void groupLeaveFile(const char *fileName,int line)
{
  //if (g_memberGroupId!=DOX_NOGROUP)
  //{
  //  warn(fileName,line,"warning: end of file while inside a member group\n");
  //}
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  if (!g_autoGroupStack.isEmpty())
  {
    warn(fileName,line,"warning: end of file while inside a group\n");
  }
}

void groupEnterCompound(const char *fileName,int line,const char *name)
{
  if (g_memberGroupId!=DOX_NOGROUP)
  {
    warn(fileName,line,"warning: try to put compound %s inside a member group\n",name);
  }
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  g_compoundName = name;
  int i = g_compoundName.find('(');
  if (i!=-1) 
  {
    g_compoundName=g_compoundName.left(i); // strip category (Obj-C)
  }
  if (g_compoundName.isEmpty())
  {
    g_compoundName=fileName;
  }
  //printf("groupEnterCompound(%s)\n",name);
}

void groupLeaveCompound(const char *,int,const char * /*name*/)
{
  //printf("groupLeaveCompound(%s)\n",name);
  //if (g_memberGroupId!=DOX_NOGROUP)
  //{
  //  warn(fileName,line,"warning: end of compound %s while inside a member group\n",name);
  //}
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  g_compoundName.resize(0);
}

static int findExistingGroup(int &groupId,const MemberGroupInfo *info)
{
  //printf("findExistingGroup %s:%s\n",info->header.data(),info->compoundName.data());
  QIntDictIterator<MemberGroupInfo> di(Doxygen::memGrpInfoDict);
  MemberGroupInfo *mi;
  for (di.toFirst();(mi=di.current());++di)
  {
    if (g_compoundName==mi->compoundName &&  // same file or scope
	!mi->header.isEmpty() &&             // not a nameless group
	stricmp(mi->header,info->header)==0  // same header name
       )
    {
      //printf("Found it!\n");
      return di.currentKey(); // put the item in this group
    }
  }
  groupId++; // start new group
  return groupId;
}

void openGroup(Entry *e,const char *,int)
{
  //printf("==> openGroup(name=%s,sec=%x) g_autoGroupStack=%d\n",
  //  	e->name.data(),e->section,g_autoGroupStack.count());
  if (e->section==Entry::GROUPDOC_SEC) // auto group
  {
    g_autoGroupStack.push(new Grouping(e->name,e->groupingPri()));
  }
  else // start of a member group
  {
    //printf("    membergroup id=%d %s\n",g_memberGroupId,g_memberGroupHeader.data());
    if (g_memberGroupId==DOX_NOGROUP) // no group started yet
    {
      static int curGroupId=0;

      MemberGroupInfo *info = new MemberGroupInfo;
      info->header = g_memberGroupHeader.stripWhiteSpace();
      info->compoundName = g_compoundName;
      g_memberGroupId = findExistingGroup(curGroupId,info);
      //printf("    use membergroup %d\n",g_memberGroupId);
      Doxygen::memGrpInfoDict.insert(g_memberGroupId,info);

      g_memberGroupRelates = e->relates;
      e->mGrpId = g_memberGroupId;
    }
  }
}

void closeGroup(Entry *e,const char *fileName,int,bool foundInline)
{
  //printf("==> closeGroup(name=%s,sec=%x) g_autoGroupStack=%d\n",
  //    e->name.data(),e->section,g_autoGroupStack.count());
  if (g_memberGroupId!=DOX_NOGROUP) // end of member group
  {
    MemberGroupInfo *info=Doxygen::memGrpInfoDict.find(g_memberGroupId);
    if (info) // known group
    {
      info->doc = g_memberGroupDocs;
      info->docFile = fileName;
    }
    g_memberGroupId=DOX_NOGROUP;
    g_memberGroupRelates.resize(0);
    g_memberGroupDocs.resize(0);
    e->mGrpId=DOX_NOGROUP;
    //printf("new group id=%d\n",g_memberGroupId);
  }
  else if (!g_autoGroupStack.isEmpty()) // end of auto group
  {
    Grouping *grp = g_autoGroupStack.pop();
    // see bug577005: we should not remove the last group for e
    if (!foundInline) e->groups->removeLast();
    //printf("Removing %s e=%p\n",grp->groupname.data(),e);
    delete grp;
    if (!foundInline) initGroupInfo(e);
  }
}

void initGroupInfo(Entry *e)
{
  //printf("==> initGroup(id=%d,related=%s,e=%p)\n",g_memberGroupId,
  //       g_memberGroupRelates.data(),e);
  e->mGrpId     = g_memberGroupId;
  e->relates    = g_memberGroupRelates;
  if (!g_autoGroupStack.isEmpty())
  {
    //printf("Appending group %s to %s: count=%d entry=%p\n",
    //	g_autoGroupStack.top()->groupname.data(),
    //	e->name.data(),e->groups->count(),e);
    e->groups->append(new Grouping(*g_autoGroupStack.top()));
  }
}

static void groupAddDocs(Entry *e,const char *fileName)
{
  if (e->section==Entry::MEMBERGRP_SEC)
  {
    g_memberGroupDocs=e->brief.stripWhiteSpace();
    e->doc = stripLeadingAndTrailingEmptyLines(e->doc);
    if (!g_memberGroupDocs.isEmpty() && !e->doc.isEmpty())
    {
      g_memberGroupDocs+="\n\n";
    }
    g_memberGroupDocs+=e->doc;
    MemberGroupInfo *info=Doxygen::memGrpInfoDict.find(g_memberGroupId);
    if (info) 
    {
      info->doc = g_memberGroupDocs;
      info->docFile = fileName;
      info->setRefItems(e->sli);
    }
    e->doc.resize(0);
    e->brief.resize(0);
  }
}


#if !defined(YY_FLEX_SUBMINOR_VERSION) 
//----------------------------------------------------------------------------
extern "C" { // some bogus code to keep the compiler happy
  void commentScanYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


